<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PenZ&#39;s Space</title>
  
  <subtitle>万物归一</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2025-04-07T09:30:10.821Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>PenZ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TON 合约开发个人经历(2)</title>
    <link href="http://yoursite.com/TON-%E5%90%88%E7%BA%A6%E5%BC%80%E5%8F%91%E4%B8%AA%E4%BA%BA%E7%BB%8F%E5%8E%86-2/"/>
    <id>http://yoursite.com/TON-%E5%90%88%E7%BA%A6%E5%BC%80%E5%8F%91%E4%B8%AA%E4%BA%BA%E7%BB%8F%E5%8E%86-2/</id>
    <published>2025-04-07T08:49:21.000Z</published>
    <updated>2025-04-07T09:30:10.821Z</updated>
    
    <content type="html"><![CDATA[<p>接上文，开始我个人经历(2)之前请先在<span class="exturl" data-url="aHR0cHM6Ly9zdGVwaWsub3JnL2xlc3Nvbi8xMDExNDgzL3N0ZXAvMT91bml0PTEwMTkzNDM=">入门课程<i class="fa fa-external-link-alt"></i></span>开始学习从Smart contract development lifecycle学习到Mastering FunC contracts coding跟着视频或者文档一步一步敲完事例代码。</p><p>接下来的内容默认你已经懂得了基本的func以及ton链的一些知识。<br>首先我们以一个简单银行合约为例子：<br>简单银行目标就是存款，利息计算，提取本金，领取利息，以及合约所有者特权(管理权限)<br>在产品的角度来看用户的旅程：</p><ol><li>用户存款</li><li>合约自动计算利息</li><li>用户领取利息</li><li>用户提取本金</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;接上文，开始我个人经历(2)之前请先在&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9zdGVwaWsub3JnL2xlc3Nvbi8xMDExNDgzL3N0ZXAvMT91bml0PTEwMTkzNDM=&quot;&gt;入门课程&lt;i class=
      
    
    </summary>
    
    
      <category term="Ton 合约开发" scheme="http://yoursite.com/categories/Ton-%E5%90%88%E7%BA%A6%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Ton Func" scheme="http://yoursite.com/tags/Ton-Func/"/>
    
  </entry>
  
  <entry>
    <title>TON 合约开发个人经历(1)</title>
    <link href="http://yoursite.com/TON-%E5%90%88%E7%BA%A6%E5%BC%80%E5%8F%91%E4%B8%AA%E4%BA%BA%E7%BB%8F%E5%8E%86-1/"/>
    <id>http://yoursite.com/TON-%E5%90%88%E7%BA%A6%E5%BC%80%E5%8F%91%E4%B8%AA%E4%BA%BA%E7%BB%8F%E5%8E%86-1/</id>
    <published>2025-04-06T09:41:58.000Z</published>
    <updated>2025-04-07T09:30:10.820Z</updated>
    
    <content type="html"><![CDATA[<p>引子：因工作的原因接触Ton链的合约开发，遂埋头进入Ton链的学习，一个猛扎下去才发现水太深了</p><p>学习新技术肯定需要官方的文档：</p><ol><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnRvbi5vcmcvbWFuZGFyaW4vdjMvZ3VpZGVsaW5lcy9nZXQtc3RhcnRlZC13aXRoLXRvbg==">https://docs.ton.org/mandarin/v3/guidelines/get-started-with-ton<i class="fa fa-external-link-alt"></i></span> Ton的相关文档</li><li><span class="exturl" data-url="aHR0cHM6Ly9zdGVwaWsub3JnL2NvdXJzZS8xNzY3NTQvcHJvbW8=">https://stepik.org/course/176754/promo<i class="fa fa-external-link-alt"></i></span> Ton的合约入门视频课程学习<br>上述两个是我主要学习使用的文档</li></ol><p>接下来我阐述的是，我视角中如何理解和学习的过程：<br>首先，我具有evm链的合约开发经验和基础知识，那在TON链上很多东西完全不同可以说是一切都是新的，所以即使你没有接触过evm也没有关系。</p><a id="more"></a><p><strong>TON 像一个万维网，每个账户是独立计算机，只能通过消息通信。</strong><br><strong>EVM 像一台超级计算机，每个账户是一个运行中的程序，可以直接访问共享资源。</strong><br>这是我简单理解的对比概念</p><p>TON 账户里的余额会因为“存储费用”而逐渐减少，而这种费用可以类比为“租赁一台永远在线的计算机”的费用。(非常牛逼的设定)</p><p>当账户变成 <strong>inactive</strong> 状态时，账户的所有状态（合约代码、数据存储等）<strong>都会被删除</strong>，只保留一个“空壳”地址</p><p>TON架构 三层架构 使用共识机制采用pos(proof-of-stake)共识算法即验证者必须交纳保证金来确保行为合法。</p><ul><li><strong>主链(Masterchain)</strong>：管理整个网络的“主链”，记录所有工作链和分片链的元数据、全局状态快照。</li><li><strong>工作链(Workchain)</strong>：工作链，是运行在 Masterchain 之下的“子链”，可并行存在多个，每条链可以有不同智能合约语言或规则。</li><li><strong>分片链(Shardchain0)：</strong>是 Workchain 动态分裂出来的多条“子链”，真正处理大量用户交易和账户状态</li></ul><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">+<span class="comment">----------------+</span></span><br><span class="line">|  Masterchain  |</span><br><span class="line">| (全局元数据)   |</span><br><span class="line">+<span class="comment">----------------+</span></span><br><span class="line">         |</span><br><span class="line">         v</span><br><span class="line">+<span class="comment">----------------+         +----------------+</span></span><br><span class="line">|  Workchain #<span class="number">0</span> |   ...   |  Workchain #N  |</span><br><span class="line">| (主工作链)     |         | (可定制规则)   |</span><br><span class="line">+<span class="comment">----------------+         +----------------+</span></span><br><span class="line">      |   |                          |</span><br><span class="line">      v   v                          v</span><br><span class="line">+<span class="comment">-----------+  +-----------+   +-----------+</span></span><br><span class="line">|Shardchain0|  |Shardchain1|   |Shardchain0|</span><br><span class="line">+<span class="comment">-----------+  +-----------+   +-----------+</span></span><br><span class="line">      |              |                |</span><br><span class="line">      +<span class="comment">------...-----+-------...------+</span></span><br><span class="line">         （分片链动态增加或合并）</span><br></pre></td></tr></table></figure><h3 id="EVM-与-TON-多签合约的异同点"><a href="#EVM-与-TON-多签合约的异同点" class="headerlink" title="EVM 与 TON 多签合约的异同点"></a>EVM 与 TON 多签合约的异同点</h3><h4 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h4><ol><li>多签基本概念一致<ul><li>EVM 和 TON 上的多签合约都旨在实现多个签名者共同授权交易，以提升安全性。</li><li>都需要定义参与者（签名者）、签名阈值（例如 m/n，m 个签名者同意才能执行）以及交易执行逻辑。</li></ul></li><li>去中心化执行<ul><li>两者都运行在区块链上，多签合约逻辑由智能合约在去中心化环境中执行，保证透明性和不可篡改性。</li></ul></li><li>支持复杂逻辑<ul><li>EVM 和 TON 都支持编写带有条件逻辑的多签合约，例如时间锁、权限管理等功能。</li></ul></li></ol><hr><h4 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h4><table><thead><tr><th><strong>方面</strong></th><th><strong>EVM</strong></th><th><strong>TON</strong></th></tr></thead><tbody><tr><td><strong>编程语言</strong></td><td>主要使用 Solidity 或 Vyper，语法类似传统编程语言（如 C++、JavaScript）。</td><td>使用 FunC（类似 C）或 Fift，语法更底层且专注于 TON 的异步特性。</td></tr><tr><td><strong>合约模型</strong></td><td>基于账户模型，合约是一个状态机，状态存储在区块链上。</td><td>基于 Actor 模型，合约是独立的“单元”（cell），异步消息驱动。</td></tr><tr><td><strong>交易费用</strong></td><td>Gas 费用统一计算，基于操作复杂度，需预估 Gas Limit。</td><td>费用分为存储费、计算费和消息传递费，需显式管理存储和资源。</td></tr><tr><td><strong>状态管理</strong></td><td>状态存储在链上，合约可以直接修改全局状态，适合同步操作。</td><td>状态分片存储，合约通过消息通信，适合异步和分片设计。</td></tr><tr><td><strong>签名验证方式</strong></td><td>使用以太坊的 ECDSA 签名算法，验证逻辑需在合约中手动实现。</td><td>TON 使用 Ed25519 签名算法，内置支持更高效的签名验证。</td></tr><tr><td><strong>执行效率</strong></td><td>单线程执行，依赖链的吞吐量（受限于以太坊或 L2 的 TPS）。</td><td>并行执行，得益于分片和工作链设计，理论上吞吐量更高。</td></tr><tr><td><strong>开发复杂性</strong></td><td>Solidity 生态成熟，工具丰富（如 Remix、Hardhat），但 Gas 优化较复杂。</td><td>FunC 学习曲线陡峭，生态较新，工具链（如 Blueprint）仍在发展中。</td></tr><tr><td><strong>扩展性</strong></td><td>扩展性依赖 Layer 2 或侧链，单链性能有限。</td><td>原生支持分片，扩展性内置于架构中，适合大规模多签场景。</td></tr></tbody></table><hr><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li><strong>EVM</strong> 适合熟悉传统区块链开发的开发者，其生态成熟，但受限于 Gas 成本和单链性能，编写多签合约时需关注 Gas 优化和同步逻辑。</li><li><strong>TON</strong> 强调异步处理和高吞吐量，适合需要高效并行处理的多签场景，但开发门槛较高，需适应其独特的分片和消息机制。</li></ul><p>下一节将会开始TON的Func语言的初步合约开发</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;引子：因工作的原因接触Ton链的合约开发，遂埋头进入Ton链的学习，一个猛扎下去才发现水太深了&lt;/p&gt;
&lt;p&gt;学习新技术肯定需要官方的文档：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9kb2NzLnRvbi5vcmcvbWFuZGFyaW4vdjMvZ3VpZGVsaW5lcy9nZXQtc3RhcnRlZC13aXRoLXRvbg==&quot;&gt;https://docs.ton.org/mandarin/v3/guidelines/get-started-with-ton&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt; Ton的相关文档&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9zdGVwaWsub3JnL2NvdXJzZS8xNzY3NTQvcHJvbW8=&quot;&gt;https://stepik.org/course/176754/promo&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt; Ton的合约入门视频课程学习&lt;br&gt;上述两个是我主要学习使用的文档&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;接下来我阐述的是，我视角中如何理解和学习的过程：&lt;br&gt;首先，我具有evm链的合约开发经验和基础知识，那在TON链上很多东西完全不同可以说是一切都是新的，所以即使你没有接触过evm也没有关系。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Ton 合约开发" scheme="http://yoursite.com/categories/Ton-%E5%90%88%E7%BA%A6%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Ton Func" scheme="http://yoursite.com/tags/Ton-Func/"/>
    
  </entry>
  
  <entry>
    <title>依赖倒置解耦的简单事例(vue3)</title>
    <link href="http://yoursite.com/%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE%E8%A7%A3%E8%80%A6%E7%9A%84%E7%AE%80%E5%8D%95%E4%BA%8B%E4%BE%8B-vue3/"/>
    <id>http://yoursite.com/%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE%E8%A7%A3%E8%80%A6%E7%9A%84%E7%AE%80%E5%8D%95%E4%BA%8B%E4%BE%8B-vue3/</id>
    <published>2024-08-15T02:34:02.000Z</published>
    <updated>2025-04-07T09:30:10.827Z</updated>
    
    <content type="html"><![CDATA[<h1 id="场景1：没有依赖倒置的耦合代码"><a href="#场景1：没有依赖倒置的耦合代码" class="headerlink" title="场景1：没有依赖倒置的耦合代码"></a>场景1：没有依赖倒置的耦合代码</h1><h2 id="1-定义具体的消息服务类"><a href="#1-定义具体的消息服务类" class="headerlink" title="1. 定义具体的消息服务类"></a>1. 定义具体的消息服务类</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// services/EmailService.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">EmailService</span> </span>&#123;</span><br><span class="line">  send(to, message) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Sending email to <span class="subst">$&#123;to&#125;</span>: <span class="subst">$&#123;message&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// services/SMSService.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">SMSService</span> </span>&#123;</span><br><span class="line">  send(to, message) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Sending SMS to <span class="subst">$&#123;to&#125;</span>: <span class="subst">$&#123;message&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-在组件中直接依赖具体的服务"><a href="#2-在组件中直接依赖具体的服务" class="headerlink" title="2. 在组件中直接依赖具体的服务"></a>2. 在组件中直接依赖具体的服务</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- components/NotificationComponent.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"sendNotification"</span>&gt;</span>Send Notification<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 直接引入具体的消息服务实现</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> EmailService <span class="keyword">from</span> <span class="string">'../services/EmailService'</span>;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// import SMSService from '../services/SMSService'; // 如果想使用 SMS 服务，需要手动修改这里</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> emailService = <span class="keyword">new</span> EmailService();</span></span><br><span class="line"><span class="actionscript"><span class="comment">// const smsService = new SMSService(); // 如果要切换到 SMS 服务，需要手动创建实例</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> sendNotification = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">  emailService.send(<span class="string">'user@example.com'</span>, <span class="string">'Hello without Dependency Inversion!'</span>);</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// smsService.send('123-456-7890', 'Hello via SMS!'); // 如果要使用 SMS 服务，需要手动修改这里</span></span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="场景1结论"><a href="#场景1结论" class="headerlink" title="场景1结论"></a>场景1结论</h2><p>假设你想从 EmailService 切换到 SMSService，你需要在组件代码中手动进行以下修改：</p><ul><li>修改 import 语句，切换到新的服务类。</li><li>修改实例化代码，使用新的服务类创建实例。</li><li>修改所有调用代码，确保使用新的服务实例发送消息。</li></ul><h1 id="场景2：使用依赖倒置解耦合代码"><a href="#场景2：使用依赖倒置解耦合代码" class="headerlink" title="场景2：使用依赖倒置解耦合代码"></a>场景2：使用依赖倒置解耦合代码</h1><h2 id="1-定义-MessageService-抽象接口"><a href="#1-定义-MessageService-抽象接口" class="headerlink" title="1. 定义 MessageService 抽象接口"></a>1. 定义 MessageService 抽象接口</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// services/MessageService.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageService</span> </span>&#123;</span><br><span class="line">  send(to, message) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'This method should be overridden'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-定义具体的消息服务类"><a href="#2-定义具体的消息服务类" class="headerlink" title="2. 定义具体的消息服务类"></a>2. 定义具体的消息服务类</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// services/EmailService.js</span></span><br><span class="line"><span class="keyword">import</span> MessageService <span class="keyword">from</span> <span class="string">'./MessageService'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">EmailService</span> <span class="keyword">extends</span> <span class="title">MessageService</span> </span>&#123;</span><br><span class="line">  send(to, message) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Sending email to <span class="subst">$&#123;to&#125;</span>: <span class="subst">$&#123;message&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// services/SMSService.js</span></span><br><span class="line"><span class="keyword">import</span> MessageService <span class="keyword">from</span> <span class="string">'./MessageService'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">SMSService</span> <span class="keyword">extends</span> <span class="title">MessageService</span> </span>&#123;</span><br><span class="line">  send(to, message) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Sending SMS to <span class="subst">$&#123;to&#125;</span>: <span class="subst">$&#123;message&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-在页面中提供消息服务"><a href="#3-在页面中提供消息服务" class="headerlink" title="3. 在页面中提供消息服务"></a>3. 在页面中提供消息服务</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- page.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">NotificationComponent</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; provide &#125; <span class="keyword">from</span> <span class="string">'vue'</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> EmailService <span class="keyword">from</span> <span class="string">'./services/EmailService'</span>;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// import SMSService from './services/SMSService'; // 可以替换 EmailService</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> messageService = <span class="keyword">new</span> EmailService();</span></span><br><span class="line"><span class="actionscript"><span class="comment">// const messageService = new SMSService(); // 如果想使用 SMS 服务，可以替换上面的实例化</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">provide(<span class="string">'messageService'</span>, messageService);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-创建消息服务的组件"><a href="#4-创建消息服务的组件" class="headerlink" title="4. 创建消息服务的组件"></a>4. 创建消息服务的组件</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- components/NotificationComponent.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"sendNotification"</span>&gt;</span>Send Notification<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; inject &#125; <span class="keyword">from</span> <span class="string">'vue'</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> messageService = inject(<span class="string">'messageService'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> sendNotification = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">  messageService.send(<span class="string">'user@example.com'</span>, <span class="string">'Hello via Vue 3 and Dependency Inversion!'</span>);</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="场景2结论"><a href="#场景2结论" class="headerlink" title="场景2结论"></a>场景2结论</h2><p>解耦: 组件和服务实现之间是解耦的，组件只关心 MessageService 抽象接口，而不关心具体的实现。<br>灵活性: 可以轻松替换不同的服务实现而无需修改组件代码。<br>可测试性: 组件依赖于抽象接口，可以轻松地在测试中替换为模拟实现。</p><h2 id="依赖倒置的核心思想是：-quot-高层模块不应该依赖于低层模块，而是应该依赖于抽象接口-quot-。"><a href="#依赖倒置的核心思想是：-quot-高层模块不应该依赖于低层模块，而是应该依赖于抽象接口-quot-。" class="headerlink" title="依赖倒置的核心思想是：&quot;高层模块不应该依赖于低层模块，而是应该依赖于抽象接口&quot;。"></a>依赖倒置的核心思想是：&quot;高层模块不应该依赖于低层模块，而是应该依赖于抽象接口&quot;。</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;场景1：没有依赖倒置的耦合代码&quot;&gt;&lt;a href=&quot;#场景1：没有依赖倒置的耦合代码&quot; class=&quot;headerlink&quot; title=&quot;场景1：没有依赖倒置的耦合代码&quot;&gt;&lt;/a&gt;场景1：没有依赖倒置的耦合代码&lt;/h1&gt;&lt;h2 id=&quot;1-定义具体的消息服务类&quot;&gt;&lt;a href=&quot;#1-定义具体的消息服务类&quot; class=&quot;headerlink&quot; title=&quot;1. 定义具体的消息服务类&quot;&gt;&lt;/a&gt;1. 定义具体的消息服务类&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// services/EmailService.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;EmailService&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  send(to, message) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;`Sending email to &lt;span class=&quot;subst&quot;&gt;$&amp;#123;to&amp;#125;&lt;/span&gt;: &lt;span class=&quot;subst&quot;&gt;$&amp;#123;message&amp;#125;&lt;/span&gt;`&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// services/SMSService.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SMSService&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  send(to, message) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;`Sending SMS to &lt;span class=&quot;subst&quot;&gt;$&amp;#123;to&amp;#125;&lt;/span&gt;: &lt;span class=&quot;subst&quot;&gt;$&amp;#123;message&amp;#125;&lt;/span&gt;`&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;2-在组件中直接依赖具体的服务&quot;&gt;&lt;a href=&quot;#2-在组件中直接依赖具体的服务&quot; class=&quot;headerlink&quot; title=&quot;2. 在组件中直接依赖具体的服务&quot;&gt;&lt;/a&gt;2. 在组件中直接依赖具体的服务&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- components/NotificationComponent.vue --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;template&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt; @&lt;span class=&quot;attr&quot;&gt;click&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;sendNotification&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Send Notification&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;template&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;setup&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;actionscript&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 直接引入具体的消息服务实现&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; EmailService &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;../services/EmailService&#39;&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;actionscript&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// import SMSService from &#39;../services/SMSService&#39;; // 如果想使用 SMS 服务，需要手动修改这里&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;actionscript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; emailService = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; EmailService();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;actionscript&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// const smsService = new SMSService(); // 如果要切换到 SMS 服务，需要手动创建实例&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; sendNotification = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;actionscript&quot;&gt;  emailService.send(&lt;span class=&quot;string&quot;&gt;&#39;user@example.com&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Hello without Dependency Inversion!&#39;&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;actionscript&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// smsService.send(&#39;123-456-7890&#39;, &#39;Hello via SMS!&#39;); // 如果要使用 SMS 服务，需要手动修改这里&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="vue3" scheme="http://yoursite.com/tags/vue3/"/>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>如何修改npm包中的代码</title>
    <link href="http://yoursite.com/%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9npm%E5%8C%85%E4%B8%AD%E7%9A%84%E4%BB%A3%E7%A0%81/"/>
    <id>http://yoursite.com/%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9npm%E5%8C%85%E4%B8%AD%E7%9A%84%E4%BB%A3%E7%A0%81/</id>
    <published>2024-08-13T07:15:30.000Z</published>
    <updated>2025-04-07T09:30:10.828Z</updated>
    
    <content type="html"><![CDATA[<p>在开发过程中总是避免不了npm包源码不适配我们的需求，通常我们都是提pr或者fork本地改造。但是，有没有能在本地修改源码的方法呢？答案是有的 -- 本地补丁</p><p>首先在项目根目录新建patches文件夹之后输入</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff &gt; patches/third-party-package.patch</span><br></pre></td></tr></table></figure><p>这个时候我们就创建了一个空补丁包，但是为了之后可能存在的重新npm install或者yarn刷掉了所有的本地包，我们需要使用自动化地在每次安装依赖时应用这个补丁。<br>首先我们要下载两个包 postinstall-postinstall 和 patch-package</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install patch-package postinstall-postinstall --save-dev</span><br></pre></td></tr></table></figure><p>postinstall-postinstall 旨在解决 postinstall 脚本在 monorepo 或者多包（multi-package）项目中的重复执行问题。<br>patch-package 持久化依赖包的修改</p><p>在package.json中加入配置</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "postinstall": "patch-package"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在假设我们修改node_modules里的debug包<br><img data-src="https://showpenz.github.io/images/QQ_1723534472265.png" alt="alt text"><br>然后执行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx patch-package debug</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下是执行结果</span></span><br><span class="line"><span class="comment"># patch-package 8.0.0</span></span><br><span class="line"><span class="comment"># • Creating temporary folder</span></span><br><span class="line"><span class="comment"># • Installing debug@4.3.6 with yarn</span></span><br><span class="line"><span class="comment"># • Diffing your files with clean files</span></span><br><span class="line"><span class="comment"># ✔ Created file patches/debug+4.3.6.patch</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 💡 debug is on GitHub! To draft an issue based on your patch run</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     yarn patch-package debug --create-issue</span></span><br></pre></td></tr></table></figure><p>patches目录下也更新了<br><img data-src="https://showpenz.github.io/images/QQ_1723534567893.png" alt="alt text"><br>好的，现在我们删除node_modules 测试我们的补丁是否生效然后执行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn</span><br></pre></td></tr></table></figure><p>在打开node_modules发现debug的代码已经注入了补丁<img data-src="https://showpenz.github.io/images/QQ_1723534673042.png" alt="alt text"><br>上述即完成了补丁持久化的操作</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在开发过程中总是避免不了npm包源码不适配我们的需求，通常我们都是提pr或者fork本地改造。但是，有没有能在本地修改源码的方法呢？答案是有的 -- 本地补丁&lt;/p&gt;
&lt;p&gt;首先在项目根目录新建patches文件夹之后输入&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="npm" scheme="http://yoursite.com/tags/npm/"/>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>承接区块链各种DEFI项目以及以太相关合约开发</title>
    <link href="http://yoursite.com/%E6%89%BF%E6%8E%A5%E5%8C%BA%E5%9D%97%E9%93%BE%E5%90%84%E7%A7%8DDEFI%E9%A1%B9%E7%9B%AE%E4%BB%A5%E5%8F%8A%E4%BB%A5%E5%A4%AA%E7%9B%B8%E5%85%B3%E5%90%88%E7%BA%A6%E5%BC%80%E5%8F%91/"/>
    <id>http://yoursite.com/%E6%89%BF%E6%8E%A5%E5%8C%BA%E5%9D%97%E9%93%BE%E5%90%84%E7%A7%8DDEFI%E9%A1%B9%E7%9B%AE%E4%BB%A5%E5%8F%8A%E4%BB%A5%E5%A4%AA%E7%9B%B8%E5%85%B3%E5%90%88%E7%BA%A6%E5%BC%80%E5%8F%91/</id>
    <published>2021-03-01T09:06:52.000Z</published>
    <updated>2025-04-07T09:30:10.829Z</updated>
    
    <content type="html"><![CDATA[<p>如标题所述，在经历过几个DEFI项目的开发后，对于区块链的一些应用开发有了一定的见解。<br>加之有数位志同道合的伙伴能一起完成各类的区块链项目开发，在几轮区块链开发过程中捕捉到的反馈就是<font color=red>用户体验永远是第一位的</font>。<br>正好吾辈一起的小团队对于前端设计与实现上有十分独到之处，希望能有机会与各位有需求之士通力合作！</p><p>微信(wechat): LK_Hanzo_Hasashi<br>电报(telegram): +1(402)665-0197</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如标题所述，在经历过几个DEFI项目的开发后，对于区块链的一些应用开发有了一定的见解。&lt;br&gt;加之有数位志同道合的伙伴能一起完成各类的区块链项目开发，在几轮区块链开发过程中捕捉到的反馈就是&lt;font color=red&gt;用户体验永远是第一位的&lt;/font&gt;。&lt;br&gt;正好吾辈
      
    
    </summary>
    
    
    
      <category term="区块链" scheme="http://yoursite.com/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="DEFI" scheme="http://yoursite.com/tags/DEFI/"/>
    
      <category term="以太坊" scheme="http://yoursite.com/tags/%E4%BB%A5%E5%A4%AA%E5%9D%8A/"/>
    
      <category term="合约开发" scheme="http://yoursite.com/tags/%E5%90%88%E7%BA%A6%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>lgv40 韩版(v409n) bootloader 解锁教程(2)</title>
    <link href="http://yoursite.com/lgv40-%E9%9F%A9%E7%89%88-v409n-bootloader-%E8%A7%A3%E9%94%81%E6%95%99%E7%A8%8B-2/"/>
    <id>http://yoursite.com/lgv40-%E9%9F%A9%E7%89%88-v409n-bootloader-%E8%A7%A3%E9%94%81%E6%95%99%E7%A8%8B-2/</id>
    <published>2020-12-03T05:33:22.000Z</published>
    <updated>2025-04-07T09:30:10.823Z</updated>
    
    <content type="html"><![CDATA[<p>接上教程(1)，此教程为无法通过官方提供的unlock.bin解锁的手机制作的。<br>还有一个事v409n也就是韩版v40可能存在无法开启fastboot模式<br>因为fastboot模式默认被download模式覆盖了所以想进入fastboot得先通过高通9008刷机模式下把abl_a.img 替换成v35.img(材料包里) 破坏掉开机的bootloader相关检索从而曲线进入fastboot模式。<br>bootloader解锁相关用的材料[<span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMTRSRzRhMlFUeFpjR3BoZk5hZ0VSVWdd">https://pan.baidu.com/s/14RG4a2QTxZcGphfNagERUg]<i class="fa fa-external-link-alt"></i></span>(提取码: 24dn)</p><a id="more"></a><p>下面是具体操作：<br>1.首先下载好高通9008 安装包这个网络上资源众多 不赘述<br>2.进入lgv40开发者模式，打开允许oem设备解锁开关(很重要)<br>3.连接手机与pc 进入高通手机的9008模式 如何进入呢 lgv40 同时按住音量减与电源键会截屏一下然后出现倒计时重启在倒计即将为0(或者闪烁的一瞬间)时松掉其他按键同时快速连按音量加键屏幕就会黑掉并且不再亮起，可以在设备管理器的页面看到已经连接到某个com口，类似这个图<img data-src="https://i.loli.net/2020/12/07/WAFsOh4PrucLlTt.png" alt="image.png">这就表示成功连接了9008模式。<br>4.打开高通qpst<br>    (1). 选择 Flat Build模式<br>    (2). 将右下角底部的storage type选到ufs<br>    (3). 点击Select Programmer 右侧的Browse 按钮将材料包里的prog_ufs_firehose_Sdm845_lge.elf文件选中<br>    (4). 点击软件顶部Tools工具选择Partition Manager等待数秒会弹出一个窗口找到abl_a<br>    (5). 右键abl_a 选择Manage Partition Data，会再次弹出一个窗口点击Load Image选择材料包的v35.img,然后一个个窗口关闭等待文件写入几秒<br>    (6). 按住音量键减与电源键强制重启会出现一个红色三角的提醒标志，不用在意数秒后会自动重启进入到fastboot模式。<br>    (7). 下载adb，fastboot等工具[<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vc3R1ZGlvL3JlbGVhc2VzL3BsYXRmb3JtLXRvb2xzIyVFNCVCOCU4QiVFOCVCRCVCRC1keW5hbWljX2RhdGEuc2V0dmFyLmRpYWxvZ19wcm9kdWN0X25hbWVd5LiL6L295a6M5oiQ5ZCO5Zyo5LiL6L295aW955qE5paH5Lu25aS55YaF5omT5byAY21k77yM5oiW6ICF5bCG5LiL6L295aW955qE5paH5Lu25aS55ouW5YWlY21kLOWcqGNtZA==">https://developer.android.com/studio/releases/platform-tools#%E4%B8%8B%E8%BD%BD-dynamic_data.setvar.dialog_product_name]下载完成后在下载好的文件夹内打开cmd，或者将下载好的文件夹拖入cmd,在cmd<i class="fa fa-external-link-alt"></i></span> 中输入<code>fastboot oem unlock</code>,到此步奏已经解开了bootloader.<br>    (8). 现在把abl_a.img换回前面的就可以了<code>fastboot flash abl_a 你的img路径/ablpiestock.img</code>,然后重启开机就行直接按音量键减和电源键，材料包ablpieStock.img里的是安卓9的。如果材料包里的刷回去发现不能开机还是进入fastboot模式,没关系还有办法拿到本机原配的abl_a.img(下面会说)会有如何提取系统原装的一些镜像比如boot.img以及abl.img</p><p>在步骤7的时候如果你有magisk补丁过patchedboot.img(也就是用magisk root掉原版的boot.img) 也可以将此刷入<code>fastboot flash boot_a 你的img路径/patchedboot.img</code></p><p>如何解压出kdz里面的一些需要替换的镜像？<br>   教程一提供了下载kdz的地址，下载完kdz并且用LG UP刷机时我们可以同时解压出kdz步奏如下<br>   (1). cmd里下载好python (如何下载百度下)<br>   (2). 在cmd中输入python -m pip install zstandard<br>   (3). 下载kdztools[<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1NHQ01hcmt1cy9rZHp0b29scy9hcmNoaXZlL21hc3Rlci56aXBd">https://github.com/SGCMarkus/kdztools/archive/master.zip]<i class="fa fa-external-link-alt"></i></span> 解压出来<br>   (4). 将下载好的kdz拷贝到kdztools的文件夹下在这个文件夹目录下打开cmd 输入 unkdz.py -f &#39;你的kdz&#39; -x 这将会解压出一个kdzextracted文件夹在kdztools文件夹里，打开kdzextracted文件夹将xxx.dz 文件的名字改为fw.dz<br>   (5). 在kdzextracted文件夹里打开cmd，也可以通过路径在cmd 输入命令 undz.py -f kdzextracted/fw.dz -s，等个几分钟，注意磁盘够不够解压出来挺大的。最终会生成一个dzextracted文件夹各种镜像都在里面比如abl_a.img(abl_b.img和abl_a.img 是一个东西b是a的备份)，boot_a.img. 救砖的时候好用，比如前面的ablpiestock.img 无法正常开机就可以用高通qpst刷入本手机相同系统的abl.img刷入方法同上面的步奏相同找到abl_a 右键然后Load Image解压出来的救砖abl.img, boot.img同理</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接上教程(1)，此教程为无法通过官方提供的unlock.bin解锁的手机制作的。&lt;br&gt;还有一个事v409n也就是韩版v40可能存在无法开启fastboot模式&lt;br&gt;因为fastboot模式默认被download模式覆盖了所以想进入fastboot得先通过高通9008刷机模式下把abl_a.img 替换成v35.img(材料包里) 破坏掉开机的bootloader相关检索从而曲线进入fastboot模式。&lt;br&gt;bootloader解锁相关用的材料[&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMTRSRzRhMlFUeFpjR3BoZk5hZ0VSVWdd&quot;&gt;https://pan.baidu.com/s/14RG4a2QTxZcGphfNagERUg]&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;(提取码: 24dn)&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>lgv40 韩版(v409n) bootloader 解锁教程（1）</title>
    <link href="http://yoursite.com/lgv40-%E9%9F%A9%E7%89%88-v409n-bootloader-%E8%A7%A3%E9%94%81%E6%95%99%E7%A8%8B/"/>
    <id>http://yoursite.com/lgv40-%E9%9F%A9%E7%89%88-v409n-bootloader-%E8%A7%A3%E9%94%81%E6%95%99%E7%A8%8B/</id>
    <published>2020-12-01T15:47:08.000Z</published>
    <updated>2025-04-07T09:30:10.823Z</updated>
    
    <content type="html"><![CDATA[<pre><code>网购了一个洋垃圾 LGv40(v409n)韩版的 没有在大陆发售 cpu版本为高通骁龙845</code></pre><p>此机基于aosp(安卓原生系统)所以存在很多不能用的地方比如ntp服务器是谷歌的也就导致没法自动获取时间这很蛋疼<br>加上谷歌真正的全家桶一堆谷歌的app往里手机里塞却不能卸载有点强迫症犯了，最蛋疼的是好几个韩文的应用我看了头都大，基于此我想把手机root玩玩 用比较流行的magisk注入然后pacth本系统的boot.img得到新的patched-boot.img 最后刷入手机获取root权限，话不多说开始。</p><a id="more"></a><ol><li>首先，我大意了啊，没有闪。直接用原来的老一套去解锁bootloader，打开LG的developer网站[<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubGdlLmNvbS9yZXNvdXJjZS9tb2JpbGUvUmV0cmlldmVCb290bG9hZGVyLmRldl3mib7liLBMR+iuvuWkh+WmguS9leino+mUgWJvb3Rsb2FkZXLnvZHnq5nmnInor6bnu4bmraXpqqTvvIzmjqXnnYDmiZPlvIBzdXBwb3J0ZWQ=">https://developer.lge.com/resource/mobile/RetrieveBootloader.dev]找到LG设备如何解锁bootloader网站有详细步骤，接着打开supported<i class="fa fa-external-link-alt"></i></span> devices 发现LGV40 是有支持不过不是这个机型，怎么办，官方文档里不支持我这种机型的解锁，不慌我们有备而来。</li><li>既然没有支持的机型<img data-src="https://i.loli.net/2020/12/02/cveCQq3oGd7iOYB.png" alt="image.png"><br>(图表中只有欧版的）没事我们刷呗。开头，提前下载对应机型的LG的kdz(你可以理解为rom包)[<span class="exturl" data-url="aHR0cHM6Ly9sZy1maXJtd2FyZXMuY29tL2FuZHJvaWQtOS1waWUvXeaIkeWHhuWkh+WIt+aIkOasp+eJiOeahOaJgOS7peaJvlY0MDVFQlcs5py65Z6L6L6T5YWl5a6M5LiL6Z2i5pyJ5b6I5aSa5Y+v6YCJ55qE5oyR5Liq5L2g6aG655y855qE">https://lg-firmwares.com/android-9-pie/]我准备刷成欧版的所以找V405EBW,机型输入完下面有很多可选的挑个你顺眼的<i class="fa fa-external-link-alt"></i></span> 当然我建议选这个===&gt;V405EBW20c_00_OPEN_EU_DS_OP_0905.kdz（安卓9）<img data-src="https://i.loli.net/2020/12/02/gzv6TaNV3lKB4ny.png" alt="image.png"> LG fanclub有提供刷机工具[<span class="exturl" data-url="aHR0cHM6Ly9sZy1maXJtd2FyZXMuY29tL2hvdy10by1mbGFzaC9dLOS4pOenjT09Jmd0O0xH">https://lg-firmwares.com/how-to-flash/],两种==&gt;LG<i class="fa fa-external-link-alt"></i></span> UP和LG Flash tool 2014.(我个人推荐LG UP).接下来提供的是LG UP的使用教程。</li><li>首先将LG UP下载下来备用，然后破解替换里面的一些文件之所要破解替换，你直接下载来打开用就知道了。如果不破解的话存在不用使用的情况现在我们来介绍破解LG UP教程，首先打开这个网站下载国外修改过的LGUP——DualMolda.zip[<span class="exturl" data-url="aHR0cHM6Ly93d3cuYW5kcm9pZGZpbGVob3N0LmNvbS8/ZmlkPTExNDEwOTYzMTkwNjAzODQ1MDE5XeS4i+i9veWujOaIkOWQju+8jOWQr+WKqOWFpeaWh+S7tuWkueWGheeahExHVVBfU3RvcmVfRnJhbWVfVmVyXzFfMTRfMy5tc2nvvIzlubblronoo4XvvIzlj7PplK7ku6XnrqHnkIblkZjmqKHlvI/ov5DooYzohJrmnKzov5DooYxTZXREZXYuYmF06ISa5pys5bCx5Y+v5Lul5LqG77yI5LqL5YWI5YWz6Zet5omA5pyJ5omT5byA5Lit55qETEdVUO+8iSzmnIDlkI7mnIDph43opoHnmoTlsLHmmK/miZPlvIDljp/mnaXnmoTlpIfnlKjnmoTljp/lp4vniYjmnKznmoRMRw==">https://www.androidfilehost.com/?fid=11410963190603845019]下载完成后，启动入文件夹内的LGUP_Store_Frame_Ver_1_14_3.msi，并安装，右键以管理员模式运行脚本运行SetDev.bat脚本就可以了（事先关闭所有打开中的LGUP）,最后最重要的就是打开原来的备用的原始版本的LG<i class="fa fa-external-link-alt"></i></span> UP你就会发现可以使用了<img data-src="https://i.loli.net/2020/12/02/n45hM3mLAgQPWdv.png" alt="image.png">这里着重讲下圈起来的刷机模式partition dl 这个模式支持我们的混刷也就是支持将我们的韩版或者其他的版本刷成想要的版本，所以勾选它，把kdz拖到下面的filetype那一栏，选中partition dl模式点击start。。。 嗯？ 怎么进入刷机模式连不上LGUP呀！giao！ 忘记说了要用LG UP进行刷机必须要进去LG的Download模式 在这个模式中可以进行kdz的刷入。问题来了如何进入了，关机状态下按住音量键+号 插入usb即可自动进入下载模式 然后点击LG up的start的按钮运行一会儿之后会弹出一个选择页面 点击select all 按然start就行(如果想保存数据取消勾选userdata)等待全自动刷入大约3分钟。</li><li>重复步骤1按网页的说明提示操作即可解锁bootloader，如果幸运可能可以通过这个方式解锁，如果不能接下去就要走稍微复杂点的方法了。。。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;网购了一个洋垃圾 LGv40(v409n)韩版的 没有在大陆发售 cpu版本为高通骁龙845&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;此机基于aosp(安卓原生系统)所以存在很多不能用的地方比如ntp服务器是谷歌的也就导致没法自动获取时间这很蛋疼&lt;br&gt;加上谷歌真正的全家桶一堆谷歌的app往里手机里塞却不能卸载有点强迫症犯了，最蛋疼的是好几个韩文的应用我看了头都大，基于此我想把手机root玩玩 用比较流行的magisk注入然后pacth本系统的boot.img得到新的patched-boot.img 最后刷入手机获取root权限，话不多说开始。&lt;/p&gt;
    
    </summary>
    
    
      <category term="搞机" scheme="http://yoursite.com/categories/%E6%90%9E%E6%9C%BA/"/>
    
    
      <category term="安卓手机解锁" scheme="http://yoursite.com/tags/%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E8%A7%A3%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>打个广告</title>
    <link href="http://yoursite.com/%E6%89%93%E4%B8%AA%E5%B9%BF%E5%91%8A/"/>
    <id>http://yoursite.com/%E6%89%93%E4%B8%AA%E5%B9%BF%E5%91%8A/</id>
    <published>2020-09-02T08:13:32.000Z</published>
    <updated>2025-04-07T09:30:10.829Z</updated>
    
    <content type="html"><![CDATA[<p>有需要Telegram 机器人制作，推特博文抓取推送业务，以及短信推送业务的可以找我。。。<br>价格实惠，开发迅速</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有需要Telegram 机器人制作，推特博文抓取推送业务，以及短信推送业务的可以找我。。。&lt;br&gt;价格实惠，开发迅速&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="广告" scheme="http://yoursite.com/categories/%E5%B9%BF%E5%91%8A/"/>
    
    
  </entry>
  
  <entry>
    <title>H5 多个块元素横向滚动问题</title>
    <link href="http://yoursite.com/H5-%E5%A4%9A%E4%B8%AA%E5%9D%97%E5%85%83%E7%B4%A0%E6%A8%AA%E5%90%91%E6%BB%9A%E5%8A%A8%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/H5-%E5%A4%9A%E4%B8%AA%E5%9D%97%E5%85%83%E7%B4%A0%E6%A8%AA%E5%90%91%E6%BB%9A%E5%8A%A8%E9%97%AE%E9%A2%98/</id>
    <published>2020-08-05T03:31:41.000Z</published>
    <updated>2025-04-07T09:30:10.819Z</updated>
    
    <content type="html"><![CDATA[<p>工作中遇到的H5 需要4个块级元素在一个窗口内横向滚动 如图<img data-src="https://i.loli.net/2020/08/05/vytDzeV9nTL1Apx.png" alt="image.png"><br>刚开始直接使用css代码对窗口元素书写<code>width: 690px;overflow-x: scroll;</code>之后对其中的每个块级元素进行书写，因为块级元素内需要使用flex布局所以写了<code>display:flex</code>，写完调试发现并没有与想象中的横向滑动符合几个块级元素纵向的排列没有在一行内，如图<img data-src="https://i.loli.net/2020/08/05/tG2Hz5LC1TqUAIE.png" alt="image.png">。<a id="more"></a><br>这时想到了使用<code>white-space: nowrap;</code>来使窗口内的元素不换行。但是块级元素内我还想要flex布局，这会导致换行不起作用，这是可以使用<code>display: inline-flex<code>将其变为行内元素进行滚动</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;工作中遇到的H5 需要4个块级元素在一个窗口内横向滚动 如图&lt;img data-src=&quot;https://i.loli.net/2020/08/05/vytDzeV9nTL1Apx.png&quot; alt=&quot;image.png&quot;&gt;&lt;br&gt;刚开始直接使用css代码对窗口元素书写&lt;code&gt;width: 690px;overflow-x: scroll;&lt;/code&gt;之后对其中的每个块级元素进行书写，因为块级元素内需要使用flex布局所以写了&lt;code&gt;display:flex&lt;/code&gt;，写完调试发现并没有与想象中的横向滑动符合几个块级元素纵向的排列没有在一行内，如图&lt;img data-src=&quot;https://i.loli.net/2020/08/05/tG2Hz5LC1TqUAIE.png&quot; alt=&quot;image.png&quot;&gt;。
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/categories/css/"/>
    
    
      <category term="css 问题" scheme="http://yoursite.com/tags/css-%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>诡异的滚动样式问题</title>
    <link href="http://yoursite.com/%E8%AF%A1%E5%BC%82%E7%9A%84%E6%BB%9A%E5%8A%A8%E6%A0%B7%E5%BC%8F%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/%E8%AF%A1%E5%BC%82%E7%9A%84%E6%BB%9A%E5%8A%A8%E6%A0%B7%E5%BC%8F%E9%97%AE%E9%A2%98/</id>
    <published>2020-07-26T09:08:14.000Z</published>
    <updated>2025-04-07T09:30:10.830Z</updated>
    
    <content type="html"><![CDATA[<p>起因：同样的css区域滚动代码，js加载数百条数据在一个区块滚动。安卓下没问题，ios下呈现这样的效果<img data-src="https://i.loli.net/2020/07/26/jgkLNhwH5Z3E7Oa.png" alt="image.png">，也就是数据粘在了一起。</p><p>解决思路: 一开始很懵逼，在mac的Chrome 模拟的iPhone下页面没有任何的问题，但是真机上就是出现了。</p><a id="more"></a><p>刚开始我以为是每条的数据的这个div缺少高度<img data-src="https://i.loli.net/2020/07/26/GyOMB67IcKQZNT4.png" alt="image.png">接着我就补上了高度和line-height,build后发现没有起作用。<br>测试反馈说挤在一起的数据没法滚动，那就是意味这几百条数据一次行全部渲染在该区块下。难道是<code>overflow:scroll</code> 没有起到作用吗？不应该呀！父级的样式已经添加了高度的，按照常理就应该要可以进行正常的渲染以及滚动，左猜右想，难道是因为我的父级里写了<code>display:flex</code>以及一些flex布局的相关代码吗？<img data-src="https://i.loli.net/2020/07/26/UStbo4QZIYXlvwz.png" alt="image.png">)那我就去了试试吧！<img data-src="https://i.loli.net/2020/07/26/mSTcPvYQfq2wWBC.png" alt="image.png"> giao！giao！giao！ <img data-src="https://i.loli.net/2020/07/26/wXYNGZEgj7Tknp4.png" alt="image.png">  就是因为这样</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;起因：同样的css区域滚动代码，js加载数百条数据在一个区块滚动。安卓下没问题，ios下呈现这样的效果&lt;img data-src=&quot;https://i.loli.net/2020/07/26/jgkLNhwH5Z3E7Oa.png&quot; alt=&quot;image.png&quot;&gt;，也就是数据粘在了一起。&lt;/p&gt;
&lt;p&gt;解决思路: 一开始很懵逼，在mac的Chrome 模拟的iPhone下页面没有任何的问题，但是真机上就是出现了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/categories/css/"/>
    
    
      <category term="css 问题" scheme="http://yoursite.com/tags/css-%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>手写实现Promise.all</title>
    <link href="http://yoursite.com/%E6%89%8B%E5%86%99%E5%AE%9E%E7%8E%B0Promise-all/"/>
    <id>http://yoursite.com/%E6%89%8B%E5%86%99%E5%AE%9E%E7%8E%B0Promise-all/</id>
    <published>2020-07-09T07:12:55.000Z</published>
    <updated>2025-04-07T09:30:10.829Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PromiseAll = <span class="function">(<span class="params">array</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> tempValue = [];</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">       <span class="keyword">const</span> next = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            array[i].then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">                i++;</span><br><span class="line">                tempValue.push(res)</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">return</span> i === array.length ? resolve(tempValue):next()</span><br><span class="line">            &#125;).catch(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">                reject(<span class="string">`reject <span class="subst">$&#123;res&#125;</span>`</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        next();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="built_in">Promise</span>.resolve(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="built_in">Promise</span>.resolve(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">let</span> p3 = <span class="built_in">Promise</span>.resolve(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">PromiseAll([p1,p2,p3]).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res) <span class="comment">// [1,2,3]</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p4 = <span class="built_in">Promise</span>.resolve(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">let</span> p5 = <span class="built_in">Promise</span>.resolve(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">let</span> p6 = <span class="built_in">Promise</span>.reject(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">PromiseAll([p4,p5,p6]).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res) <span class="comment">// reject  1</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; PromiseAll = &lt;sp
      
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/categories/js/"/>
    
    
      <category term="Promise" scheme="http://yoursite.com/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title>Hackintosh-K670-G4E6(神舟战神系列 hasse god of war serials)</title>
    <link href="http://yoursite.com/Hackintosh-K670-G4E6-%E7%A5%9E%E8%88%9F%E6%88%98%E7%A5%9E%E7%B3%BB%E5%88%97-hasse-god-of-war-serials/"/>
    <id>http://yoursite.com/Hackintosh-K670-G4E6-%E7%A5%9E%E8%88%9F%E6%88%98%E7%A5%9E%E7%B3%BB%E5%88%97-hasse-god-of-war-serials/</id>
    <published>2020-04-26T06:09:19.000Z</published>
    <updated>2025-04-07T09:30:10.820Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hackintosh-K670D-G4E6"><a href="#Hackintosh-K670D-G4E6" class="headerlink" title="Hackintosh-K670D-G4E6"></a>Hackintosh-K670D-G4E6</h1><p>Hackintosh for Hasse</p><p>EFI下载地址为  <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1Nob3dQZW5aL0hhY2tpbnRvc2gtSzY3MEQtRzRFNg==">Hackintosh-K670D-G4E6<i class="fa fa-external-link-alt"></i></span></p><h3 id="最新提示-wtf-gt-HD-Graphic-610-核显"><a href="#最新提示-wtf-gt-HD-Graphic-610-核显" class="headerlink" title="最新提示 wtf====&gt;HD Graphic 610 核显"></a>最新提示 wtf====&gt;HD Graphic 610 核显</h3><p>Intel Pentium Gold G5420 使用的核显是Intel HD Graphic 610<br>现在基本没有办法驱动这个hd 610 核显，导致电脑特别的卡以及一些观感问题<br>加上这台电脑又是NVIDIA的独显，在macOS 10.13之后的版本已经没有NVIDIA的独显驱动适配了<br>所以我打算将macOS版本降级到10.13.6版本</p><h3 id="我安装的是macOS-版本为10-14-4"><a href="#我安装的是macOS-版本为10-14-4" class="headerlink" title="我安装的是macOS 版本为10.14.4"></a>我安装的是macOS 版本为10.14.4</h3><table><thead><tr><th>配置</th><th></th></tr></thead><tbody><tr><td>CPU</td><td>Intel Pentium Gold G5420  @ 3.80GHz 双核</td></tr><tr><td>GPU</td><td>NVIDIA GeForce GTX 1050 4GB GDDR5</td></tr><tr><td>网卡</td><td>瑞昱RTL8168/8111/8112 Gigabit Ethernet Controller</td></tr><tr><td>硬盘</td><td>镁光256GB/固态硬盘</td></tr><tr><td>内存</td><td>8G DDR4 英睿达 2666MHZ</td></tr></tbody></table><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>将下载好的EFI文件夹替换U盘掉原来的EFI文件夹 </p><p>如果没有制作过u盘可以通过下面提供的工具来制作</p><p>u盘制作工具链接: <span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMThyM3BsSTdCVG5ZQ0c2T1RZMlM1S1E=">https://pan.baidu.com/s/18r3plI7BTnYCG6OTY2S5KQ<i class="fa fa-external-link-alt"></i></span> 提取码: b9ij </p><a id="more"></a><h3 id="制作u盘启动盘方法"><a href="#制作u盘启动盘方法" class="headerlink" title="制作u盘启动盘方法"></a>制作u盘启动盘方法</h3><ol><li><p>制作启动盘<br>插入一个普通的u盘，打开u盘工具.exe(实际是Ether)，用Ether把镜像写入U盘,镜像可以去<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmRhbGlhbnNreS5uZXQvY2F0ZWdvcmllcy8lRTQlQjglOEIlRTglQkQlQkQv">黑果小兵大佬的blog<i class="fa fa-external-link-alt"></i></span>下载想要的macOS版本</p></li><li><p>将efi注入到启动盘<br>打开黑苹果工具.exe 用管理员权限方式打开，看好u盘的盘符在制作u盘盘符那一栏选择好u盘 然后将本次提供的efi文件夹拖进这个软件界面即会自动倒入efi文件等待一段时间会提示制作成功，即可重新拔插下然后打开u盘检阅下文件</p></li></ol><h3 id="启动黑苹果安装"><a href="#启动黑苹果安装" class="headerlink" title="启动黑苹果安装"></a>启动黑苹果安装</h3><p>重启选择有macOS的u盘,然后点击install macOS自动跑代码 然后结束会出现苹果图标和进度条等待一会就会进去macOS实用工具，即完成了初步安装</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hackintosh-K670D-G4E6&quot;&gt;&lt;a href=&quot;#Hackintosh-K670D-G4E6&quot; class=&quot;headerlink&quot; title=&quot;Hackintosh-K670D-G4E6&quot;&gt;&lt;/a&gt;Hackintosh-K670D-G4E6&lt;/h1&gt;&lt;p&gt;Hackintosh for Hasse&lt;/p&gt;
&lt;p&gt;EFI下载地址为  &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9naXRodWIuY29tL1Nob3dQZW5aL0hhY2tpbnRvc2gtSzY3MEQtRzRFNg==&quot;&gt;Hackintosh-K670D-G4E6&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;最新提示-wtf-gt-HD-Graphic-610-核显&quot;&gt;&lt;a href=&quot;#最新提示-wtf-gt-HD-Graphic-610-核显&quot; class=&quot;headerlink&quot; title=&quot;最新提示 wtf====&amp;gt;HD Graphic 610 核显&quot;&gt;&lt;/a&gt;最新提示 wtf====&amp;gt;HD Graphic 610 核显&lt;/h3&gt;&lt;p&gt;Intel Pentium Gold G5420 使用的核显是Intel HD Graphic 610&lt;br&gt;现在基本没有办法驱动这个hd 610 核显，导致电脑特别的卡以及一些观感问题&lt;br&gt;加上这台电脑又是NVIDIA的独显，在macOS 10.13之后的版本已经没有NVIDIA的独显驱动适配了&lt;br&gt;所以我打算将macOS版本降级到10.13.6版本&lt;/p&gt;
&lt;h3 id=&quot;我安装的是macOS-版本为10-14-4&quot;&gt;&lt;a href=&quot;#我安装的是macOS-版本为10-14-4&quot; class=&quot;headerlink&quot; title=&quot;我安装的是macOS 版本为10.14.4&quot;&gt;&lt;/a&gt;我安装的是macOS 版本为10.14.4&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;配置&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;CPU&lt;/td&gt;
&lt;td&gt;Intel Pentium Gold G5420  @ 3.80GHz 双核&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GPU&lt;/td&gt;
&lt;td&gt;NVIDIA GeForce GTX 1050 4GB GDDR5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;网卡&lt;/td&gt;
&lt;td&gt;瑞昱RTL8168/8111/8112 Gigabit Ethernet Controller&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;硬盘&lt;/td&gt;
&lt;td&gt;镁光256GB/固态硬盘&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;内存&lt;/td&gt;
&lt;td&gt;8G DDR4 英睿达 2666MHZ&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&quot;使用方法&quot;&gt;&lt;a href=&quot;#使用方法&quot; class=&quot;headerlink&quot; title=&quot;使用方法&quot;&gt;&lt;/a&gt;使用方法&lt;/h3&gt;&lt;p&gt;将下载好的EFI文件夹替换U盘掉原来的EFI文件夹 &lt;/p&gt;
&lt;p&gt;如果没有制作过u盘可以通过下面提供的工具来制作&lt;/p&gt;
&lt;p&gt;u盘制作工具链接: &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMThyM3BsSTdCVG5ZQ0c2T1RZMlM1S1E=&quot;&gt;https://pan.baidu.com/s/18r3plI7BTnYCG6OTY2S5KQ&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt; 提取码: b9ij &lt;/p&gt;
    
    </summary>
    
    
      <category term="玩" scheme="http://yoursite.com/categories/%E7%8E%A9/"/>
    
    
      <category term="黑苹果(hackintosh)" scheme="http://yoursite.com/tags/%E9%BB%91%E8%8B%B9%E6%9E%9C-hackintosh/"/>
    
  </entry>
  
  <entry>
    <title>Vuepress 尝鲜以及侧边栏小改动</title>
    <link href="http://yoursite.com/Vuepress-%E5%B0%9D%E9%B2%9C%E4%BB%A5%E5%8F%8A%E4%BE%A7%E8%BE%B9%E6%A0%8F%E5%B0%8F%E6%94%B9%E5%8A%A8/"/>
    <id>http://yoursite.com/Vuepress-%E5%B0%9D%E9%B2%9C%E4%BB%A5%E5%8F%8A%E4%BE%A7%E8%BE%B9%E6%A0%8F%E5%B0%8F%E6%94%B9%E5%8A%A8/</id>
    <published>2020-04-18T15:56:31.000Z</published>
    <updated>2025-04-07T09:30:10.821Z</updated>
    
    <content type="html"><![CDATA[<p>今天试了下 VuePress 这个静态网页生成工具<br>制作了一个面试题集(会陆续增加功能，以及习题的增加)<br><img data-src="https://i.loli.net/2020/04/18/ZsvwVYWeJXAa8Mk.png" alt="image.png"></p><a id="more"></a><h3 id="package-json-文件"><a href="#package-json-文件" class="headerlink" title="package.json 文件"></a>package.json 文件</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"interviewExercise"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"doc for interviewExercise"</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"directories"</span>: &#123;</span><br><span class="line">    <span class="attr">"doc"</span>: <span class="string">"docs"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"dev"</span>: <span class="string">"vuepress dev docs"</span>,</span><br><span class="line">    <span class="attr">"deploy"</span>: <span class="string">"bash deploy.sh"</span>,</span><br><span class="line">    <span class="attr">"push"</span>: <span class="string">"bash push.sh"</span>,</span><br><span class="line">    <span class="attr">"docs:build"</span>: <span class="string">"vuepress build docs"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"repository"</span>: &#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"git"</span>,</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"git@github.com:ShowPenZ/interviewExercise.git"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="attr">"bugs"</span>: &#123;</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"https://github.com/ShowPenZ/interviewExercise/issues"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"vuepress"</span>: <span class="string">"^1.0.0-alpha.44"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"gh-pages"</span>: <span class="string">"^2.0.1"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>第一步 构造文件目录</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在项目根目录创建一个 docs 目录</span></span><br><span class="line">mkdir docs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在项目根目录创建一个 javascript 目录</span></span><br><span class="line"><span class="built_in">cd</span> docs</span><br><span class="line"></span><br><span class="line">mkdir javascript</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个 markdown 文件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'# Hello VuePress'</span> &gt; docs/README.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始编写文档</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>再在 docs 目录下创建一个.vuepress 文件夹<br>以及在.vuepress 文件夹下添加 config.js 配置</p><p>文件目录结构如下<br><img data-src="https://i.loli.net/2020/04/19/NaFK53mMQjgHqRw.png" alt="image.png"></p><p>config.js 简单配置如下</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 第一种</span></span><br><span class="line">  <span class="comment">// 因为我是发布到 https://showpenz.github.io/InterviewExercise</span></span><br><span class="line">  <span class="comment">// 所以将 .vuepress/config.js 中的 base 设置为你的仓库名称。</span></span><br><span class="line">  <span class="comment">// 例如，如果你的仓库是 https://github.com/showpenz/InterviewExercise ，</span></span><br><span class="line">  <span class="comment">// 则已部署的页面将在 https://showpenz.github.io/InterviewExercise 上可用。</span></span><br><span class="line">  <span class="comment">// 在这种情况下，你应该将base设置为 "/InterviewExercise/" 。</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 第二种</span></span><br><span class="line">  <span class="comment">// 如果发布到 https://showpenz.github.io</span></span><br><span class="line">  <span class="comment">// 例如，如果你的仓库是 https://github.com/showpenz/ ，</span></span><br><span class="line">  <span class="comment">// 则已部署的页面将在 https://showpenz.github.io/ 上可用。</span></span><br><span class="line">  <span class="comment">// 在这种情况下，你应该将base设置为 "/" 。</span></span><br><span class="line"></span><br><span class="line">  base: <span class="string">"/interviewExercise"</span>,</span><br><span class="line">  dest: <span class="string">"dist"</span>,</span><br><span class="line"></span><br><span class="line">  description: <span class="string">"面试题"</span>,</span><br><span class="line">  locales: &#123;</span><br><span class="line">    <span class="comment">// 键名是该语言所属的子路径</span></span><br><span class="line">    <span class="comment">// 作为特例，默认语言可以使用 '/' 作为其路径。</span></span><br><span class="line">    <span class="string">"/"</span>: &#123;</span><br><span class="line">      lang: <span class="string">"en-US"</span>, <span class="comment">// 将会被设置为 &lt;html&gt; 的 lang 属性</span></span><br><span class="line">      title: <span class="string">"InterviewExercise"</span>,</span><br><span class="line">      description: <span class="string">"Vue-powered Static Site Generator"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"/zh/"</span>: &#123;</span><br><span class="line">      lang: <span class="string">"zh-CN"</span>,</span><br><span class="line">      title: <span class="string">"练习题"</span>,</span><br><span class="line">      description: <span class="string">"Vue 驱动的静态网站生成器"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  themeConfig: &#123;</span><br><span class="line">    editLinks: <span class="literal">false</span>,</span><br><span class="line">    docsDir: <span class="string">"docs"</span>,</span><br><span class="line">    nav: [],</span><br><span class="line">    locales: &#123;</span><br><span class="line">      <span class="string">"/"</span>: &#123;</span><br><span class="line">        selectText: <span class="string">"选择语言"</span>,</span><br><span class="line">        label: <span class="string">"English"</span>,</span><br><span class="line">        ariaLabel: <span class="string">"Languages"</span>,</span><br><span class="line">        editLinkText: <span class="string">"Edit this page on GitHub"</span>,</span><br><span class="line">        <span class="comment">// nav: [&#123; text: "Nested", link: "/nested/", ariaLabel: "Nested" &#125;],</span></span><br><span class="line">        sidebar: &#123;</span><br><span class="line">          <span class="string">"/"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              title: <span class="string">"Javascript"</span>, <span class="comment">//侧边栏主标题</span></span><br><span class="line">              children: [</span><br><span class="line">                &#123;</span><br><span class="line">                  title: <span class="string">"DataStructureTransformation"</span>, <span class="comment">// 侧边栏二级标题</span></span><br><span class="line">                  children: [</span><br><span class="line">                    [<span class="string">"javascript/DataStructureTransformation/1"</span>, <span class="string">"question 1"</span>], <span class="comment">// 数组第0项是需要显示的md文件的文件夹的文件路径  第1项是侧边栏的三级标题</span></span><br><span class="line">                  ],</span><br><span class="line">                &#125;,</span><br><span class="line">              ],</span><br><span class="line">            &#125;,</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"/zh/"</span>: &#123;</span><br><span class="line">        <span class="comment">// 多语言下拉菜单的标题</span></span><br><span class="line">        selectText: <span class="string">"Languages"</span>,</span><br><span class="line">        <span class="comment">// 该语言在下拉菜单中的标签</span></span><br><span class="line">        label: <span class="string">"简体中文"</span>,</span><br><span class="line">        <span class="comment">// 编辑链接文字</span></span><br><span class="line">        editLinkText: <span class="string">"在 GitHub 上编辑此页"</span>,</span><br><span class="line">        <span class="comment">// Service Worker 的配置</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当前 locale 的 algolia docsearch 选项</span></span><br><span class="line">        <span class="comment">// nav: [&#123; text: "嵌套", link: "/zh/nested/" &#125;],</span></span><br><span class="line">        sidebar: &#123;</span><br><span class="line">          <span class="string">"/zh/"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              title: <span class="string">"Javascript"</span>,</span><br><span class="line">              children: [</span><br><span class="line">                &#123;</span><br><span class="line">                  title: <span class="string">"数据结构转换"</span>,</span><br><span class="line">                  children: [</span><br><span class="line">                    [<span class="string">"/zh/javascript/DataStructureTransformation/1"</span>, <span class="string">"第1题"</span>],</span><br><span class="line">                  ],</span><br><span class="line">                &#125;,</span><br><span class="line">              ],</span><br><span class="line">            &#125;,</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li>书写完毕配配置部署到 github 的 git-page</li></ol><p><font color='red'>默认提前在 github 开好新的项目，打开 gitpage 并与当前项目建立好关系</font></p><p>首先在根目录编写 deploy.bash(windows 系统需进行一些处理)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 确保脚本抛出遇到的错误</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成静态文件</span></span><br><span class="line">npm run docs:build</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入生成的文件夹</span></span><br><span class="line"><span class="built_in">cd</span> docs/.vuepress/dist</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果是发布到自定义域名</span></span><br><span class="line"></span><br><span class="line">git init</span><br><span class="line">git add -A</span><br><span class="line">git commit -m <span class="string">'deploy'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果发布到 https://&lt;USERNAME&gt;.github.io</span></span><br><span class="line"><span class="comment"># git push -f git@github.com:showpenz/showpenz.github.io.git master</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果发布到 https://&lt;USERNAME&gt;.github.io/&lt;REPO&gt;</span></span><br><span class="line"><span class="comment"># 把下面的地址换成你的</span></span><br><span class="line"><span class="comment"># git push -f git@github.com:showpenz/interviewExercise.git master:gh-pages</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> -</span><br></pre></td></tr></table></figure><p>然后在根目录执行 npm run deploy.bash 便会自动 build 好并打包在.vuepress 下生成 dist 文件夹，然后自动 push 到 git-pages 分支</p><ol start="3"><li>因为我不是全局安装 vuepress 工具 所以好多文件没有自动配置以及生成这里介绍一个我遇到的问题</li></ol><p>根据上面那种简单配置的 config.js 往下走 会导致你新增一个 md 文件就要手动去 config.js 里面增加 sidebar 因为我做的是三级的侧边栏所以好像自动生成侧边栏的功能没法用，我想以后不论增加文件夹还是文件都能自动关联到侧边栏，所以，没关系咱们手写一个。。。</p><p>首先啥也别说 先建一个工具类的文件夹 utils,新增 fileHelper.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fileHelper = &#123;</span><br><span class="line">  getFileName: <span class="function"><span class="keyword">function</span> (<span class="params">rootPath, filePath</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> fileTypes = <span class="regexp">/\.md$/</span>; <span class="comment">//只匹配以md结尾的文件</span></span><br><span class="line">    <span class="keyword">let</span> fileNames = [];</span><br><span class="line"></span><br><span class="line">    fs.readdirSync(rootPath + filePath).forEach(<span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> tempFilePath = <span class="string">""</span>;</span><br><span class="line">      <span class="keyword">let</span> generateArr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"></span><br><span class="line">      fullPath = rootPath + filePath + <span class="string">"/"</span> + file;</span><br><span class="line">      <span class="comment">//异步获取文件状态</span></span><br><span class="line">      <span class="keyword">let</span> fileInfo = fs.statSync(fullPath);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (fileInfo.isFile() &amp;&amp; fileTypes.test(file) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//剔除README.md</span></span><br><span class="line">        <span class="keyword">if</span> (file !== <span class="string">"README.md"</span>) &#123;</span><br><span class="line">          file = file.replace(<span class="string">".md"</span>, <span class="string">""</span>);</span><br><span class="line">          tempFilePath = filePath + <span class="string">"/"</span> + file;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        generateArr.push(tempFilePath, file);</span><br><span class="line">        fileNames.push(generateArr); <span class="comment">// 构造二维数组</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    fileNames.sort(); <span class="comment">// 排序</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fileNames;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = fileHelper;</span><br></pre></td></tr></table></figure><p>再在 utils 下新增一个 help.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fileHelper = <span class="built_in">require</span>(<span class="string">"./fileHelper"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isString = <span class="built_in">Object</span>.prototype.toString;</span><br><span class="line"><span class="keyword">const</span> isArray = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> isString.call(arr) === <span class="string">"[object Array]"</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isObject = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> isString.call(arr) === <span class="string">"[object Object]"</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> helper = &#123;</span><br><span class="line">  genSidebar: <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    title,</span></span></span><br><span class="line"><span class="function"><span class="params">    children = [],</span></span></span><br><span class="line"><span class="function"><span class="params">    collapsable = true,</span></span></span><br><span class="line"><span class="function"><span class="params">    sidebarDepth = <span class="number">1</span></span></span></span><br><span class="line"><span class="function"><span class="params">  </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">    <span class="keyword">let</span> genData = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (children &amp;&amp; isArray(children[<span class="number">0</span>]) &amp;&amp; isObject(children[<span class="number">0</span>][<span class="number">0</span>])) &#123;</span><br><span class="line">      <span class="keyword">let</span> tempArr = [];</span><br><span class="line"></span><br><span class="line">      children.map(<span class="function">(<span class="params">d</span>) =&gt;</span> &#123;</span><br><span class="line">        tempArr.push(d[<span class="number">0</span>]);</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      genData = tempArr;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      genData = children;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    arr.push(&#123;</span><br><span class="line">      title,</span><br><span class="line">      children: genData,</span><br><span class="line">      collapsable,</span><br><span class="line">      sidebarDepth,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;,</span><br><span class="line">  generateArr: <span class="function"><span class="keyword">function</span> (<span class="params">arr, rootpath</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">let</span> tempArr = [];</span><br><span class="line"></span><br><span class="line">    arr.map(<span class="function">(<span class="params">d, i</span>) =&gt;</span> &#123;</span><br><span class="line">      tempArr.push(</span><br><span class="line">        that.genSidebar(</span><br><span class="line">          d.title,</span><br><span class="line">          fileHelper.getFileName(rootpath, d.path),</span><br><span class="line">          d.collapsable,</span><br><span class="line">          d.sidebarDepth || <span class="number">1</span></span><br><span class="line">        )</span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tempArr;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = helper;</span><br></pre></td></tr></table></figure><p>再在 docs 文件夹下新增一个 fileData 文件夹以及在 fileData 内创建 sidebarData.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构建这样的数据类型</span></span><br><span class="line"><span class="keyword">const</span> sidebarData = &#123;</span><br><span class="line">  enFileData: [</span><br><span class="line">    &#123;</span><br><span class="line">      title: <span class="string">"DataStructureTransformation"</span>,</span><br><span class="line">      path: <span class="string">"/en/javascript/DataStructureTransformation"</span>,</span><br><span class="line">      collapsable: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      title: <span class="string">"eventHandler"</span>,</span><br><span class="line">      path: <span class="string">"/en/javascript/eventHandler"</span>,</span><br><span class="line">      collapsable: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      title: <span class="string">"basic"</span>,</span><br><span class="line">      path: <span class="string">"/en/javascript/basic"</span>,</span><br><span class="line">      collapsable: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      title: <span class="string">"dataProcessing"</span>,</span><br><span class="line">      path: <span class="string">"/en/javascript/dataProcessing"</span>,</span><br><span class="line">      collapsable: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  zhFileData: [</span><br><span class="line">    &#123;</span><br><span class="line">      title: <span class="string">"数据结构转换"</span>,</span><br><span class="line">      path: <span class="string">"/javascript/DataStructureTransformation"</span>,</span><br><span class="line">      collapsable: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      title: <span class="string">"事件处理相关"</span>,</span><br><span class="line">      path: <span class="string">"/javascript/eventHandler"</span>,</span><br><span class="line">      collapsable: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      title: <span class="string">"基础类"</span>,</span><br><span class="line">      path: <span class="string">"/javascript/basic"</span>,</span><br><span class="line">      collapsable: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      title: <span class="string">"数据处理"</span>,</span><br><span class="line">      path: <span class="string">"/javascript/dataProcessing"</span>,</span><br><span class="line">      collapsable: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = sidebarData;</span><br></pre></td></tr></table></figure><p>最后修改 config.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="keyword">const</span> rootpath = path.dirname(__dirname); <span class="comment">//执行一次dirname将目录定位到docs目录</span></span><br><span class="line"><span class="comment">// const util = require("util");</span></span><br><span class="line"><span class="keyword">const</span> sideBarData = <span class="built_in">require</span>(<span class="string">"./fileData/sideBarData"</span>);</span><br><span class="line"><span class="keyword">const</span> helper = <span class="built_in">require</span>(<span class="string">"./utils/helper"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> en = helper.genSidebar(</span><br><span class="line">  <span class="string">"Javascript"</span>,</span><br><span class="line">  helper.generateArr(sideBarData.enFileData, rootpath),</span><br><span class="line">  <span class="literal">true</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> zh = helper.genSidebar(</span><br><span class="line">  <span class="string">"Javascript"</span>,</span><br><span class="line">  helper.generateArr(sideBarData.zhFileData, rootpath),</span><br><span class="line">  <span class="literal">true</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(util.inspect(en, &#123; showHidden: false, depth: null, colors: true &#125;)); // alternative shortcutconsole.log(util.inspect(myObject, false, null, true /* enable colors */))</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  base: <span class="string">"/interviewExercise/"</span>,</span><br><span class="line">  dest: <span class="string">"docs/.vuepress/dist"</span>,</span><br><span class="line"></span><br><span class="line">  description: <span class="string">"面试题"</span>,</span><br><span class="line">  locales: &#123;</span><br><span class="line">    <span class="comment">// 键名是该语言所属的子路径</span></span><br><span class="line">    <span class="comment">// 作为特例，默认语言可以使用 '/' 作为其路径。</span></span><br><span class="line">    <span class="comment">// "/": &#123;</span></span><br><span class="line">    <span class="comment">//   lang: "en-US", // 将会被设置为 &lt;html&gt; 的 lang 属性</span></span><br><span class="line">    <span class="comment">//   title: "InterviewExercise",</span></span><br><span class="line">    <span class="comment">//   description: "Vue-powered Static Site Generator",</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"/en/"</span>: &#123;</span><br><span class="line">      lang: <span class="string">"en-US"</span>, <span class="comment">// 将会被设置为 &lt;html&gt; 的 lang 属性</span></span><br><span class="line">      title: <span class="string">"InterviewExercise"</span>,</span><br><span class="line">      description: <span class="string">"Vue-powered Static Site Generator"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"/"</span>: &#123;</span><br><span class="line">      lang: <span class="string">"zh-CN"</span>,</span><br><span class="line">      title: <span class="string">"练习题"</span>,</span><br><span class="line">      description: <span class="string">"Vue 驱动的静态网站生成器"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  themeConfig: &#123;</span><br><span class="line">    editLinks: <span class="literal">false</span>,</span><br><span class="line">    docsDir: <span class="string">"docs"</span>,</span><br><span class="line">    nav: [],</span><br><span class="line">    locales: &#123;</span><br><span class="line">      <span class="string">"/en/"</span>: &#123;</span><br><span class="line">        selectText: <span class="string">"选择语言"</span>,</span><br><span class="line">        label: <span class="string">"English"</span>,</span><br><span class="line">        ariaLabel: <span class="string">"Languages"</span>,</span><br><span class="line">        editLinkText: <span class="string">"Edit this page on GitHub"</span>,</span><br><span class="line">        <span class="comment">// nav: [&#123; text: "Nested", link: "/nested/", ariaLabel: "Nested" &#125;],</span></span><br><span class="line">        sidebar: &#123;</span><br><span class="line">          <span class="string">"/en/"</span>: en,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"/"</span>: &#123;</span><br><span class="line">        <span class="comment">// 多语言下拉菜单的标题</span></span><br><span class="line">        selectText: <span class="string">"Languages"</span>,</span><br><span class="line">        <span class="comment">// 该语言在下拉菜单中的标签</span></span><br><span class="line">        label: <span class="string">"简体中文"</span>,</span><br><span class="line">        <span class="comment">// 编辑链接文字</span></span><br><span class="line">        editLinkText: <span class="string">"在 GitHub 上编辑此页"</span>,</span><br><span class="line">        <span class="comment">// Service Worker 的配置</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当前 locale 的 algolia docsearch 选项</span></span><br><span class="line">        <span class="comment">// nav: [&#123; text: "嵌套", link: "/zh/nested/" &#125;],</span></span><br><span class="line">        sidebar: &#123;</span><br><span class="line">          <span class="string">"/"</span>: zh,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这样通过</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> en = helper.genSidebar(</span><br><span class="line">  <span class="string">"Javascript"</span>,</span><br><span class="line">  helper.generateArr(sideBarData.enFileData, rootpath),</span><br><span class="line">  <span class="literal">true</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> zh = helper.genSidebar(</span><br><span class="line">  <span class="string">"Javascript"</span>,</span><br><span class="line">  helper.generateArr(sideBarData.zhFileData, rootpath),</span><br><span class="line">  <span class="literal">true</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>就能不用再手动目录了，新增一个文件夹就可以去 sidebarData.js 内新增侧边栏标题和文件路径就行了</p><p>以上就是暂时对 vuepress 的浅浅尝试</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天试了下 VuePress 这个静态网页生成工具&lt;br&gt;制作了一个面试题集(会陆续增加功能，以及习题的增加)&lt;br&gt;&lt;img data-src=&quot;https://i.loli.net/2020/04/18/ZsvwVYWeJXAa8Mk.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="静态博客" scheme="http://yoursite.com/categories/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
      <category term="Vuepress" scheme="http://yoursite.com/tags/Vuepress/"/>
    
  </entry>
  
  <entry>
    <title>前端代理解决跨越问题</title>
    <link href="http://yoursite.com/%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%90%86%E8%A7%A3%E5%86%B3%E8%B7%A8%E8%B6%8A%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%90%86%E8%A7%A3%E5%86%B3%E8%B7%A8%E8%B6%8A%E9%97%AE%E9%A2%98/</id>
    <published>2020-03-26T09:45:49.000Z</published>
    <updated>2025-04-07T09:30:10.827Z</updated>
    
    <content type="html"><![CDATA[<p>在我的许多实际工程中，我并没有使用什么所谓前端代理去解决跨域问题，都是让运维大佬给我在配置里增加一下我的本机 ip。</p><p>今天乘着结束一个小项目的时候把玩下前端代理</p><ol><li><p>首先我是用的技术栈是 react+antd+dva+umi,其中 umi 已经使用了 webpack-dev-server 插件 所以可以直接进行配置。<br>如果你用的也是 umijs 这个 react 应用框架 可以直接使用如下配置</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">proxy: &#123;</span><br><span class="line">    <span class="string">'/u/v1/'</span>: &#123;</span><br><span class="line">      target: <span class="string">'https://demo.xxx.com/'</span>,</span><br><span class="line">      changeOrigin: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// pathRewrite: &#123; '^/u/v1/': '' &#125;,</span></span><br><span class="line">      secure: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'/f/v1/'</span>: &#123;</span><br><span class="line">      target: <span class="string">'https://demo.xxx.com/'</span>,</span><br><span class="line">      changeOrigin: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// pathRewrite: &#123; '^/u/v1/': '' &#125;,</span></span><br><span class="line">      secure: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// /u/v1/ 用作匹配API地址 例如你要请求的API地址 是https://demo.xxx.com/u/v1/getUserInfo 含有/u/v1/这个字符串</span></span><br><span class="line">  <span class="comment">// 就会在发起请求时,将请求代理到本机地址====&gt;https://localHost:8080/u/v1/getUserInfo</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// target 代理的API地址，就是需要跨域的API地址。</span></span><br><span class="line"> <span class="comment">// 地址可以是域名,如：https://demo.xxx.com/</span></span><br><span class="line"> <span class="comment">// 也可以是IP地址：http://127.0.0.1:3000</span></span><br><span class="line"> <span class="comment">// 如果是域名需要额外添加一个参数changeOrigin: true，否则会代理失败。</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//changeOrigin: true, 这个参数可以让target参数是域名。</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// secure: false,不检查安全问题。</span></span><br><span class="line"> <span class="comment">// 设置后，可以接受运行在 HTTPS 上，可以使用无效证书的后端服务器</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// API地址 为https://demo.xxx.com/u/v1/getUserInfo</span></span><br><span class="line"> <span class="comment">// 设置pathRewrite: &#123;'^/u/v1/' : ''&#125;,后，</span></span><br><span class="line"> <span class="comment">// 最终本地代理访问的路径：https://localHost:8080/getUserInfo，</span></span><br><span class="line"> <span class="comment">// 这个参数的目的是给代理命名后，在访问时把命名删除掉。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> 这个在config.js或者umirc.js 中配置好后即可快速检验下</span><br><span class="line"></span><br><span class="line"> 之后将api地址例如 BASE_HOST:http:<span class="comment">//192.168.2.240 改为 BASE_HOST:''</span></span><br><span class="line"></span><br><span class="line"> 默认你引入了各种请求工具 如axios fetch之类的</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设 我的想跨域的地址为 https://demo.xxx.com/u/v1/getUserInfo</span></span><br><span class="line"><span class="comment">// 只需填入/u/v1/getUserInfo</span></span><br><span class="line"></span><br><span class="line"> axios(&#123;</span><br><span class="line">  method: <span class="string">'get'</span>,</span><br><span class="line">  url: <span class="string">'/u/v1/getUserInfo'</span>, <span class="comment">//填入你想跨域的api地址</span></span><br><span class="line"> &#125;).then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure></li><li><p>没有使用 umi 也是一样的<br>首先确保<br>(1)、需要使用插件：webpack-dev-server。<br>(2)、webpack-dev-server 使用的是 http-proxy-middleware 来实现跨域代理的。<br>(3). webpack 版本 &gt;= 3.0</p></li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="string">"/u/v1/"</span>: &#123;</span><br><span class="line">        target: <span class="string">"https://demo.xxx.com/"</span>,</span><br><span class="line">        changeOrigin: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// pathRewrite: &#123; '^/u/v1/': '' &#125;,</span></span><br><span class="line">        secure: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"/f/v1/"</span>: &#123;</span><br><span class="line">        target: <span class="string">"https://demo.xxx.com/"</span>,</span><br><span class="line">        changeOrigin: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// pathRewrite: &#123; '^/u/v1/': '' &#125;,</span></span><br><span class="line">        secure: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 还有需要匹配的就继续写...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在我的许多实际工程中，我并没有使用什么所谓前端代理去解决跨域问题，都是让运维大佬给我在配置里增加一下我的本机 ip。&lt;/p&gt;
&lt;p&gt;今天乘着结束一个小项目的时候把玩下前端代理&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;首先我是用的技术栈是 react+antd+dva+umi,其中 umi 已经使用了 webpack-dev-server 插件 所以可以直接进行配置。&lt;br&gt;如果你用的也是 umijs 这个 react 应用框架 可以直接使用如下配置&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="proxy" scheme="http://yoursite.com/tags/proxy/"/>
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
      <category term="umi" scheme="http://yoursite.com/tags/umi/"/>
    
  </entry>
  
  <entry>
    <title>react componentDidMount 使用的一些想法</title>
    <link href="http://yoursite.com/react-componentDidMount-%E4%BD%BF%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E6%83%B3%E6%B3%95/"/>
    <id>http://yoursite.com/react-componentDidMount-%E4%BD%BF%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E6%83%B3%E6%B3%95/</id>
    <published>2020-03-25T09:42:48.000Z</published>
    <updated>2025-04-07T09:30:10.823Z</updated>
    
    <content type="html"><![CDATA[<p>React componentDidMount 中尽量别使用 setState 方法</p><p>在 componentDidMount()中，你可以立即调用 setState()。它将会触发一次额外的渲染，但是它将在浏览器刷新屏幕之前发生。这保证了在此情况下即使 render()将会调用两次，用户也不会看到中间状态。谨慎使用这一模式，因为它常导致性能问题。在大多数情况下，你可以 在 constructor()中使用赋值初始状态来代替。然而，有些情况下必须这样，比如像模态框和工具提示框。这时，你需要先测量这些 DOM 节点，才能渲染依赖尺寸或者位置的某些东西。</p><p>componentDidMount 本身处于一次更新中，我们又调用了一次 setState，就会在未来再进行一次 render，造成不必要的性能浪费，大多数情况可以设置初始值来搞定。当然在componentDidMount我们可以调用接口，再回调中去修改state。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;React componentDidMount 中尽量别使用 setState 方法&lt;/p&gt;
&lt;p&gt;在 componentDidMount()中，你可以立即调用 setState()。它将会触发一次额外的渲染，但是它将在浏览器刷新屏幕之前发生。这保证了在此情况下即使 ren
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="代码优化" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>js 浮点数运算--使用decimal.js</title>
    <link href="http://yoursite.com/js-%E6%B5%AE%E7%82%B9%E6%95%B0%E8%BF%90%E7%AE%97-%E4%BD%BF%E7%94%A8decimal-js/"/>
    <id>http://yoursite.com/js-%E6%B5%AE%E7%82%B9%E6%95%B0%E8%BF%90%E7%AE%97-%E4%BD%BF%E7%94%A8decimal-js/</id>
    <published>2020-03-24T03:21:19.000Z</published>
    <updated>2025-04-07T09:30:10.822Z</updated>
    
    <content type="html"><![CDATA[<p>为了避免 js 运算出现如<img data-src="https://i.loli.net/2020/04/26/lRPemr91E6FIvqW.png" alt="image.png"> 这种情况<br>推荐使用 decimal.js 这个库来帮助我们处理精度问题</p><p>1.首先引入<br>(1). 标签引入方式 <code>&lt;script src="<span class="exturl" data-url="aHR0cHM6Ly9jZG4uYm9vdGNzcy5jb20vZGVjaW1hbC5qcy8xMC4yLjAvZGVjaW1hbC5qcyZxdW90OyZndDs=">https://cdn.bootcss.com/decimal.js/10.2.0/decimal.js&quot;&gt;<i class="fa fa-external-link-alt"></i></span></script></code><br>(2). <code>npm intall decimal.js or yarn add decimal.js</code></p><p>2.使用方式</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//例如 加法</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">0.1</span>,</span><br><span class="line">  b = <span class="number">0.2</span>;</span><br><span class="line"><span class="keyword">let</span> c;</span><br><span class="line"></span><br><span class="line">c = <span class="keyword">new</span> Decimal(a).add(<span class="keyword">new</span> Decimal(b)).toNumber(); <span class="comment">// 0.3</span></span><br></pre></td></tr></table></figure><p><img data-src="https://i.loli.net/2020/03/24/7nASorUbHaiI1NO.png" alt="image.png"></p><p>3.简易封装</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">"lodash"</span>; <span class="comment">// const _ = require("lodash");</span></span><br><span class="line"><span class="keyword">import</span> Decimal <span class="keyword">from</span> <span class="string">"decimal.js"</span>; <span class="comment">// const _ = require("lodash");</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> BLANK_CHAR = <span class="string">"-"</span>;</span><br><span class="line"><span class="keyword">const</span> isBlankChar = <span class="function"><span class="params">value</span> =&gt;</span> value === BLANK_CHAR;</span><br><span class="line"><span class="keyword">const</span> isNumericString = <span class="function"><span class="params">value</span> =&gt;</span></span><br><span class="line">  /^[-+]?([<span class="number">0</span><span class="number">-9</span>]+(\.[<span class="number">0</span><span class="number">-9</span>]*)?|\.[<span class="number">0</span><span class="number">-9</span>]+)([eE][-+]?[<span class="number">0</span><span class="number">-9</span>]+)?$/.test(value);</span><br><span class="line"><span class="keyword">const</span> isNumericValue = <span class="function"><span class="params">value</span> =&gt;</span></span><br><span class="line">  (hasString(value) &amp;&amp; isNumericString(value)) || hasNumber(value);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串判断</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasString</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> _.isString(value) &amp;&amp; !_.isEmpty(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数字判断</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasNumber</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> _.isNumber(value) &amp;&amp; _.isFinite(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNumberValue</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (isBlankChar(value)) &#123;</span><br><span class="line">    <span class="keyword">return</span> BLANK_CHAR;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> isNumericValue(value) ? value : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 科里化处理参数传递</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateOperationFnUseDecimalJs</span>(<span class="params">op</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isBlankChar(x) || isBlankChar(y)) &#123;</span><br><span class="line">      <span class="keyword">return</span> BLANK_CHAR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (op === <span class="string">"div"</span> &amp;&amp; getNumberValue(y) === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> isNumericValue(x) &amp;&amp; isNumericValue(y)</span><br><span class="line">      ? <span class="keyword">new</span> Decimal(x)[op](<span class="keyword">new</span> Decimal(y)).toFixed()</span><br><span class="line">      : <span class="number">0</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> DecimalPlus = generateOperationFnUseDecimalJs(<span class="string">"plus"</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> DecimalMinus = generateOperationFnUseDecimalJs(<span class="string">"minus"</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> DecimalMultiply = generateOperationFnUseDecimalJs(<span class="string">"times"</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> DecimalDivide = generateOperationFnUseDecimalJs(<span class="string">"div"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用方法</span></span><br><span class="line">DecimalPlus(<span class="number">0.1</span>, <span class="number">0.2</span>); <span class="comment">//加法 0.3</span></span><br><span class="line">DecimalMinus(<span class="number">0.2</span>, <span class="number">0.1</span>); <span class="comment">//减法 0.1</span></span><br><span class="line">DecimalMultiply(<span class="number">0.1</span>, <span class="number">0.3</span>); <span class="comment">//乘法 0.03</span></span><br><span class="line">DecimalDivide(<span class="number">0.3</span>, <span class="number">0.1</span>); <span class="comment">//除法 3</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了避免 js 运算出现如&lt;img data-src=&quot;https://i.loli.net/2020/04/26/lRPemr91E6FIvqW.png&quot; alt=&quot;image.png&quot;&gt; 这种情况&lt;br&gt;推荐使用 decimal.js 这个库来帮助我们处理精度问题&lt;/p&gt;
&lt;p&gt;1.首先引入&lt;br&gt;(1). 标签引入方式 &lt;code&gt;&amp;lt;script src=&quot;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9jZG4uYm9vdGNzcy5jb20vZGVjaW1hbC5qcy8xMC4yLjAvZGVjaW1hbC5qcyZxdW90OyZndDs=&quot;&gt;https://cdn.bootcss.com/decimal.js/10.2.0/decimal.js&amp;quot;&amp;gt;&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/script&gt;&lt;/code&gt;&lt;br&gt;(2). &lt;code&gt;npm intall decimal.js or yarn add decimal.js&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;2.使用方式&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/categories/js/"/>
    
    
      <category term="js精度处理" scheme="http://yoursite.com/tags/js%E7%B2%BE%E5%BA%A6%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>区块链价值</title>
    <link href="http://yoursite.com/%E5%8C%BA%E5%9D%97%E9%93%BE%E4%BB%B7%E5%80%BC/"/>
    <id>http://yoursite.com/%E5%8C%BA%E5%9D%97%E9%93%BE%E4%BB%B7%E5%80%BC/</id>
    <published>2020-01-17T10:01:05.000Z</published>
    <updated>2025-04-07T09:30:10.827Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p><font color=red>区块链是信任的机器，也是一个价值互联网</font></p><br><p>区块链用一套数学算法确保了两个陌生人不借助于第三方的情况下，把一笔交易，不管是金融的交易或者是商品的交易完成。这就是区块链最核心，最本质的东西。</p><br></li><li><p><font color=red>从三个层次了解区块链</font></p><br><ol><li><p>第一个层次，区块链最底层的一个层次，实际上是分布式网络，区块链是架构在分布式网络技术之上的一个应用。</p><br></li><li><p>第二个层次，在分布式网络基础上，如果我们给它加上一层东西，加一层密码学的账本体系，这个分布式网络就变成了分布式账本</p><br></li><li><p>第三个层次，公有区块链或者叫比特币区块链</p><a id="more"></a><br></li></ol></li><li><p><font color=red>从技术发展来看区块链</font></p><br><ol><li>区块链 1.0 即 2009 年一月份上线的比特币区块链。它最主要的，最核心的贡献就是建立了一套密码学的账本，提供了一套新的记账方法，但它有个欠缺，没有人可以在比特币区块链上修改任何规则，你只能用它</li><li>区块链 2.0 即 2015 年有一个新的公有区块链，叫以太坊，与区块链 1.0 最大的不同就是别人可以在以太坊区块链的基础上做其他的应用开发，也就是你可以用它作为底层做你的事情</li><li>区块链 3.0 2018 年开始进入区块链 3.0 但没有其他技术上大的突破。3.0 要解决的就是在性能上能支持大规模的商业应用<br></li></ol></li><li><p><font color=red>从商业角度看待区块链</font></p><br><p>有人说区块链是真正的共享经济，因为它没有股东和你分利润，任何一个人加入这个网络，就可以得到相应的那份价值，均分给所有的使用者，这才是真正的共享经济。</p><br><p>比特币区块链是一个分布式商业的最伟大的实验，所有的产权是开源的，所有的组织机构都是非盈利的，没有股东，没有董事会，没有管理层，什么都没有但它运行了十年时间，每秒都在发生着交易，汇兑，支付，没有出现过坏账，系统没有出现过宕机，任何中心化的系统，即使是金融系统，每年一定会出现系统宕机</p><br></li><li><p><font color=red>迄今为止，我们所建立的合作原则，大致来讲，逃不出过去轴心文明的思想范畴。</font></p><br><p>区块链的伟大意义就在这里，在没有区块链之前，不管我们用互联网做多少创新，我们发现它的思想底座并没有超越。所以我们今天的行业规则，社会伦理，以及政治法则，并没有超越 2500 年前的先哲。</p><br><p>区块链要在这个意义上，让世界重新启动。要重新理解合作，重新把合作建立在一个坚实的技术驱动之上，这是一个非常伟大的创新，需要非常伟大的勇气。</p><br></li><li><p><font color=red>区块链就是真正改变信任的机制，区块链打的就是这样一个巨大无比的赌：陌生人在互联网上能不能一次就达成信任？</font></p><br><p>在火车站模式下如何保证陌生人一次就建立信任？这不是要通过道德说教，而是通过漫长的塑造才有可能达成。今天区块链让我们已经及其接近这个社会底层的构造，陌生人的一次信任，就如同乌托邦。</p><br><p>在这种情形下，区块链正在让这个乌托邦建立在非常坚实的基础上。更重要的一点是：区块链把财富生产和财富分配平衡地放在了一个巨大账本之中。这个巨大的账本对所有参与区块链的人，是公开透明的，同时又是加密保护隐私的。所以财富的生产和分配，同时进行，这是它的伟大意义。</p><br></li><li><p><font color=red>互联网的长项恰恰也是它的弱项，因为信息的传播不需要代价，篡改数据非常容易</font></p><br><p>当进入价值互联网时，区块链可能会形成这样一个底层的技术：一方面它保证了想互联网一样在全球范围内高速度的传播，另一方面又杜绝了拷贝，粘贴问题，所以区块链会成为价值互联网的基础。</p><br></li><li><p><font color=red>区块链三问难题</font></p><br><p>第一，去中心化。区块链系统本省是一个去中心化的，去中心化就是希望参与到网络空间的参与者或者系统构建者，不光是用户，而是构建这个系统的人，节点尽可能的分散，这是去中心化特征。</p><br><p>第二，它的性能，性能通常的衡量标准是每秒完成的交易数；</p><br><p>第三，安全，区块链是一种相对安全的系统，这个安全怎么定义？就是以节点为单位，抵御更多攻击者。</p><br><p>去中心化，性能和安全构成一个三角形，这个三角形是相互制约的</p><br></li><li><p><font color=red>区块链作用案例说明</font></p><br><p>区块链到底有什么作用?区块链到底是什么东西?或者说它有什么用?</p><br><p>我们讲两个真实的应用场景。区块这个东西实际上是个记录,你可以理解成你在笔记本上账本上写下一个记录。当任何一个东西产生的时候,实体也好、虚拟的也好,它就同时产生一个记录,你要把它理解成你自己就好了。</p><br><p>你生下来的时候身上就有一个特定的 DNA,这个是不能改的,哪怕你兄弟的 DNA 跟你都不一样,你这一辈子带着。这就是你唯一一个标识,这就是区块,你将来比如做这么一瓶水,做出来以后它就对应着这么一个区块,有一个自己的 DNA。</p><br><p>什么是链呢?就是说它将来所有的行踪、所有中间的交易、整个在生命周期各个过程的一个描述。比如我们说比特币从张三给李四,这个交易过程就要写上一笔,某年月日这个比特币是什么,对应一个随机的号码,从张三到李四手里,还要交到所有的矿机那,通知全世界它的所有权发生转换了。</p><br><p>说到这里,你就想到它有一个很好的用处,就是能够跟踪。比如说这瓶水将来从什么地方来,最后卖到我手里。这件事很重要,现在我们讲食品安全、药品安全,中间流通渠道要把住,中间谁要把箱子拿开,换两瓶假的进去,你是没法检测的,因为流程没法跟踪。以现有的技术跟踪它,实在是太困难了。</p><br><p>区块链将来有这么一个好处,这个药品安全还是很重要的,阿里巴巴的高管们说,中国路边小药房里头没用的药、过期的药,根本就是安慰剂淀粉的药非常非常多,这个比例说出来吓死你。这不是哪家房能解决的间题,因为现在的技术根本解决不了,区块链是一个可能的解决方案。</p><br><p>一个简单的方法,这瓶药生产出来的时候,既然有一个区块,我就产生一个对应的区块链给它。它有一个对应的随机码,这个事一旦产生了,在全世界就不能更改了。</p><br><p>它下了生产线,比如说要装箱,先装瓶,这一瓶药就有一个区块链。装箱,区块链还有一个好处,几个区块链可以合并成一个新的,这个箱子本身有一个。我装一个 RFID 码,走出车间,进入仓库的时候,它就过一道门,又有一个记录。</p><br><p>这个门到仓库以后,谁如果把它打开了,换了一瓶药,这个区块就不对了,因为每瓶药上自己有一个区块。然后进入到货车,小货车送到大货车,然后到顺丰快递,通过飞机运到一个新的城市,放到一个集装箱里,最后形成一个大的商品往下传。</p><br><p>甚至他可以验证这瓶药不仅是哪个厂生产的,用了哪种原材料,这个源头是可以溯的。有了这个方法就可以从根本上解决问题。</p><br><p>你就会问,你描述的这个场景是否能成功? 检测一瓶药或者一瓶水由于成本问题,可能做起来有待一些时日。</p><br><p>大个头的比较贵的商品有可能能成,所以说现在因为只是一个成本问题,贵的商品已经做到了,以后你买的一瓶药,这个都可以完全跟踪得很清楚。</p><br><p>所以这是区块链真正有用的用处,所以很多公司在开发区块链一些底层技术,也是看到了这些商业前景。</p><br><p>再有一个,区块链本身是一个智能的合约。</p><br></li><li><p><font color=red>区块链在时空中处于什么位置？</font></p><br><p>第一代互联网的时候,最牛的公司是谁?是微软和英特尔,剩下的公司基本上都是打酱油的。用什么?你用英特尔的芯片, Windows 的操作系统。</p><br><p>第二代就是手机互联网,只要手机放在身边,你就随时被挂在网上了。现在你自己的习惯已经改了,两三分钟就要看一下微信。大家说加下微信号吧,不是说把这两个手机连起来,而是把这两个人连起来。</p><br><p>第三代大的玩家也变了,最收益的是谁呢?一个是谷歌、安卓,再个就是像高通、三星这些公司,或者说它背后实际上生产处理器的公司就是一家,英国的 ARM。</p><br><p>第四代出现了,前三代都有一个间题,巨头控制着,你越来越不自由了。第四代能不能换一个玩法?你有传感器也好,你有操作系统也好,最好数据这件事我能不能掌握,传输的时候也不要都是通过你一家网络、一家服务器来做,我能不能分散一下?</p><br><p>所以你要把区块链在时间的节点上来看,它处在这样一个位置,就是说从第三代以后可能进入到第四代,所以这是它的重要性所在。</p><br></li><li><p><font color=red>区块链=生产关系？</font></p><br><p>区块链是生产关系,怎么理解这件事?我们说生产关系主要有三个要素,第一,生产的钱和材料,生产的工具这些原材料,这些生产要素从哪来?归谁?</p><br><p>第一代的生产关系,我们先抛开马克思这一套不说,实际上归地主也好、资本家也好、企业主也好,随你怎么叫。</p><br><p>他们提供生产资料以后,你就替他干活。互联网过去是什么呢?过去大公司,为什么你要把数据存在 Facebook 上,你为什么存在百度?</p><br><p>因为你没有生产资料,它不归你。你不存在他们那你存在哪?对于这些公司来讲也一样,你为什么要去那上班?</p><br><p>你不到那上班没人给你工资,生产资料在人家那。既然在人家那,人家说了就算数,这是第一个阶段</p><br><p>第二代是以硅谷为代表的科技公司的新玩法,现在中国的创业公司都在学。就是说我给你一些股权,每个人都谁小老板了,虽然你才万分之一的股票，你老板 80%的股票，没关系，反正你有股权。</p><br><p>滴滴怎么起来的?你说风险投资给它投的,没有司机愿意接单,没有人去打车,起不来的。</p><br><p>其实前一千个愿意接单的司机和前一万个愿意打车的人,其实对滴滴的起步贡献很大。当时,这种公司多了去了,凭什么它起来了?就是因为有前面这些人在支持它</p><br><p>但是滴滴起来以后,它的员工可能也分到期权,也挣到钱了,你要是前一千个人,不管是出租车司机也好,还是乘客也好,你是一分钱分不着的。</p><br><p>当然你说我白打了几次车,这点小头跟近一千亿的市值是比不了的你是半分钱没有的,虽然你是前面的贡献者。因为什么呢?没法记录你的贡献,你凭什么一千个一定比一万个多,这贡献没法算,而且你打了多少次车，改给你多少奖励，也没法算，因为没发跟踪你的表现。</p><br><p>区块链出来以后，这个问题就解决了。就是或每一个人的贡献，每个人的行为，你打一次车就是一个智能合约，这个事情是可以跟踪的。</p><br><p>区块链是一个生产关系，重新定义了人和人之间的关系，相比来说，它未必是把效率提搞多少。</p><br></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;font color=red&gt;区块链是信任的机器，也是一个价值互联网&lt;/font&gt;&lt;/p&gt;
&lt;br&gt;

&lt;p&gt;区块链用一套数学算法确保了两个陌生人不借助于第三方的情况下，把一笔交易，不管是金融的交易或者是商品的交易完成。这就是区块链最核心，最本质的东西。&lt;/p&gt;
&lt;br&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;font color=red&gt;从三个层次了解区块链&lt;/font&gt;&lt;/p&gt;
&lt;br&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;第一个层次，区块链最底层的一个层次，实际上是分布式网络，区块链是架构在分布式网络技术之上的一个应用。&lt;/p&gt;
&lt;br&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第二个层次，在分布式网络基础上，如果我们给它加上一层东西，加一层密码学的账本体系，这个分布式网络就变成了分布式账本&lt;/p&gt;
&lt;br&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第三个层次，公有区块链或者叫比特币区块链&lt;/p&gt;
    
    </summary>
    
    
      <category term="区块链" scheme="http://yoursite.com/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="文章" scheme="http://yoursite.com/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="区块链" scheme="http://yoursite.com/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="心得" scheme="http://yoursite.com/tags/%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title>比特币痛点</title>
    <link href="http://yoursite.com/%E6%AF%94%E7%89%B9%E5%B8%81%E7%97%9B%E7%82%B9/"/>
    <id>http://yoursite.com/%E6%AF%94%E7%89%B9%E5%B8%81%E7%97%9B%E7%82%B9/</id>
    <published>2020-01-17T02:46:50.000Z</published>
    <updated>2025-04-07T09:30:10.830Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p><font color=red>比特币区块链难以建设一个去中心，民主平等的社会。</font><br>底层代码的核心团队与参与挖矿和运行的主要力量能够发挥更大的影响力。<br>受计算机运算能力的影响，比特币的挖矿和获得，并不是想宣传额那样人人都有平等的机会，竞争的结果，使得挖矿获得比特币的机会越来越集中到少数算力强大的矿池或者节点上。</p><br></li><li><p><font color=red>比特币区块链&#39;去信任&#39;，&#39;去中介&#39;的点对点交易是有严格条件的。</font><br>即所有的人都参与到同一个比特币区块链网络平台，平台上运行的只能是比特币，而不能是比特币以外的其他资产或价值，比特币从其生产的源头就得到网络系统严密的验证和记录，难以造假或者篡改。因此，比特币需要在一个&#39;干净&#39;，基于比特币区块链网络平台的环境</p><br><a id="more"></a></li><li><p><font color=red>比特币区块链只是比特币产生和汇划的的封闭系统，实际功能有限，现实世界的资产或者价值很难推送到这一体系上运行。</font><br>要发挥比特币体系的功能，就必须将比特币兑换成法币，并将比特币体系作为现实世界资金汇划的一个过度环节或者新的中介环节。而这就需要比特币体系与现实世界实现连接，从现实世界的大环境来看，其结果不是去中介，而是增加了中介。</p><br></li><li><p><font color=red>比特币网络交易平台并不是比特币体系内在组成部分，不是去中心的。</font><br>比特币区块链体系和比特币交易体系是两个不同的概念，而现在很多人总弄混着两个概念，给了投资这收个韭菜的机会。</p><br></li><li><p><font color=red>比特币区块链体系过于强调&#39;去中心化&#39;，反而影响其效率，成本与监管。</font><br>比特币区块链体系要实现&#39;去中心化&#39;，就需要大量的外部计算机接入并共同运行。这样，加入的计算机节点越多，在比特币的挖矿与转让需要全网广播，验证，分布式处理等的难度就越大，其挖矿过程需要消耗越来越大量的能源，甚至会造成环境污染。法币外挂交易平台的处理程序复杂，效率很慢，成本很高。更重要的是，如果加入比特币体系这样一个完全抵制或规避国家监管的中间环节，法定货币的流通就可能完全失控，被恐怖分子，毒品贩子，网络黑客，金融骗子等利用。</p><br></li><li><p><font color=red>过于追求去中心化，充分的民主自由，实际上就会脱离现实。</font><br>在人类社会中必然存在个别利益与公共利益的矛盾和统一，只有在公共利益最大化的情况下才能使个别利益最大化得到根本保障。在当今世界仍然是以各个国家主权独立和自治为基础架构，国家之间相差悬殊的情况下，设想建立一个&#39;去中心化&#39;，无政府的网络世界和超主权的世界货币，完全摆脱现实世界国家法律的约束，去建立一个去中心化，独立于国家概念的网络平台同样是不现实的</p><br></li><li><p><font color=red>比特币难以成为真正的货币。</font><br>比特币在设计上就是模仿黄金，总量限定，而且挖矿越来越难，产量分阶段逐步减少，以消除认为过多投放的可能性，并为比特币升值创造巨大的想象空间。但高度模仿黄金设计货币体系的思路，本身就是货币设计理念上的一种倒退，是不能成立的。黄金等贵金属曾经长时间作为货币，但正因为其强烈的自然属性，使其供应量难以与经济社会发展的实际水平，特别是可交换社会财富的规模适应，容易造成日益严重的通货膨胀，或者是通货紧缩，币值剧烈波动使货币难以有效发挥价值尺度的功能，最终必然被可以进行数量调控，能够保持货币总量与可交换社会财富规模基本吻合(社会物价综合指数相对稳定)的主权货币或法币锁取代。黄金退出货币舞台是必然选择，不可能在退回去，重新成为货币</p><br></li><li><p><font color=red>网络数字币 ICO 存在更多问题</font><br>ICO 的出现影响极大，看似为区块链创业提供了新的融资方式和渠道，实际上重点是用于炒作数字货币，面向公众募集资金(而非私募)，但严重缺乏必要的规则和监管，很容易产生非常严重的金融和社会问题，甚至将区块链的发展引入歧途。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;font color=red&gt;比特币区块链难以建设一个去中心，民主平等的社会。&lt;/font&gt;&lt;br&gt;底层代码的核心团队与参与挖矿和运行的主要力量能够发挥更大的影响力。&lt;br&gt;受计算机运算能力的影响，比特币的挖矿和获得，并不是想宣传额那样人人都有平等的机会，竞争的结果，使得挖矿获得比特币的机会越来越集中到少数算力强大的矿池或者节点上。&lt;/p&gt;
&lt;br&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;font color=red&gt;比特币区块链&amp;#39;去信任&amp;#39;，&amp;#39;去中介&amp;#39;的点对点交易是有严格条件的。&lt;/font&gt;&lt;br&gt;即所有的人都参与到同一个比特币区块链网络平台，平台上运行的只能是比特币，而不能是比特币以外的其他资产或价值，比特币从其生产的源头就得到网络系统严密的验证和记录，难以造假或者篡改。因此，比特币需要在一个&amp;#39;干净&amp;#39;，基于比特币区块链网络平台的环境&lt;/p&gt;
&lt;br&gt;
    
    </summary>
    
    
      <category term="区块链" scheme="http://yoursite.com/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="文章" scheme="http://yoursite.com/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="区块链" scheme="http://yoursite.com/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="心得" scheme="http://yoursite.com/tags/%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title>区块链是什么</title>
    <link href="http://yoursite.com/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%98%AF%E4%BB%80%E4%B9%88/"/>
    <id>http://yoursite.com/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%98%AF%E4%BB%80%E4%B9%88/</id>
    <published>2020-01-17T02:24:35.000Z</published>
    <updated>2025-04-07T09:30:10.828Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>区块链是分布式数据储存，点对点传输，共识机制，加密算法等计算机的新型应用模式。所谓共识机制是指区块链系统中实现不同节点之间建立信任，获取权益的数学算法。<br>区块链是比特币的一个重要概念，本质上是一个去中心化的数据库。它是一串使用密码学方法相关联产生的数据块，每一个数据块中包含了一次比特币网络交易信息，用于验证其信息的有效性(防伪)和生成下一个区块，数据存储的每一个节点都会同步复制整个账本，信息透明难以篡改。</p><br></li><li><p><font color=red >凡事需要更加公平，公正，公开的企业行业，都可以用到区块链技术，都可以用使用区块链技术来改造和实现；凡事需要数据存储，保护，授权，交易的企业，都可以用到区块链技术；凡事需要社会化协作，尤其是跨境，基于计算机网络可以完成的社会化分工和协作，都可以用到区块链技术</font></p><br><a id="more"></a></li><li><p>从互联网思维到区块链思维</p><br></li><li><p>关于区块链思维三个关键点：</p><p>1.技术架构的可靠性。</p><p>2.分配过程的公平性。</p><p>3.成员行为的规范性。</p><br></li><li><p>区块链技术目前最大的意义是它的运行机制：通过技术精巧的组合，完成资源的公平分配，从而保证社区的目标一致，成员的行为规范</p><br></li><li><p>要用科学的眼光看待区块链，以&#39;去中心化&#39;为例，从哲学上讲，矛盾总有主次，从现实来看，大到宇宙星系，小到一个原子都有中心。区块链经典的技术虽然去掉数据结构的中心，但其运行仍受中心化节点的约束。事实上，曾经有&#39;去中心化&#39;的互联网，结果只是颠覆了旧的中心，形成了新的寡头。</p><br></li><li><p>任何产业能够得到长久的发展，都是需要推动社会进步，满足人们生产生活的需求无论区块链在当下是否真正为实体经济发展和改善人民生活提供了支持，但从长远来看，以人为本，从大众的根本需求出发，为社会进步和经济发展提供高效率，低成本的解决方案才是区块链行业发展壮大，迈向成熟的持久动力。</p><br></li><li><p>历史证明，商机并非都是先到先得，先到多得的游戏。新的技术发展的不同阶段都会有不同的商机，创造新的商业机会，不同阶段的商机适合不同类型的人和机构去把握。与其躁动焦虑，盲目跟风，不如静心分析社会需求，研究行业痛点，找准自己最能创造价值的领域和阶段</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;区块链是分布式数据储存，点对点传输，共识机制，加密算法等计算机的新型应用模式。所谓共识机制是指区块链系统中实现不同节点之间建立信任，获取权益的数学算法。&lt;br&gt;区块链是比特币的一个重要概念，本质上是一个去中心化的数据库。它是一串使用密码学方法相关联产生的数据块，每一个数据块中包含了一次比特币网络交易信息，用于验证其信息的有效性(防伪)和生成下一个区块，数据存储的每一个节点都会同步复制整个账本，信息透明难以篡改。&lt;/p&gt;
&lt;br&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;font color=red &gt;凡事需要更加公平，公正，公开的企业行业，都可以用到区块链技术，都可以用使用区块链技术来改造和实现；凡事需要数据存储，保护，授权，交易的企业，都可以用到区块链技术；凡事需要社会化协作，尤其是跨境，基于计算机网络可以完成的社会化分工和协作，都可以用到区块链技术&lt;/font&gt;&lt;/p&gt;
&lt;br&gt;
    
    </summary>
    
    
      <category term="区块链" scheme="http://yoursite.com/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="文章" scheme="http://yoursite.com/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="区块链" scheme="http://yoursite.com/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="心得" scheme="http://yoursite.com/tags/%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title>npmpkg starter</title>
    <link href="http://yoursite.com/react-npmpkg-starter/"/>
    <id>http://yoursite.com/react-npmpkg-starter/</id>
    <published>2020-01-14T07:31:59.000Z</published>
    <updated>2025-04-07T09:30:10.824Z</updated>
    
    <content type="html"><![CDATA[<h1 id="npmpkg-starter-vue"><a href="#npmpkg-starter-vue" class="headerlink" title="npmpkg-starter-vue"></a>npmpkg-starter-vue</h1><p>A Vue NPM package starter</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1Nob3dQZW5aL25wbXBrZy1zdGFydGVyLXZ1ZQ==">项目代码地址<i class="fa fa-external-link-alt"></i></span></p><p>为了简化老哥们的生产 npm 包的复杂程度<br>提供了一个小框架(Vue 版) 打包工具使用<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Vnb2lzdC9iaWxp">bili<i class="fa fa-external-link-alt"></i></span><br>还有相应的代码规范规则以及代码提交规范</p><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm i</span><br><span class="line">$ yarn</span><br></pre></td></tr></table></figure><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><ol><li><p>修改<code>package.json</code><br><img data-src="https://i.loli.net/2020/01/14/9vf1JxTrGCZmtcW.png" alt="image.png"><br>name，author，main，description，keywords 改为你需要写入的信息<br>main 为打包出来的文件路口</p><br><a id="more"></a></li><li><p>修改<code>bill.config.js</code><br><img data-src="https://i.loli.net/2020/01/14/VuPOGQBKrTYiphe.png" alt="image.png"><br>修改 input 打包入口文件路径 <code>src/xxxx.vue</code> 为你的文件名字，假如你的组件叫 Websocket 则改为<code>src/Websocket.vue</code><br><br>修改 moduleName 模块名字 xxxx 为你的文件模块名字 例如：<code>moduleName: 'Websocket'</code><br><br><code>extractCSS</code> 为打包出来的 js 文件是否要包含 css 也就是不单独派生出 css 文件<br><br><code>babel</code> 这边<font color=red>默认已经给 vue 配置了 jsx 语法</font> 已打开了<code>babelrc: true</code>, <code>.babelrc</code>文件可编写自己的所需</p><br></li><li><p>README.md 文件写入自己的组件介绍以及 LICENSE 文件替换</p><br></li><li><p>书写规范的<code>.editorconfig</code> 代码规范的<code>.prettierrc</code>以及<code>.eslintrc</code>文件可以根据自己的项目需要自己修改 这些都需要 vs code 或者你使用的编辑器下载相关的插件才会生效</p><br></li><li><p><code>yarn build</code> 执行代码编译打包生成 dist 文件夹以及代码源文件</p><br></li><li><p>代码编写完 git 上传时 commit 填写规则<code>type(path): xxxx</code><br>type 必须为其中之一<code>[build, chore, ci, docs, feat, fix, improvement, perf, refactor, revert, style, test]</code><br><code>path</code>为修改文件的路径例如 src，package 之类<br><code>xxxx 为本次修改提交</code></p><br></li><li><p>默认你已经注册过 npm 账号 在发布前最好去 npm 里输入自己要发布的包名检查下是否已有相同的包 npm 的包名都是唯一的 在终端执行<code>npm publish</code>命令即可推送 npm 包(注意 package.json 的 version 版本号)<br><br>大部分的 publish 失败都是包名重复<br><br>小修改小补丁已经 bugfix 可以使用<code>npm version patch && npm publish</code>或相应脚本的代码<code>npm run release:patch</code><br><br>小升级使用<code>npm version minor && npm publish</code>或<code>npm run release:minor</code><br><br>大升级使用<code>npm version major && npm publish</code>或<code>npm run release:major</code></p></li></ol><h1 id="npmpkg-start-react"><a href="#npmpkg-start-react" class="headerlink" title="npmpkg-start-react"></a>npmpkg-start-react</h1><p>a React NPM package starter</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1Nob3dQZW5aL25wbXBrZy1zdGFydC1yZWFjdA==">项目代码地址<i class="fa fa-external-link-alt"></i></span></p><p>为了简化老哥们的生产 npm 包的复杂程度<br>提供了一个小框架(React 版本) 打包工具使用<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Vnb2lzdC9iaWxp">bili<i class="fa fa-external-link-alt"></i></span><br>还有相应的代码规范规则以及代码提交规范</p><h2 id="Installation-1"><a href="#Installation-1" class="headerlink" title="Installation"></a>Installation</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm i</span><br><span class="line">$ yarn</span><br></pre></td></tr></table></figure><h2 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h2><ol><li><p>修改<code>package.json</code><br><img data-src="https://i.loli.net/2020/01/14/x8qdDzh6C1HfME4.png" alt="image.png"><br>name，author，main，description，keywords 改为你需要写入的信息<br>main 为打包出来的文件路口</p><br></li><li><p>修改<code>bill.config.js</code><br><img data-src="https://i.loli.net/2020/01/14/dUuiNszJeOf4PZr.png" alt="image.png"><br>修改 input 打包入口文件路径 <code>src/xxxx.jsx</code> 为你的文件名字，假如你的组件叫 Websocket 则改为<code>src/Websocket.jsx</code><br><br>修改 moduleName 模块名字 xxxx 为你的文件模块名字 例如：<code>moduleName: 'Websocket'</code><br><br><code>extractCSS</code> 为打包出来的 js 文件是否要包含 css 也就是不单独派生出 css 文件<br><br><code>babel</code> 这边默认已经配置了 jsx 语法 如果有自己的需求可以打开 <code>babelrc: true</code>, 自己添加<code>.babelrc</code>文件编写自己的所需</p><br></li></ol><h4 id="其他同-vue-版一样"><a href="#其他同-vue-版一样" class="headerlink" title="其他同 vue 版一样"></a>其他同 vue 版一样</h4>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;npmpkg-starter-vue&quot;&gt;&lt;a href=&quot;#npmpkg-starter-vue&quot; class=&quot;headerlink&quot; title=&quot;npmpkg-starter-vue&quot;&gt;&lt;/a&gt;npmpkg-starter-vue&lt;/h1&gt;&lt;p&gt;A Vue NPM package starter&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9naXRodWIuY29tL1Nob3dQZW5aL25wbXBrZy1zdGFydGVyLXZ1ZQ==&quot;&gt;项目代码地址&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;为了简化老哥们的生产 npm 包的复杂程度&lt;br&gt;提供了一个小框架(Vue 版) 打包工具使用&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9naXRodWIuY29tL2Vnb2lzdC9iaWxp&quot;&gt;bili&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;还有相应的代码规范规则以及代码提交规范&lt;/p&gt;
&lt;h2 id=&quot;Installation&quot;&gt;&lt;a href=&quot;#Installation&quot; class=&quot;headerlink&quot; title=&quot;Installation&quot;&gt;&lt;/a&gt;Installation&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ yarn&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;用法&quot;&gt;&lt;a href=&quot;#用法&quot; class=&quot;headerlink&quot; title=&quot;用法&quot;&gt;&lt;/a&gt;用法&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;修改&lt;code&gt;package.json&lt;/code&gt;&lt;br&gt;&lt;img data-src=&quot;https://i.loli.net/2020/01/14/9vf1JxTrGCZmtcW.png&quot; alt=&quot;image.png&quot;&gt;&lt;br&gt;name，author，main，description，keywords 改为你需要写入的信息&lt;br&gt;main 为打包出来的文件路口&lt;/p&gt;
&lt;br&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="npm" scheme="http://yoursite.com/tags/npm/"/>
    
      <category term="starter" scheme="http://yoursite.com/tags/starter/"/>
    
  </entry>
  
</feed>
