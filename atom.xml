<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ShowPenZ&#39;s Space</title>
  
  <subtitle>万物归一</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://showpenz.github.io/"/>
  <updated>2020-09-02T08:15:33.025Z</updated>
  <id>https://showpenz.github.io/</id>
  
  <author>
    <name>ShowPenZ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>打个广告</title>
    <link href="https://showpenz.github.io/2020/09/02/%E6%89%93%E4%B8%AA%E5%B9%BF%E5%91%8A/"/>
    <id>https://showpenz.github.io/2020/09/02/%E6%89%93%E4%B8%AA%E5%B9%BF%E5%91%8A/</id>
    <published>2020-09-02T08:13:32.000Z</published>
    <updated>2020-09-02T08:15:33.025Z</updated>
    
    <content type="html"><![CDATA[<p>有需要Telegram 机器人制作，推特博文抓取推送业务，以及短信推送业务的可以找我。。。<br>价格实惠，开发迅速</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有需要Telegram 机器人制作，推特博文抓取推送业务，以及短信推送业务的可以找我。。。&lt;br&gt;价格实惠，开发迅速&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="广告" scheme="https://ShowPenZ.github.io/categories/%E5%B9%BF%E5%91%8A/"/>
    
    
  </entry>
  
  <entry>
    <title>H5 多个块元素横向滚动问题</title>
    <link href="https://showpenz.github.io/2020/08/05/H5-%E5%A4%9A%E4%B8%AA%E5%9D%97%E5%85%83%E7%B4%A0%E6%A8%AA%E5%90%91%E6%BB%9A%E5%8A%A8%E9%97%AE%E9%A2%98/"/>
    <id>https://showpenz.github.io/2020/08/05/H5-%E5%A4%9A%E4%B8%AA%E5%9D%97%E5%85%83%E7%B4%A0%E6%A8%AA%E5%90%91%E6%BB%9A%E5%8A%A8%E9%97%AE%E9%A2%98/</id>
    <published>2020-08-05T03:31:41.000Z</published>
    <updated>2020-08-05T03:49:15.971Z</updated>
    
    <content type="html"><![CDATA[<p>工作中遇到的H5 需要4个块级元素在一个窗口内横向滚动 如图<img src="https://i.loli.net/2020/08/05/vytDzeV9nTL1Apx.png" alt="image.png"><br>刚开始直接使用css代码对窗口元素书写<code>width: 690px;overflow-x: scroll;</code>之后对其中的每个块级元素进行书写，因为块级元素内需要使用flex布局所以写了<code>display:flex</code>，写完调试发现并没有与想象中的横向滑动符合几个块级元素纵向的排列没有在一行内，如图<img src="https://i.loli.net/2020/08/05/tG2Hz5LC1TqUAIE.png" alt="image.png">。<a id="more"></a><br>这时想到了使用<code>white-space: nowrap;</code>来使窗口内的元素不换行。但是块级元素内我还想要flex布局，这会导致换行不起作用，这是可以使用<code>display: inline-flex<code>将其变为行内元素进行滚动</code></code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;工作中遇到的H5 需要4个块级元素在一个窗口内横向滚动 如图&lt;img src=&quot;https://i.loli.net/2020/08/05/vytDzeV9nTL1Apx.png&quot; alt=&quot;image.png&quot;&gt;&lt;br&gt;刚开始直接使用css代码对窗口元素书写&lt;code&gt;width: 690px;overflow-x: scroll;&lt;/code&gt;之后对其中的每个块级元素进行书写，因为块级元素内需要使用flex布局所以写了&lt;code&gt;display:flex&lt;/code&gt;，写完调试发现并没有与想象中的横向滑动符合几个块级元素纵向的排列没有在一行内，如图&lt;img src=&quot;https://i.loli.net/2020/08/05/tG2Hz5LC1TqUAIE.png&quot; alt=&quot;image.png&quot;&gt;。
    
    </summary>
    
    
      <category term="css" scheme="https://ShowPenZ.github.io/categories/css/"/>
    
    
      <category term="css 问题" scheme="https://ShowPenZ.github.io/tags/css-%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>诡异的滚动样式问题</title>
    <link href="https://showpenz.github.io/2020/07/26/%E8%AF%A1%E5%BC%82%E7%9A%84%E6%BB%9A%E5%8A%A8%E6%A0%B7%E5%BC%8F%E9%97%AE%E9%A2%98/"/>
    <id>https://showpenz.github.io/2020/07/26/%E8%AF%A1%E5%BC%82%E7%9A%84%E6%BB%9A%E5%8A%A8%E6%A0%B7%E5%BC%8F%E9%97%AE%E9%A2%98/</id>
    <published>2020-07-26T09:08:14.000Z</published>
    <updated>2020-07-26T09:40:46.648Z</updated>
    
    <content type="html"><![CDATA[<p>起因：同样的css区域滚动代码，js加载数百条数据在一个区块滚动。安卓下没问题，ios下呈现这样的效果<img src="https://i.loli.net/2020/07/26/jgkLNhwH5Z3E7Oa.png" alt="image.png">，也就是数据粘在了一起。</p><p>解决思路: 一开始很懵逼，在mac的Chrome 模拟的iPhone下页面没有任何的问题，但是真机上就是出现了。</p><a id="more"></a><p>刚开始我以为是每条的数据的这个div缺少高度<img src="https://i.loli.net/2020/07/26/GyOMB67IcKQZNT4.png" alt="image.png">接着我就补上了高度和line-height,build后发现没有起作用。<br>测试反馈说挤在一起的数据没法滚动，那就是意味这几百条数据一次行全部渲染在该区块下。难道是<code>overflow:scroll</code> 没有起到作用吗？不应该呀！父级的样式已经添加了高度的，按照常理就应该要可以进行正常的渲染以及滚动，左猜右想，难道是因为我的父级里写了<code>display:flex</code>以及一些flex布局的相关代码吗？<img src="https://i.loli.net/2020/07/26/UStbo4QZIYXlvwz.png" alt="image.png">那我就去了试试吧！<img src="https://i.loli.net/2020/07/26/mSTcPvYQfq2wWBC.png" alt="image.png"> giao！giao！giao！ <img src="https://i.loli.net/2020/07/26/wXYNGZEgj7Tknp4.png" alt="image.png">  就是因为这样</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;起因：同样的css区域滚动代码，js加载数百条数据在一个区块滚动。安卓下没问题，ios下呈现这样的效果&lt;img src=&quot;https://i.loli.net/2020/07/26/jgkLNhwH5Z3E7Oa.png&quot; alt=&quot;image.png&quot;&gt;，也就是数据粘在了一起。&lt;/p&gt;
&lt;p&gt;解决思路: 一开始很懵逼，在mac的Chrome 模拟的iPhone下页面没有任何的问题，但是真机上就是出现了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="css" scheme="https://ShowPenZ.github.io/categories/css/"/>
    
    
      <category term="css 问题" scheme="https://ShowPenZ.github.io/tags/css-%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>手写实现Promise.all</title>
    <link href="https://showpenz.github.io/2020/07/09/%E6%89%8B%E5%86%99%E5%AE%9E%E7%8E%B0Promise-all/"/>
    <id>https://showpenz.github.io/2020/07/09/%E6%89%8B%E5%86%99%E5%AE%9E%E7%8E%B0Promise-all/</id>
    <published>2020-07-09T07:12:55.000Z</published>
    <updated>2020-07-09T07:34:09.056Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PromiseAll = <span class="function">(<span class="params">array</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> tempValue = [];</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">       <span class="keyword">const</span> next = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            array[i].then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">                i++;</span><br><span class="line">                tempValue.push(res)</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">return</span> i === array.length ? resolve(tempValue):next()</span><br><span class="line">            &#125;).catch(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">                reject(<span class="string">`reject <span class="subst">$&#123;res&#125;</span>`</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        next();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="built_in">Promise</span>.resolve(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="built_in">Promise</span>.resolve(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">let</span> p3 = <span class="built_in">Promise</span>.reject(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">PromiseAll([p1,p2,p3]).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res) <span class="comment">// [1,2,3]</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p4 = <span class="built_in">Promise</span>.resolve(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">let</span> p5 = <span class="built_in">Promise</span>.resolve(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">let</span> p6 = <span class="built_in">Promise</span>.reject(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">PromiseAll([p4,p5,p6]).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res) <span class="comment">// reject  1</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="js" scheme="https://ShowPenZ.github.io/categories/js/"/>
    
    
      <category term="Promise" scheme="https://ShowPenZ.github.io/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title>Hackintosh-K670-G4E6(神舟战神系列 hasse god of war serials)</title>
    <link href="https://showpenz.github.io/2020/04/26/Hackintosh-K670-G4E6-%E7%A5%9E%E8%88%9F%E6%88%98%E7%A5%9E%E7%B3%BB%E5%88%97-hasse-god-of-war-serials/"/>
    <id>https://showpenz.github.io/2020/04/26/Hackintosh-K670-G4E6-%E7%A5%9E%E8%88%9F%E6%88%98%E7%A5%9E%E7%B3%BB%E5%88%97-hasse-god-of-war-serials/</id>
    <published>2020-04-26T06:09:19.000Z</published>
    <updated>2020-06-16T06:32:36.110Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hackintosh-K670D-G4E6"><a href="#Hackintosh-K670D-G4E6" class="headerlink" title="Hackintosh-K670D-G4E6"></a>Hackintosh-K670D-G4E6</h1><p>Hackintosh for Hasse</p><p>EFI下载地址为  <a href="https://github.com/ShowPenZ/Hackintosh-K670D-G4E6" title="Hackintosh-K670D-G4E6" target="_blank" rel="noopener">Hackintosh-K670D-G4E6</a></p><h3 id="最新提示-wtf-gt-HD-Graphic-610-核显"><a href="#最新提示-wtf-gt-HD-Graphic-610-核显" class="headerlink" title="最新提示 wtf====&gt;HD Graphic 610 核显"></a>最新提示 wtf====&gt;HD Graphic 610 核显</h3><p>Intel Pentium Gold G5420 使用的核显是Intel HD Graphic 610<br>现在基本没有办法驱动这个hd 610 核显，导致电脑特别的卡以及一些观感问题<br>加上这台电脑又是NVIDIA的独显，在macOS 10.13之后的版本已经没有NVIDIA的独显驱动适配了<br>所以我打算将macOS版本降级到10.13.6版本</p><h3 id="我安装的是macOS-版本为10-14-4"><a href="#我安装的是macOS-版本为10-14-4" class="headerlink" title="我安装的是macOS 版本为10.14.4"></a>我安装的是macOS 版本为10.14.4</h3><table><thead><tr><th>配置</th><th></th></tr></thead><tbody><tr><td>CPU</td><td>Intel Pentium Gold G5420  @ 3.80GHz 双核</td></tr><tr><td>GPU</td><td>NVIDIA GeForce GTX 1050 4GB GDDR5</td></tr><tr><td>网卡</td><td>瑞昱RTL8168/8111/8112 Gigabit Ethernet Controller</td></tr><tr><td>硬盘</td><td>镁光256GB/固态硬盘</td></tr><tr><td>内存</td><td>8G DDR4 英睿达 2666MHZ</td></tr></tbody></table><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>将下载好的EFI文件夹替换U盘掉原来的EFI文件夹 </p><p>如果没有制作过u盘可以通过下面提供的工具来制作</p><p>u盘制作工具链接: <a href="https://pan.baidu.com/s/18r3plI7BTnYCG6OTY2S5KQ" target="_blank" rel="noopener">https://pan.baidu.com/s/18r3plI7BTnYCG6OTY2S5KQ</a> 提取码: b9ij </p><a id="more"></a><h3 id="制作u盘启动盘方法"><a href="#制作u盘启动盘方法" class="headerlink" title="制作u盘启动盘方法"></a>制作u盘启动盘方法</h3><ol><li><p>制作启动盘<br>插入一个普通的u盘，打开u盘工具.exe(实际是Ether)，用Ether把镜像写入U盘,镜像可以去<a href="https://blog.daliansky.net/categories/%E4%B8%8B%E8%BD%BD/" title="黑果小兵大佬的blog" target="_blank" rel="noopener">黑果小兵大佬的blog</a>下载想要的macOS版本</p></li><li><p>将efi注入到启动盘<br>打开黑苹果工具.exe 用管理员权限方式打开，看好u盘的盘符在制作u盘盘符那一栏选择好u盘 然后将本次提供的efi文件夹拖进这个软件界面即会自动倒入efi文件等待一段时间会提示制作成功，即可重新拔插下然后打开u盘检阅下文件</p></li></ol><h3 id="启动黑苹果安装"><a href="#启动黑苹果安装" class="headerlink" title="启动黑苹果安装"></a>启动黑苹果安装</h3><p>重启选择有macOS的u盘,然后点击install macOS自动跑代码 然后结束会出现苹果图标和进度条等待一会就会进去macOS实用工具，即完成了初步安装</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hackintosh-K670D-G4E6&quot;&gt;&lt;a href=&quot;#Hackintosh-K670D-G4E6&quot; class=&quot;headerlink&quot; title=&quot;Hackintosh-K670D-G4E6&quot;&gt;&lt;/a&gt;Hackintosh-K670D-G4E6&lt;/h1&gt;&lt;p&gt;Hackintosh for Hasse&lt;/p&gt;
&lt;p&gt;EFI下载地址为  &lt;a href=&quot;https://github.com/ShowPenZ/Hackintosh-K670D-G4E6&quot; title=&quot;Hackintosh-K670D-G4E6&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hackintosh-K670D-G4E6&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;最新提示-wtf-gt-HD-Graphic-610-核显&quot;&gt;&lt;a href=&quot;#最新提示-wtf-gt-HD-Graphic-610-核显&quot; class=&quot;headerlink&quot; title=&quot;最新提示 wtf====&amp;gt;HD Graphic 610 核显&quot;&gt;&lt;/a&gt;最新提示 wtf====&amp;gt;HD Graphic 610 核显&lt;/h3&gt;&lt;p&gt;Intel Pentium Gold G5420 使用的核显是Intel HD Graphic 610&lt;br&gt;现在基本没有办法驱动这个hd 610 核显，导致电脑特别的卡以及一些观感问题&lt;br&gt;加上这台电脑又是NVIDIA的独显，在macOS 10.13之后的版本已经没有NVIDIA的独显驱动适配了&lt;br&gt;所以我打算将macOS版本降级到10.13.6版本&lt;/p&gt;
&lt;h3 id=&quot;我安装的是macOS-版本为10-14-4&quot;&gt;&lt;a href=&quot;#我安装的是macOS-版本为10-14-4&quot; class=&quot;headerlink&quot; title=&quot;我安装的是macOS 版本为10.14.4&quot;&gt;&lt;/a&gt;我安装的是macOS 版本为10.14.4&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;配置&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;CPU&lt;/td&gt;
&lt;td&gt;Intel Pentium Gold G5420  @ 3.80GHz 双核&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GPU&lt;/td&gt;
&lt;td&gt;NVIDIA GeForce GTX 1050 4GB GDDR5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;网卡&lt;/td&gt;
&lt;td&gt;瑞昱RTL8168/8111/8112 Gigabit Ethernet Controller&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;硬盘&lt;/td&gt;
&lt;td&gt;镁光256GB/固态硬盘&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;内存&lt;/td&gt;
&lt;td&gt;8G DDR4 英睿达 2666MHZ&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&quot;使用方法&quot;&gt;&lt;a href=&quot;#使用方法&quot; class=&quot;headerlink&quot; title=&quot;使用方法&quot;&gt;&lt;/a&gt;使用方法&lt;/h3&gt;&lt;p&gt;将下载好的EFI文件夹替换U盘掉原来的EFI文件夹 &lt;/p&gt;
&lt;p&gt;如果没有制作过u盘可以通过下面提供的工具来制作&lt;/p&gt;
&lt;p&gt;u盘制作工具链接: &lt;a href=&quot;https://pan.baidu.com/s/18r3plI7BTnYCG6OTY2S5KQ&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pan.baidu.com/s/18r3plI7BTnYCG6OTY2S5KQ&lt;/a&gt; 提取码: b9ij &lt;/p&gt;
    
    </summary>
    
    
      <category term="玩" scheme="https://ShowPenZ.github.io/categories/%E7%8E%A9/"/>
    
    
      <category term="黑苹果(hackintosh)" scheme="https://ShowPenZ.github.io/tags/%E9%BB%91%E8%8B%B9%E6%9E%9C-hackintosh/"/>
    
  </entry>
  
  <entry>
    <title>Vuepress 尝鲜以及侧边栏小改动</title>
    <link href="https://showpenz.github.io/2020/04/18/Vuepress-%E5%B0%9D%E9%B2%9C%E4%BB%A5%E5%8F%8A%E4%BE%A7%E8%BE%B9%E6%A0%8F%E5%B0%8F%E6%94%B9%E5%8A%A8/"/>
    <id>https://showpenz.github.io/2020/04/18/Vuepress-%E5%B0%9D%E9%B2%9C%E4%BB%A5%E5%8F%8A%E4%BE%A7%E8%BE%B9%E6%A0%8F%E5%B0%8F%E6%94%B9%E5%8A%A8/</id>
    <published>2020-04-18T15:56:31.000Z</published>
    <updated>2020-06-16T06:31:41.374Z</updated>
    
    <content type="html"><![CDATA[<p>今天试了下 VuePress 这个静态网页生成工具<br>制作了一个面试题集(会陆续增加功能，以及习题的增加)<br><img src="https://i.loli.net/2020/04/18/ZsvwVYWeJXAa8Mk.png" alt="image.png"></p><a id="more"></a><h3 id="package-json-文件"><a href="#package-json-文件" class="headerlink" title="package.json 文件"></a>package.json 文件</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"interviewExercise"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"doc for interviewExercise"</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"directories"</span>: &#123;</span><br><span class="line">    <span class="attr">"doc"</span>: <span class="string">"docs"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"dev"</span>: <span class="string">"vuepress dev docs"</span>,</span><br><span class="line">    <span class="attr">"deploy"</span>: <span class="string">"bash deploy.sh"</span>,</span><br><span class="line">    <span class="attr">"push"</span>: <span class="string">"bash push.sh"</span>,</span><br><span class="line">    <span class="attr">"docs:build"</span>: <span class="string">"vuepress build docs"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"repository"</span>: &#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"git"</span>,</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"git@github.com:ShowPenZ/interviewExercise.git"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="attr">"bugs"</span>: &#123;</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"https://github.com/ShowPenZ/interviewExercise/issues"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"vuepress"</span>: <span class="string">"^1.0.0-alpha.44"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"gh-pages"</span>: <span class="string">"^2.0.1"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>第一步 构造文件目录</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在项目根目录创建一个 docs 目录</span></span><br><span class="line">mkdir docs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在项目根目录创建一个 javascript 目录</span></span><br><span class="line"><span class="built_in">cd</span> docs</span><br><span class="line"></span><br><span class="line">mkdir javascript</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个 markdown 文件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'# Hello VuePress'</span> &gt; docs/README.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始编写文档</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>再在 docs 目录下创建一个.vuepress 文件夹<br>以及在.vuepress 文件夹下添加 config.js 配置</p><p>文件目录结构如下<br><img src="https://i.loli.net/2020/04/19/NaFK53mMQjgHqRw.png" alt="image.png"></p><p>config.js 简单配置如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 第一种</span></span><br><span class="line">  <span class="comment">// 因为我是发布到 https://showpenz.github.io/InterviewExercise</span></span><br><span class="line">  <span class="comment">// 所以将 .vuepress/config.js 中的 base 设置为你的仓库名称。</span></span><br><span class="line">  <span class="comment">// 例如，如果你的仓库是 https://github.com/showpenz/InterviewExercise ，</span></span><br><span class="line">  <span class="comment">// 则已部署的页面将在 https://showpenz.github.io/InterviewExercise 上可用。</span></span><br><span class="line">  <span class="comment">// 在这种情况下，你应该将base设置为 "/InterviewExercise/" 。</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 第二种</span></span><br><span class="line">  <span class="comment">// 如果发布到 https://showpenz.github.io</span></span><br><span class="line">  <span class="comment">// 例如，如果你的仓库是 https://github.com/showpenz/ ，</span></span><br><span class="line">  <span class="comment">// 则已部署的页面将在 https://showpenz.github.io/ 上可用。</span></span><br><span class="line">  <span class="comment">// 在这种情况下，你应该将base设置为 "/" 。</span></span><br><span class="line"></span><br><span class="line">  base: <span class="string">"/interviewExercise"</span>,</span><br><span class="line">  dest: <span class="string">"dist"</span>,</span><br><span class="line"></span><br><span class="line">  description: <span class="string">"面试题"</span>,</span><br><span class="line">  locales: &#123;</span><br><span class="line">    <span class="comment">// 键名是该语言所属的子路径</span></span><br><span class="line">    <span class="comment">// 作为特例，默认语言可以使用 '/' 作为其路径。</span></span><br><span class="line">    <span class="string">"/"</span>: &#123;</span><br><span class="line">      lang: <span class="string">"en-US"</span>, <span class="comment">// 将会被设置为 &lt;html&gt; 的 lang 属性</span></span><br><span class="line">      title: <span class="string">"InterviewExercise"</span>,</span><br><span class="line">      description: <span class="string">"Vue-powered Static Site Generator"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"/zh/"</span>: &#123;</span><br><span class="line">      lang: <span class="string">"zh-CN"</span>,</span><br><span class="line">      title: <span class="string">"练习题"</span>,</span><br><span class="line">      description: <span class="string">"Vue 驱动的静态网站生成器"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  themeConfig: &#123;</span><br><span class="line">    editLinks: <span class="literal">false</span>,</span><br><span class="line">    docsDir: <span class="string">"docs"</span>,</span><br><span class="line">    nav: [],</span><br><span class="line">    locales: &#123;</span><br><span class="line">      <span class="string">"/"</span>: &#123;</span><br><span class="line">        selectText: <span class="string">"选择语言"</span>,</span><br><span class="line">        label: <span class="string">"English"</span>,</span><br><span class="line">        ariaLabel: <span class="string">"Languages"</span>,</span><br><span class="line">        editLinkText: <span class="string">"Edit this page on GitHub"</span>,</span><br><span class="line">        <span class="comment">// nav: [&#123; text: "Nested", link: "/nested/", ariaLabel: "Nested" &#125;],</span></span><br><span class="line">        sidebar: &#123;</span><br><span class="line">          <span class="string">"/"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              title: <span class="string">"Javascript"</span>, <span class="comment">//侧边栏主标题</span></span><br><span class="line">              children: [</span><br><span class="line">                &#123;</span><br><span class="line">                  title: <span class="string">"DataStructureTransformation"</span>, <span class="comment">// 侧边栏二级标题</span></span><br><span class="line">                  children: [</span><br><span class="line">                    [<span class="string">"javascript/DataStructureTransformation/1"</span>, <span class="string">"question 1"</span>], <span class="comment">// 数组第0项是需要显示的md文件的文件夹的文件路径  第1项是侧边栏的三级标题</span></span><br><span class="line">                  ],</span><br><span class="line">                &#125;,</span><br><span class="line">              ],</span><br><span class="line">            &#125;,</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"/zh/"</span>: &#123;</span><br><span class="line">        <span class="comment">// 多语言下拉菜单的标题</span></span><br><span class="line">        selectText: <span class="string">"Languages"</span>,</span><br><span class="line">        <span class="comment">// 该语言在下拉菜单中的标签</span></span><br><span class="line">        label: <span class="string">"简体中文"</span>,</span><br><span class="line">        <span class="comment">// 编辑链接文字</span></span><br><span class="line">        editLinkText: <span class="string">"在 GitHub 上编辑此页"</span>,</span><br><span class="line">        <span class="comment">// Service Worker 的配置</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当前 locale 的 algolia docsearch 选项</span></span><br><span class="line">        <span class="comment">// nav: [&#123; text: "嵌套", link: "/zh/nested/" &#125;],</span></span><br><span class="line">        sidebar: &#123;</span><br><span class="line">          <span class="string">"/zh/"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              title: <span class="string">"Javascript"</span>,</span><br><span class="line">              children: [</span><br><span class="line">                &#123;</span><br><span class="line">                  title: <span class="string">"数据结构转换"</span>,</span><br><span class="line">                  children: [</span><br><span class="line">                    [<span class="string">"/zh/javascript/DataStructureTransformation/1"</span>, <span class="string">"第1题"</span>],</span><br><span class="line">                  ],</span><br><span class="line">                &#125;,</span><br><span class="line">              ],</span><br><span class="line">            &#125;,</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li>书写完毕配配置部署到 github 的 git-page</li></ol><p><font color="red">默认提前在 github 开好新的项目，打开 gitpage 并与当前项目建立好关系</font></p><p>首先在根目录编写 deploy.bash(windows 系统需进行一些处理)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 确保脚本抛出遇到的错误</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成静态文件</span></span><br><span class="line">npm run docs:build</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入生成的文件夹</span></span><br><span class="line"><span class="built_in">cd</span> docs/.vuepress/dist</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果是发布到自定义域名</span></span><br><span class="line"></span><br><span class="line">git init</span><br><span class="line">git add -A</span><br><span class="line">git commit -m <span class="string">'deploy'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果发布到 https://&lt;USERNAME&gt;.github.io</span></span><br><span class="line"><span class="comment"># git push -f git@github.com:showpenz/showpenz.github.io.git master</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果发布到 https://&lt;USERNAME&gt;.github.io/&lt;REPO&gt;</span></span><br><span class="line"><span class="comment"># 把下面的地址换成你的</span></span><br><span class="line"><span class="comment"># git push -f git@github.com:showpenz/interviewExercise.git master:gh-pages</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> -</span><br></pre></td></tr></table></figure><p>然后在根目录执行 npm run deploy.bash 便会自动 build 好并打包在.vuepress 下生成 dist 文件夹，然后自动 push 到 git-pages 分支</p><ol start="3"><li>因为我不是全局安装 vuepress 工具 所以好多文件没有自动配置以及生成这里介绍一个我遇到的问题</li></ol><p>根据上面那种简单配置的 config.js 往下走 会导致你新增一个 md 文件就要手动去 config.js 里面增加 sidebar 因为我做的是三级的侧边栏所以好像自动生成侧边栏的功能没法用，我想以后不论增加文件夹还是文件都能自动关联到侧边栏，所以，没关系咱们手写一个。。。</p><p>首先啥也别说 先建一个工具类的文件夹 utils,新增 fileHelper.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fileHelper = &#123;</span><br><span class="line">  getFileName: <span class="function"><span class="keyword">function</span> (<span class="params">rootPath, filePath</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> fileTypes = <span class="regexp">/\.md$/</span>; <span class="comment">//只匹配以md结尾的文件</span></span><br><span class="line">    <span class="keyword">let</span> fileNames = [];</span><br><span class="line"></span><br><span class="line">    fs.readdirSync(rootPath + filePath).forEach(<span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> tempFilePath = <span class="string">""</span>;</span><br><span class="line">      <span class="keyword">let</span> generateArr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"></span><br><span class="line">      fullPath = rootPath + filePath + <span class="string">"/"</span> + file;</span><br><span class="line">      <span class="comment">//异步获取文件状态</span></span><br><span class="line">      <span class="keyword">let</span> fileInfo = fs.statSync(fullPath);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (fileInfo.isFile() &amp;&amp; fileTypes.test(file) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//剔除README.md</span></span><br><span class="line">        <span class="keyword">if</span> (file !== <span class="string">"README.md"</span>) &#123;</span><br><span class="line">          file = file.replace(<span class="string">".md"</span>, <span class="string">""</span>);</span><br><span class="line">          tempFilePath = filePath + <span class="string">"/"</span> + file;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        generateArr.push(tempFilePath, file);</span><br><span class="line">        fileNames.push(generateArr); <span class="comment">// 构造二维数组</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    fileNames.sort(); <span class="comment">// 排序</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fileNames;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = fileHelper;</span><br></pre></td></tr></table></figure><p>再在 utils 下新增一个 help.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fileHelper = <span class="built_in">require</span>(<span class="string">"./fileHelper"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isString = <span class="built_in">Object</span>.prototype.toString;</span><br><span class="line"><span class="keyword">const</span> isArray = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> isString.call(arr) === <span class="string">"[object Array]"</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isObject = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> isString.call(arr) === <span class="string">"[object Object]"</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> helper = &#123;</span><br><span class="line">  genSidebar: <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    title,</span></span></span><br><span class="line"><span class="function"><span class="params">    children = [],</span></span></span><br><span class="line"><span class="function"><span class="params">    collapsable = true,</span></span></span><br><span class="line"><span class="function"><span class="params">    sidebarDepth = <span class="number">1</span></span></span></span><br><span class="line"><span class="function"><span class="params">  </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">    <span class="keyword">let</span> genData = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (children &amp;&amp; isArray(children[<span class="number">0</span>]) &amp;&amp; isObject(children[<span class="number">0</span>][<span class="number">0</span>])) &#123;</span><br><span class="line">      <span class="keyword">let</span> tempArr = [];</span><br><span class="line"></span><br><span class="line">      children.map(<span class="function">(<span class="params">d</span>) =&gt;</span> &#123;</span><br><span class="line">        tempArr.push(d[<span class="number">0</span>]);</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      genData = tempArr;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      genData = children;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    arr.push(&#123;</span><br><span class="line">      title,</span><br><span class="line">      children: genData,</span><br><span class="line">      collapsable,</span><br><span class="line">      sidebarDepth,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;,</span><br><span class="line">  generateArr: <span class="function"><span class="keyword">function</span> (<span class="params">arr, rootpath</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">let</span> tempArr = [];</span><br><span class="line"></span><br><span class="line">    arr.map(<span class="function">(<span class="params">d, i</span>) =&gt;</span> &#123;</span><br><span class="line">      tempArr.push(</span><br><span class="line">        that.genSidebar(</span><br><span class="line">          d.title,</span><br><span class="line">          fileHelper.getFileName(rootpath, d.path),</span><br><span class="line">          d.collapsable,</span><br><span class="line">          d.sidebarDepth || <span class="number">1</span></span><br><span class="line">        )</span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tempArr;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = helper;</span><br></pre></td></tr></table></figure><p>再在 docs 文件夹下新增一个 fileData 文件夹以及在 fileData 内创建 sidebarData.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构建这样的数据类型</span></span><br><span class="line"><span class="keyword">const</span> sidebarData = &#123;</span><br><span class="line">  enFileData: [</span><br><span class="line">    &#123;</span><br><span class="line">      title: <span class="string">"DataStructureTransformation"</span>,</span><br><span class="line">      path: <span class="string">"/en/javascript/DataStructureTransformation"</span>,</span><br><span class="line">      collapsable: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      title: <span class="string">"eventHandler"</span>,</span><br><span class="line">      path: <span class="string">"/en/javascript/eventHandler"</span>,</span><br><span class="line">      collapsable: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      title: <span class="string">"basic"</span>,</span><br><span class="line">      path: <span class="string">"/en/javascript/basic"</span>,</span><br><span class="line">      collapsable: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      title: <span class="string">"dataProcessing"</span>,</span><br><span class="line">      path: <span class="string">"/en/javascript/dataProcessing"</span>,</span><br><span class="line">      collapsable: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  zhFileData: [</span><br><span class="line">    &#123;</span><br><span class="line">      title: <span class="string">"数据结构转换"</span>,</span><br><span class="line">      path: <span class="string">"/javascript/DataStructureTransformation"</span>,</span><br><span class="line">      collapsable: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      title: <span class="string">"事件处理相关"</span>,</span><br><span class="line">      path: <span class="string">"/javascript/eventHandler"</span>,</span><br><span class="line">      collapsable: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      title: <span class="string">"基础类"</span>,</span><br><span class="line">      path: <span class="string">"/javascript/basic"</span>,</span><br><span class="line">      collapsable: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      title: <span class="string">"数据处理"</span>,</span><br><span class="line">      path: <span class="string">"/javascript/dataProcessing"</span>,</span><br><span class="line">      collapsable: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = sidebarData;</span><br></pre></td></tr></table></figure><p>最后修改 config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="keyword">const</span> rootpath = path.dirname(__dirname); <span class="comment">//执行一次dirname将目录定位到docs目录</span></span><br><span class="line"><span class="comment">// const util = require("util");</span></span><br><span class="line"><span class="keyword">const</span> sideBarData = <span class="built_in">require</span>(<span class="string">"./fileData/sideBarData"</span>);</span><br><span class="line"><span class="keyword">const</span> helper = <span class="built_in">require</span>(<span class="string">"./utils/helper"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> en = helper.genSidebar(</span><br><span class="line">  <span class="string">"Javascript"</span>,</span><br><span class="line">  helper.generateArr(sideBarData.enFileData, rootpath),</span><br><span class="line">  <span class="literal">true</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> zh = helper.genSidebar(</span><br><span class="line">  <span class="string">"Javascript"</span>,</span><br><span class="line">  helper.generateArr(sideBarData.zhFileData, rootpath),</span><br><span class="line">  <span class="literal">true</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(util.inspect(en, &#123; showHidden: false, depth: null, colors: true &#125;)); // alternative shortcutconsole.log(util.inspect(myObject, false, null, true /* enable colors */))</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  base: <span class="string">"/interviewExercise/"</span>,</span><br><span class="line">  dest: <span class="string">"docs/.vuepress/dist"</span>,</span><br><span class="line"></span><br><span class="line">  description: <span class="string">"面试题"</span>,</span><br><span class="line">  locales: &#123;</span><br><span class="line">    <span class="comment">// 键名是该语言所属的子路径</span></span><br><span class="line">    <span class="comment">// 作为特例，默认语言可以使用 '/' 作为其路径。</span></span><br><span class="line">    <span class="comment">// "/": &#123;</span></span><br><span class="line">    <span class="comment">//   lang: "en-US", // 将会被设置为 &lt;html&gt; 的 lang 属性</span></span><br><span class="line">    <span class="comment">//   title: "InterviewExercise",</span></span><br><span class="line">    <span class="comment">//   description: "Vue-powered Static Site Generator",</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"/en/"</span>: &#123;</span><br><span class="line">      lang: <span class="string">"en-US"</span>, <span class="comment">// 将会被设置为 &lt;html&gt; 的 lang 属性</span></span><br><span class="line">      title: <span class="string">"InterviewExercise"</span>,</span><br><span class="line">      description: <span class="string">"Vue-powered Static Site Generator"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"/"</span>: &#123;</span><br><span class="line">      lang: <span class="string">"zh-CN"</span>,</span><br><span class="line">      title: <span class="string">"练习题"</span>,</span><br><span class="line">      description: <span class="string">"Vue 驱动的静态网站生成器"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  themeConfig: &#123;</span><br><span class="line">    editLinks: <span class="literal">false</span>,</span><br><span class="line">    docsDir: <span class="string">"docs"</span>,</span><br><span class="line">    nav: [],</span><br><span class="line">    locales: &#123;</span><br><span class="line">      <span class="string">"/en/"</span>: &#123;</span><br><span class="line">        selectText: <span class="string">"选择语言"</span>,</span><br><span class="line">        label: <span class="string">"English"</span>,</span><br><span class="line">        ariaLabel: <span class="string">"Languages"</span>,</span><br><span class="line">        editLinkText: <span class="string">"Edit this page on GitHub"</span>,</span><br><span class="line">        <span class="comment">// nav: [&#123; text: "Nested", link: "/nested/", ariaLabel: "Nested" &#125;],</span></span><br><span class="line">        sidebar: &#123;</span><br><span class="line">          <span class="string">"/en/"</span>: en,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"/"</span>: &#123;</span><br><span class="line">        <span class="comment">// 多语言下拉菜单的标题</span></span><br><span class="line">        selectText: <span class="string">"Languages"</span>,</span><br><span class="line">        <span class="comment">// 该语言在下拉菜单中的标签</span></span><br><span class="line">        label: <span class="string">"简体中文"</span>,</span><br><span class="line">        <span class="comment">// 编辑链接文字</span></span><br><span class="line">        editLinkText: <span class="string">"在 GitHub 上编辑此页"</span>,</span><br><span class="line">        <span class="comment">// Service Worker 的配置</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当前 locale 的 algolia docsearch 选项</span></span><br><span class="line">        <span class="comment">// nav: [&#123; text: "嵌套", link: "/zh/nested/" &#125;],</span></span><br><span class="line">        sidebar: &#123;</span><br><span class="line">          <span class="string">"/"</span>: zh,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这样通过</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> en = helper.genSidebar(</span><br><span class="line">  <span class="string">"Javascript"</span>,</span><br><span class="line">  helper.generateArr(sideBarData.enFileData, rootpath),</span><br><span class="line">  <span class="literal">true</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> zh = helper.genSidebar(</span><br><span class="line">  <span class="string">"Javascript"</span>,</span><br><span class="line">  helper.generateArr(sideBarData.zhFileData, rootpath),</span><br><span class="line">  <span class="literal">true</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>就能不用再手动目录了，新增一个文件夹就可以去 sidebarData.js 内新增侧边栏标题和文件路径就行了</p><p>以上就是暂时对 vuepress 的浅浅尝试</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天试了下 VuePress 这个静态网页生成工具&lt;br&gt;制作了一个面试题集(会陆续增加功能，以及习题的增加)&lt;br&gt;&lt;img src=&quot;https://i.loli.net/2020/04/18/ZsvwVYWeJXAa8Mk.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="静态博客" scheme="https://ShowPenZ.github.io/categories/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Vue" scheme="https://ShowPenZ.github.io/tags/Vue/"/>
    
      <category term="Vuepress" scheme="https://ShowPenZ.github.io/tags/Vuepress/"/>
    
  </entry>
  
  <entry>
    <title>前端代理解决跨越问题</title>
    <link href="https://showpenz.github.io/2020/03/26/%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%90%86%E8%A7%A3%E5%86%B3%E8%B7%A8%E8%B6%8A%E9%97%AE%E9%A2%98/"/>
    <id>https://showpenz.github.io/2020/03/26/%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%90%86%E8%A7%A3%E5%86%B3%E8%B7%A8%E8%B6%8A%E9%97%AE%E9%A2%98/</id>
    <published>2020-03-26T09:45:49.000Z</published>
    <updated>2020-08-17T02:02:33.332Z</updated>
    
    <content type="html"><![CDATA[<p>在我的许多实际工程中，我并没有使用什么所谓前端代理去解决跨域问题，都是让运维大佬给我在配置里增加一下我的本机 ip。</p><p>今天乘着结束一个小项目的时候把玩下前端代理</p><ol><li><p>首先我是用的技术栈是 react+antd+dva+umi,其中 umi 已经使用了 webpack-dev-server 插件 所以可以直接进行配置。<br>如果你用的也是 umijs 这个 react 应用框架 可以直接使用如下配置</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">proxy: &#123;</span><br><span class="line">    <span class="string">'/u/v1/'</span>: &#123;</span><br><span class="line">      target: <span class="string">'https://demo.xxx.com/'</span>,</span><br><span class="line">      changeOrigin: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// pathRewrite: &#123; '^/u/v1/': '' &#125;,</span></span><br><span class="line">      secure: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'/f/v1/'</span>: &#123;</span><br><span class="line">      target: <span class="string">'https://demo.xxx.com/'</span>,</span><br><span class="line">      changeOrigin: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// pathRewrite: &#123; '^/u/v1/': '' &#125;,</span></span><br><span class="line">      secure: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// /u/v1/ 用作匹配API地址 例如你要请求的API地址 是https://demo.xxx.com/u/v1/getUserInfo 含有/u/v1/这个字符串</span></span><br><span class="line">  <span class="comment">// 就会在发起请求时,将请求代理到本机地址====&gt;https://localHost:8080/u/v1/getUserInfo</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// target 代理的API地址，就是需要跨域的API地址。</span></span><br><span class="line"> <span class="comment">// 地址可以是域名,如：https://demo.xxx.com/</span></span><br><span class="line"> <span class="comment">// 也可以是IP地址：http://127.0.0.1:3000</span></span><br><span class="line"> <span class="comment">// 如果是域名需要额外添加一个参数changeOrigin: true，否则会代理失败。</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//changeOrigin: true, 这个参数可以让target参数是域名。</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// secure: false,不检查安全问题。</span></span><br><span class="line"> <span class="comment">// 设置后，可以接受运行在 HTTPS 上，可以使用无效证书的后端服务器</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// API地址 为https://demo.xxx.com/u/v1/getUserInfo</span></span><br><span class="line"> <span class="comment">// 设置pathRewrite: &#123;'^/u/v1/' : ''&#125;,后，</span></span><br><span class="line"> <span class="comment">// 最终本地代理访问的路径：https://localHost:8080/getUserInfo，</span></span><br><span class="line"> <span class="comment">// 这个参数的目的是给代理命名后，在访问时把命名删除掉。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> 这个在config.js或者umirc.js 中配置好后即可快速检验下</span><br><span class="line"></span><br><span class="line"> 之后将api地址例如 BASE_HOST:http:<span class="comment">//192.168.2.240 改为 BASE_HOST:''</span></span><br><span class="line"></span><br><span class="line"> 默认你引入了各种请求工具 如axios fetch之类的</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设 我的想跨域的地址为 https://demo.xxx.com/u/v1/getUserInfo</span></span><br><span class="line"><span class="comment">// 只需填入/u/v1/getUserInfo</span></span><br><span class="line"></span><br><span class="line"> axios(&#123;</span><br><span class="line">  method: <span class="string">'get'</span>,</span><br><span class="line">  url: <span class="string">'/u/v1/getUserInfo'</span>, <span class="comment">//填入你想跨域的api地址</span></span><br><span class="line"> &#125;).then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure></li><li><p>没有使用 umi 也是一样的<br>首先确保<br>(1)、需要使用插件：webpack-dev-server。<br>(2)、webpack-dev-server 使用的是 http-proxy-middleware 来实现跨域代理的。<br>(3). webpack 版本 &gt;= 3.0</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="string">"/u/v1/"</span>: &#123;</span><br><span class="line">        target: <span class="string">"https://demo.xxx.com/"</span>,</span><br><span class="line">        changeOrigin: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// pathRewrite: &#123; '^/u/v1/': '' &#125;,</span></span><br><span class="line">        secure: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"/f/v1/"</span>: &#123;</span><br><span class="line">        target: <span class="string">"https://demo.xxx.com/"</span>,</span><br><span class="line">        changeOrigin: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// pathRewrite: &#123; '^/u/v1/': '' &#125;,</span></span><br><span class="line">        secure: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 还有需要匹配的就继续写...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在我的许多实际工程中，我并没有使用什么所谓前端代理去解决跨域问题，都是让运维大佬给我在配置里增加一下我的本机 ip。&lt;/p&gt;
&lt;p&gt;今天乘着结束一个小项目的时候把玩下前端代理&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;首先我是用的技术栈是 react+antd+dva+umi,其中 umi 已经使用了 webpack-dev-server 插件 所以可以直接进行配置。&lt;br&gt;如果你用的也是 umijs 这个 react 应用框架 可以直接使用如下配置&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://ShowPenZ.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="umi" scheme="https://ShowPenZ.github.io/tags/umi/"/>
    
      <category term="proxy" scheme="https://ShowPenZ.github.io/tags/proxy/"/>
    
      <category term="webpack" scheme="https://ShowPenZ.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>react componentDidMount 使用的一些想法</title>
    <link href="https://showpenz.github.io/2020/03/25/react-componentDidMount-%E4%BD%BF%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E6%83%B3%E6%B3%95/"/>
    <id>https://showpenz.github.io/2020/03/25/react-componentDidMount-%E4%BD%BF%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E6%83%B3%E6%B3%95/</id>
    <published>2020-03-25T09:42:48.000Z</published>
    <updated>2020-03-25T10:23:22.267Z</updated>
    
    <content type="html"><![CDATA[<p>React componentDidMount 中尽量别使用 setState 方法</p><p>在 componentDidMount()中，你可以立即调用 setState()。它将会触发一次额外的渲染，但是它将在浏览器刷新屏幕之前发生。这保证了在此情况下即使 render()将会调用两次，用户也不会看到中间状态。谨慎使用这一模式，因为它常导致性能问题。在大多数情况下，你可以 在 constructor()中使用赋值初始状态来代替。然而，有些情况下必须这样，比如像模态框和工具提示框。这时，你需要先测量这些 DOM 节点，才能渲染依赖尺寸或者位置的某些东西。</p><p>componentDidMount 本身处于一次更新中，我们又调用了一次 setState，就会在未来再进行一次 render，造成不必要的性能浪费，大多数情况可以设置初始值来搞定。当然在componentDidMount我们可以调用接口，再回调中去修改state。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;React componentDidMount 中尽量别使用 setState 方法&lt;/p&gt;
&lt;p&gt;在 componentDidMount()中，你可以立即调用 setState()。它将会触发一次额外的渲染，但是它将在浏览器刷新屏幕之前发生。这保证了在此情况下即使 ren
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://ShowPenZ.github.io/categories/javascript/"/>
    
    
      <category term="react" scheme="https://ShowPenZ.github.io/tags/react/"/>
    
      <category term="代码优化" scheme="https://ShowPenZ.github.io/tags/%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>js 浮点数运算--使用decimal.js</title>
    <link href="https://showpenz.github.io/2020/03/24/js-%E6%B5%AE%E7%82%B9%E6%95%B0%E8%BF%90%E7%AE%97-%E4%BD%BF%E7%94%A8decimal-js/"/>
    <id>https://showpenz.github.io/2020/03/24/js-%E6%B5%AE%E7%82%B9%E6%95%B0%E8%BF%90%E7%AE%97-%E4%BD%BF%E7%94%A8decimal-js/</id>
    <published>2020-03-24T03:21:19.000Z</published>
    <updated>2020-06-16T06:32:29.640Z</updated>
    
    <content type="html"><![CDATA[<p>为了避免 js 运算出现如<img src="https://i.loli.net/2020/04/26/lRPemr91E6FIvqW.png" alt="image.png"> 这种情况<br>推荐使用 decimal.js 这个库来帮助我们处理精度问题</p><p>1.首先引入<br>(1). 标签引入方式 <code>&lt;script src="<a href="https://cdn.bootcss.com/decimal.js/10.2.0/decimal.js&quot;&gt;" target="_blank" rel="noopener">https://cdn.bootcss.com/decimal.js/10.2.0/decimal.js&quot;&gt;</a></code><br>(2). <code>npm intall decimal.js or yarn add decimal.js</code></p><p>2.使用方式</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例如 加法</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">0.1</span>,</span><br><span class="line">  b = <span class="number">0.2</span>;</span><br><span class="line"><span class="keyword">let</span> c;</span><br><span class="line"></span><br><span class="line">c = <span class="keyword">new</span> Decimal(a).add(<span class="keyword">new</span> Decimal(b)).toNumber(); <span class="comment">// 0.3</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/24/7nASorUbHaiI1NO.png" alt="image.png"></p><p>3.简易封装</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">"lodash"</span>; <span class="comment">// const _ = require("lodash");</span></span><br><span class="line"><span class="keyword">import</span> Decimal <span class="keyword">from</span> <span class="string">"decimal.js"</span>; <span class="comment">// const _ = require("lodash");</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> BLANK_CHAR = <span class="string">"-"</span>;</span><br><span class="line"><span class="keyword">const</span> isBlankChar = <span class="function"><span class="params">value</span> =&gt;</span> value === BLANK_CHAR;</span><br><span class="line"><span class="keyword">const</span> isNumericString = <span class="function"><span class="params">value</span> =&gt;</span></span><br><span class="line">  /^[-+]?([<span class="number">0</span><span class="number">-9</span>]+(\.[<span class="number">0</span><span class="number">-9</span>]*)?|\.[<span class="number">0</span><span class="number">-9</span>]+)([eE][-+]?[<span class="number">0</span><span class="number">-9</span>]+)?$/.test(value);</span><br><span class="line"><span class="keyword">const</span> isNumericValue = <span class="function"><span class="params">value</span> =&gt;</span></span><br><span class="line">  (hasString(value) &amp;&amp; isNumericString(value)) || hasNumber(value);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串判断</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasString</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> _.isString(value) &amp;&amp; !_.isEmpty(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数字判断</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasNumber</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> _.isNumber(value) &amp;&amp; _.isFinite(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNumberValue</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (isBlankChar(value)) &#123;</span><br><span class="line">    <span class="keyword">return</span> BLANK_CHAR;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> isNumericValue(value) ? value : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 科里化处理参数传递</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateOperationFnUseDecimalJs</span>(<span class="params">op</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isBlankChar(x) || isBlankChar(y)) &#123;</span><br><span class="line">      <span class="keyword">return</span> BLANK_CHAR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (op === <span class="string">"div"</span> &amp;&amp; getNumberValue(y) === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> isNumericValue(x) &amp;&amp; isNumericValue(y)</span><br><span class="line">      ? <span class="keyword">new</span> Decimal(x)[op](<span class="keyword">new</span> Decimal(y)).toFixed()</span><br><span class="line">      : <span class="number">0</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> DecimalPlus = generateOperationFnUseDecimalJs(<span class="string">"plus"</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> DecimalMinus = generateOperationFnUseDecimalJs(<span class="string">"minus"</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> DecimalMultiply = generateOperationFnUseDecimalJs(<span class="string">"times"</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> DecimalDivide = generateOperationFnUseDecimalJs(<span class="string">"div"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用方法</span></span><br><span class="line">DecimalPlus(<span class="number">0.1</span>, <span class="number">0.2</span>); <span class="comment">//加法 0.3</span></span><br><span class="line">DecimalMinus(<span class="number">0.2</span>, <span class="number">0.1</span>); <span class="comment">//减法 0.1</span></span><br><span class="line">DecimalMultiply(<span class="number">0.1</span>, <span class="number">0.3</span>); <span class="comment">//乘法 0.03</span></span><br><span class="line">DecimalDivide(<span class="number">0.3</span>, <span class="number">0.1</span>); <span class="comment">//除法 3</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了避免 js 运算出现如&lt;img src=&quot;https://i.loli.net/2020/04/26/lRPemr91E6FIvqW.png&quot; alt=&quot;image.png&quot;&gt; 这种情况&lt;br&gt;推荐使用 decimal.js 这个库来帮助我们处理精度问题&lt;/p&gt;
&lt;p&gt;1.首先引入&lt;br&gt;(1). 标签引入方式 &lt;code&gt;&amp;lt;script src=&quot;&lt;a href=&quot;https://cdn.bootcss.com/decimal.js/10.2.0/decimal.js&amp;quot;&amp;gt;&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://cdn.bootcss.com/decimal.js/10.2.0/decimal.js&amp;quot;&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br&gt;(2). &lt;code&gt;npm intall decimal.js or yarn add decimal.js&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;2.使用方式&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://ShowPenZ.github.io/categories/js/"/>
    
    
      <category term="js精度处理" scheme="https://ShowPenZ.github.io/tags/js%E7%B2%BE%E5%BA%A6%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>区块链价值</title>
    <link href="https://showpenz.github.io/2020/01/17/%E5%8C%BA%E5%9D%97%E9%93%BE%E4%BB%B7%E5%80%BC/"/>
    <id>https://showpenz.github.io/2020/01/17/%E5%8C%BA%E5%9D%97%E9%93%BE%E4%BB%B7%E5%80%BC/</id>
    <published>2020-01-17T10:01:05.000Z</published>
    <updated>2020-01-18T01:54:56.086Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p><font color="red">区块链是信任的机器，也是一个价值互联网</font></p><br><p>区块链用一套数学算法确保了两个陌生人不借助于第三方的情况下，把一笔交易，不管是金融的交易或者是商品的交易完成。这就是区块链最核心，最本质的东西。</p><br></li><li><p><font color="red">从三个层次了解区块链</font></p><br><ol><li><p>第一个层次，区块链最底层的一个层次，实际上是分布式网络，区块链是架构在分布式网络技术之上的一个应用。</p><br></li><li><p>第二个层次，在分布式网络基础上，如果我们给它加上一层东西，加一层密码学的账本体系，这个分布式网络就变成了分布式账本</p><br></li><li><p>第三个层次，公有区块链或者叫比特币区块链</p><a id="more"></a><br></li></ol></li><li><p><font color="red">从技术发展来看区块链</font></p><br><ol><li>区块链 1.0 即 2009 年一月份上线的比特币区块链。它最主要的，最核心的贡献就是建立了一套密码学的账本，提供了一套新的记账方法，但它有个欠缺，没有人可以在比特币区块链上修改任何规则，你只能用它</li><li>区块链 2.0 即 2015 年有一个新的公有区块链，叫以太坊，与区块链 1.0 最大的不同就是别人可以在以太坊区块链的基础上做其他的应用开发，也就是你可以用它作为底层做你的事情</li><li>区块链 3.0 2018 年开始进入区块链 3.0 但没有其他技术上大的突破。3.0 要解决的就是在性能上能支持大规模的商业应用<br></li></ol></li><li><p><font color="red">从商业角度看待区块链</font></p><br><p>有人说区块链是真正的共享经济，因为它没有股东和你分利润，任何一个人加入这个网络，就可以得到相应的那份价值，均分给所有的使用者，这才是真正的共享经济。</p><br><p>比特币区块链是一个分布式商业的最伟大的实验，所有的产权是开源的，所有的组织机构都是非盈利的，没有股东，没有董事会，没有管理层，什么都没有但它运行了十年时间，每秒都在发生着交易，汇兑，支付，没有出现过坏账，系统没有出现过宕机，任何中心化的系统，即使是金融系统，每年一定会出现系统宕机</p><br></li><li><p><font color="red">迄今为止，我们所建立的合作原则，大致来讲，逃不出过去轴心文明的思想范畴。</font></p><br><p>区块链的伟大意义就在这里，在没有区块链之前，不管我们用互联网做多少创新，我们发现它的思想底座并没有超越。所以我们今天的行业规则，社会伦理，以及政治法则，并没有超越 2500 年前的先哲。</p><br><p>区块链要在这个意义上，让世界重新启动。要重新理解合作，重新把合作建立在一个坚实的技术驱动之上，这是一个非常伟大的创新，需要非常伟大的勇气。</p><br></li><li><p><font color="red">区块链就是真正改变信任的机制，区块链打的就是这样一个巨大无比的赌：陌生人在互联网上能不能一次就达成信任？</font></p><br><p>在火车站模式下如何保证陌生人一次就建立信任？这不是要通过道德说教，而是通过漫长的塑造才有可能达成。今天区块链让我们已经及其接近这个社会底层的构造，陌生人的一次信任，就如同乌托邦。</p><br><p>在这种情形下，区块链正在让这个乌托邦建立在非常坚实的基础上。更重要的一点是：区块链把财富生产和财富分配平衡地放在了一个巨大账本之中。这个巨大的账本对所有参与区块链的人，是公开透明的，同时又是加密保护隐私的。所以财富的生产和分配，同时进行，这是它的伟大意义。</p><br></li><li><p><font color="red">互联网的长项恰恰也是它的弱项，因为信息的传播不需要代价，篡改数据非常容易</font></p><br><p>当进入价值互联网时，区块链可能会形成这样一个底层的技术：一方面它保证了想互联网一样在全球范围内高速度的传播，另一方面又杜绝了拷贝，粘贴问题，所以区块链会成为价值互联网的基础。</p><br></li><li><p><font color="red">区块链三问难题</font></p><br><p>第一，去中心化。区块链系统本省是一个去中心化的，去中心化就是希望参与到网络空间的参与者或者系统构建者，不光是用户，而是构建这个系统的人，节点尽可能的分散，这是去中心化特征。</p><br><p>第二，它的性能，性能通常的衡量标准是每秒完成的交易数；</p><br><p>第三，安全，区块链是一种相对安全的系统，这个安全怎么定义？就是以节点为单位，抵御更多攻击者。</p><br><p>去中心化，性能和安全构成一个三角形，这个三角形是相互制约的</p><br></li><li><p><font color="red">区块链作用案例说明</font></p><br><p>区块链到底有什么作用?区块链到底是什么东西?或者说它有什么用?</p><br><p>我们讲两个真实的应用场景。区块这个东西实际上是个记录,你可以理解成你在笔记本上账本上写下一个记录。当任何一个东西产生的时候,实体也好、虚拟的也好,它就同时产生一个记录,你要把它理解成你自己就好了。</p><br><p>你生下来的时候身上就有一个特定的 DNA,这个是不能改的,哪怕你兄弟的 DNA 跟你都不一样,你这一辈子带着。这就是你唯一一个标识,这就是区块,你将来比如做这么一瓶水,做出来以后它就对应着这么一个区块,有一个自己的 DNA。</p><br><p>什么是链呢?就是说它将来所有的行踪、所有中间的交易、整个在生命周期各个过程的一个描述。比如我们说比特币从张三给李四,这个交易过程就要写上一笔,某年月日这个比特币是什么,对应一个随机的号码,从张三到李四手里,还要交到所有的矿机那,通知全世界它的所有权发生转换了。</p><br><p>说到这里,你就想到它有一个很好的用处,就是能够跟踪。比如说这瓶水将来从什么地方来,最后卖到我手里。这件事很重要,现在我们讲食品安全、药品安全,中间流通渠道要把住,中间谁要把箱子拿开,换两瓶假的进去,你是没法检测的,因为流程没法跟踪。以现有的技术跟踪它,实在是太困难了。</p><br><p>区块链将来有这么一个好处,这个药品安全还是很重要的,阿里巴巴的高管们说,中国路边小药房里头没用的药、过期的药,根本就是安慰剂淀粉的药非常非常多,这个比例说出来吓死你。这不是哪家房能解决的间题,因为现在的技术根本解决不了,区块链是一个可能的解决方案。</p><br><p>一个简单的方法,这瓶药生产出来的时候,既然有一个区块,我就产生一个对应的区块链给它。它有一个对应的随机码,这个事一旦产生了,在全世界就不能更改了。</p><br><p>它下了生产线,比如说要装箱,先装瓶,这一瓶药就有一个区块链。装箱,区块链还有一个好处,几个区块链可以合并成一个新的,这个箱子本身有一个。我装一个 RFID 码,走出车间,进入仓库的时候,它就过一道门,又有一个记录。</p><br><p>这个门到仓库以后,谁如果把它打开了,换了一瓶药,这个区块就不对了,因为每瓶药上自己有一个区块。然后进入到货车,小货车送到大货车,然后到顺丰快递,通过飞机运到一个新的城市,放到一个集装箱里,最后形成一个大的商品往下传。</p><br><p>甚至他可以验证这瓶药不仅是哪个厂生产的,用了哪种原材料,这个源头是可以溯的。有了这个方法就可以从根本上解决问题。</p><br><p>你就会问,你描述的这个场景是否能成功? 检测一瓶药或者一瓶水由于成本问题,可能做起来有待一些时日。</p><br><p>大个头的比较贵的商品有可能能成,所以说现在因为只是一个成本问题,贵的商品已经做到了,以后你买的一瓶药,这个都可以完全跟踪得很清楚。</p><br><p>所以这是区块链真正有用的用处,所以很多公司在开发区块链一些底层技术,也是看到了这些商业前景。</p><br><p>再有一个,区块链本身是一个智能的合约。</p><br></li><li><p><font color="red">区块链在时空中处于什么位置？</font></p><br><p>第一代互联网的时候,最牛的公司是谁?是微软和英特尔,剩下的公司基本上都是打酱油的。用什么?你用英特尔的芯片, Windows 的操作系统。</p><br><p>第二代就是手机互联网,只要手机放在身边,你就随时被挂在网上了。现在你自己的习惯已经改了,两三分钟就要看一下微信。大家说加下微信号吧,不是说把这两个手机连起来,而是把这两个人连起来。</p><br><p>第三代大的玩家也变了,最收益的是谁呢?一个是谷歌、安卓,再个就是像高通、三星这些公司,或者说它背后实际上生产处理器的公司就是一家,英国的 ARM。</p><br><p>第四代出现了,前三代都有一个间题,巨头控制着,你越来越不自由了。第四代能不能换一个玩法?你有传感器也好,你有操作系统也好,最好数据这件事我能不能掌握,传输的时候也不要都是通过你一家网络、一家服务器来做,我能不能分散一下?</p><br><p>所以你要把区块链在时间的节点上来看,它处在这样一个位置,就是说从第三代以后可能进入到第四代,所以这是它的重要性所在。</p><br></li><li><p><font color="red">区块链=生产关系？</font></p><br><p>区块链是生产关系,怎么理解这件事?我们说生产关系主要有三个要素,第一,生产的钱和材料,生产的工具这些原材料,这些生产要素从哪来?归谁?</p><br><p>第一代的生产关系,我们先抛开马克思这一套不说,实际上归地主也好、资本家也好、企业主也好,随你怎么叫。</p><br><p>他们提供生产资料以后,你就替他干活。互联网过去是什么呢?过去大公司,为什么你要把数据存在 Facebook 上,你为什么存在百度?</p><br><p>因为你没有生产资料,它不归你。你不存在他们那你存在哪?对于这些公司来讲也一样,你为什么要去那上班?</p><br><p>你不到那上班没人给你工资,生产资料在人家那。既然在人家那,人家说了就算数,这是第一个阶段</p><br><p>第二代是以硅谷为代表的科技公司的新玩法,现在中国的创业公司都在学。就是说我给你一些股权,每个人都谁小老板了,虽然你才万分之一的股票，你老板 80%的股票，没关系，反正你有股权。</p><br><p>滴滴怎么起来的?你说风险投资给它投的,没有司机愿意接单,没有人去打车,起不来的。</p><br><p>其实前一千个愿意接单的司机和前一万个愿意打车的人,其实对滴滴的起步贡献很大。当时,这种公司多了去了,凭什么它起来了?就是因为有前面这些人在支持它</p><br><p>但是滴滴起来以后,它的员工可能也分到期权,也挣到钱了,你要是前一千个人,不管是出租车司机也好,还是乘客也好,你是一分钱分不着的。</p><br><p>当然你说我白打了几次车,这点小头跟近一千亿的市值是比不了的你是半分钱没有的,虽然你是前面的贡献者。因为什么呢?没法记录你的贡献,你凭什么一千个一定比一万个多,这贡献没法算,而且你打了多少次车，改给你多少奖励，也没法算，因为没发跟踪你的表现。</p><br><p>区块链出来以后，这个问题就解决了。就是或每一个人的贡献，每个人的行为，你打一次车就是一个智能合约，这个事情是可以跟踪的。</p><br><p>区块链是一个生产关系，重新定义了人和人之间的关系，相比来说，它未必是把效率提搞多少。</p><br></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;font color=&quot;red&quot;&gt;区块链是信任的机器，也是一个价值互联网&lt;/font&gt;&lt;/p&gt;
&lt;br&gt;

&lt;p&gt;区块链用一套数学算法确保了两个陌生人不借助于第三方的情况下，把一笔交易，不管是金融的交易或者是商品的交易完成。这就是区块链最核心，最本质的东西。&lt;/p&gt;
&lt;br&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;font color=&quot;red&quot;&gt;从三个层次了解区块链&lt;/font&gt;&lt;/p&gt;
&lt;br&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;第一个层次，区块链最底层的一个层次，实际上是分布式网络，区块链是架构在分布式网络技术之上的一个应用。&lt;/p&gt;
&lt;br&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第二个层次，在分布式网络基础上，如果我们给它加上一层东西，加一层密码学的账本体系，这个分布式网络就变成了分布式账本&lt;/p&gt;
&lt;br&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第三个层次，公有区块链或者叫比特币区块链&lt;/p&gt;
    
    </summary>
    
    
      <category term="区块链" scheme="https://ShowPenZ.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="文章" scheme="https://ShowPenZ.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="区块链" scheme="https://ShowPenZ.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="心得" scheme="https://ShowPenZ.github.io/tags/%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title>比特币痛点</title>
    <link href="https://showpenz.github.io/2020/01/17/%E6%AF%94%E7%89%B9%E5%B8%81%E7%97%9B%E7%82%B9/"/>
    <id>https://showpenz.github.io/2020/01/17/%E6%AF%94%E7%89%B9%E5%B8%81%E7%97%9B%E7%82%B9/</id>
    <published>2020-01-17T02:46:50.000Z</published>
    <updated>2020-01-17T03:37:13.888Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p><font color="red">比特币区块链难以建设一个去中心，民主平等的社会。</font><br>底层代码的核心团队与参与挖矿和运行的主要力量能够发挥更大的影响力。<br>受计算机运算能力的影响，比特币的挖矿和获得，并不是想宣传额那样人人都有平等的机会，竞争的结果，使得挖矿获得比特币的机会越来越集中到少数算力强大的矿池或者节点上。</p><br></li><li><p><font color="red">比特币区块链’去信任’，’去中介’的点对点交易是有严格条件的。</font><br>即所有的人都参与到同一个比特币区块链网络平台，平台上运行的只能是比特币，而不能是比特币以外的其他资产或价值，比特币从其生产的源头就得到网络系统严密的验证和记录，难以造假或者篡改。因此，比特币需要在一个’干净’，基于比特币区块链网络平台的环境</p><br><a id="more"></a></li><li><p><font color="red">比特币区块链只是比特币产生和汇划的的封闭系统，实际功能有限，现实世界的资产或者价值很难推送到这一体系上运行。</font><br>要发挥比特币体系的功能，就必须将比特币兑换成法币，并将比特币体系作为现实世界资金汇划的一个过度环节或者新的中介环节。而这就需要比特币体系与现实世界实现连接，从现实世界的大环境来看，其结果不是去中介，而是增加了中介。</p><br></li><li><p><font color="red">比特币网络交易平台并不是比特币体系内在组成部分，不是去中心的。</font><br>比特币区块链体系和比特币交易体系是两个不同的概念，而现在很多人总弄混着两个概念，给了投资这收个韭菜的机会。</p><br></li><li><p><font color="red">比特币区块链体系过于强调’去中心化’，反而影响其效率，成本与监管。</font><br>比特币区块链体系要实现’去中心化’，就需要大量的外部计算机接入并共同运行。这样，加入的计算机节点越多，在比特币的挖矿与转让需要全网广播，验证，分布式处理等的难度就越大，其挖矿过程需要消耗越来越大量的能源，甚至会造成环境污染。法币外挂交易平台的处理程序复杂，效率很慢，成本很高。更重要的是，如果加入比特币体系这样一个完全抵制或规避国家监管的中间环节，法定货币的流通就可能完全失控，被恐怖分子，毒品贩子，网络黑客，金融骗子等利用。</p><br></li><li><p><font color="red">过于追求去中心化，充分的民主自由，实际上就会脱离现实。</font><br>在人类社会中必然存在个别利益与公共利益的矛盾和统一，只有在公共利益最大化的情况下才能使个别利益最大化得到根本保障。在当今世界仍然是以各个国家主权独立和自治为基础架构，国家之间相差悬殊的情况下，设想建立一个’去中心化’，无政府的网络世界和超主权的世界货币，完全摆脱现实世界国家法律的约束，去建立一个去中心化，独立于国家概念的网络平台同样是不现实的</p><br></li><li><p><font color="red">比特币难以成为真正的货币。</font><br>比特币在设计上就是模仿黄金，总量限定，而且挖矿越来越难，产量分阶段逐步减少，以消除认为过多投放的可能性，并为比特币升值创造巨大的想象空间。但高度模仿黄金设计货币体系的思路，本身就是货币设计理念上的一种倒退，是不能成立的。黄金等贵金属曾经长时间作为货币，但正因为其强烈的自然属性，使其供应量难以与经济社会发展的实际水平，特别是可交换社会财富的规模适应，容易造成日益严重的通货膨胀，或者是通货紧缩，币值剧烈波动使货币难以有效发挥价值尺度的功能，最终必然被可以进行数量调控，能够保持货币总量与可交换社会财富规模基本吻合(社会物价综合指数相对稳定)的主权货币或法币锁取代。黄金退出货币舞台是必然选择，不可能在退回去，重新成为货币</p><br></li><li><p><font color="red">网络数字币 ICO 存在更多问题</font><br>ICO 的出现影响极大，看似为区块链创业提供了新的融资方式和渠道，实际上重点是用于炒作数字货币，面向公众募集资金(而非私募)，但严重缺乏必要的规则和监管，很容易产生非常严重的金融和社会问题，甚至将区块链的发展引入歧途。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;font color=&quot;red&quot;&gt;比特币区块链难以建设一个去中心，民主平等的社会。&lt;/font&gt;&lt;br&gt;底层代码的核心团队与参与挖矿和运行的主要力量能够发挥更大的影响力。&lt;br&gt;受计算机运算能力的影响，比特币的挖矿和获得，并不是想宣传额那样人人都有平等的机会，竞争的结果，使得挖矿获得比特币的机会越来越集中到少数算力强大的矿池或者节点上。&lt;/p&gt;
&lt;br&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;font color=&quot;red&quot;&gt;比特币区块链’去信任’，’去中介’的点对点交易是有严格条件的。&lt;/font&gt;&lt;br&gt;即所有的人都参与到同一个比特币区块链网络平台，平台上运行的只能是比特币，而不能是比特币以外的其他资产或价值，比特币从其生产的源头就得到网络系统严密的验证和记录，难以造假或者篡改。因此，比特币需要在一个’干净’，基于比特币区块链网络平台的环境&lt;/p&gt;
&lt;br&gt;
    
    </summary>
    
    
      <category term="区块链" scheme="https://ShowPenZ.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="文章" scheme="https://ShowPenZ.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="区块链" scheme="https://ShowPenZ.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="心得" scheme="https://ShowPenZ.github.io/tags/%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title>区块链是什么</title>
    <link href="https://showpenz.github.io/2020/01/17/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%98%AF%E4%BB%80%E4%B9%88/"/>
    <id>https://showpenz.github.io/2020/01/17/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%98%AF%E4%BB%80%E4%B9%88/</id>
    <published>2020-01-17T02:24:35.000Z</published>
    <updated>2020-01-17T02:31:05.787Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>区块链是分布式数据储存，点对点传输，共识机制，加密算法等计算机的新型应用模式。所谓共识机制是指区块链系统中实现不同节点之间建立信任，获取权益的数学算法。<br>区块链是比特币的一个重要概念，本质上是一个去中心化的数据库。它是一串使用密码学方法相关联产生的数据块，每一个数据块中包含了一次比特币网络交易信息，用于验证其信息的有效性(防伪)和生成下一个区块，数据存储的每一个节点都会同步复制整个账本，信息透明难以篡改。</p><br></li><li><p><font color="red">凡事需要更加公平，公正，公开的企业行业，都可以用到区块链技术，都可以用使用区块链技术来改造和实现；凡事需要数据存储，保护，授权，交易的企业，都可以用到区块链技术；凡事需要社会化协作，尤其是跨境，基于计算机网络可以完成的社会化分工和协作，都可以用到区块链技术</font></p><br><a id="more"></a></li><li><p>从互联网思维到区块链思维</p><br></li><li><p>关于区块链思维三个关键点：</p><p>1.技术架构的可靠性。</p><p>2.分配过程的公平性。</p><p>3.成员行为的规范性。</p><br></li><li><p>区块链技术目前最大的意义是它的运行机制：通过技术精巧的组合，完成资源的公平分配，从而保证社区的目标一致，成员的行为规范</p><br></li><li><p>要用科学的眼光看待区块链，以’去中心化’为例，从哲学上讲，矛盾总有主次，从现实来看，大到宇宙星系，小到一个原子都有中心。区块链经典的技术虽然去掉数据结构的中心，但其运行仍受中心化节点的约束。事实上，曾经有’去中心化’的互联网，结果只是颠覆了旧的中心，形成了新的寡头。</p><br></li><li><p>任何产业能够得到长久的发展，都是需要推动社会进步，满足人们生产生活的需求无论区块链在当下是否真正为实体经济发展和改善人民生活提供了支持，但从长远来看，以人为本，从大众的根本需求出发，为社会进步和经济发展提供高效率，低成本的解决方案才是区块链行业发展壮大，迈向成熟的持久动力。</p><br></li><li><p>历史证明，商机并非都是先到先得，先到多得的游戏。新的技术发展的不同阶段都会有不同的商机，创造新的商业机会，不同阶段的商机适合不同类型的人和机构去把握。与其躁动焦虑，盲目跟风，不如静心分析社会需求，研究行业痛点，找准自己最能创造价值的领域和阶段</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;区块链是分布式数据储存，点对点传输，共识机制，加密算法等计算机的新型应用模式。所谓共识机制是指区块链系统中实现不同节点之间建立信任，获取权益的数学算法。&lt;br&gt;区块链是比特币的一个重要概念，本质上是一个去中心化的数据库。它是一串使用密码学方法相关联产生的数据块，每一个数据块中包含了一次比特币网络交易信息，用于验证其信息的有效性(防伪)和生成下一个区块，数据存储的每一个节点都会同步复制整个账本，信息透明难以篡改。&lt;/p&gt;
&lt;br&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;font color=&quot;red&quot;&gt;凡事需要更加公平，公正，公开的企业行业，都可以用到区块链技术，都可以用使用区块链技术来改造和实现；凡事需要数据存储，保护，授权，交易的企业，都可以用到区块链技术；凡事需要社会化协作，尤其是跨境，基于计算机网络可以完成的社会化分工和协作，都可以用到区块链技术&lt;/font&gt;&lt;/p&gt;
&lt;br&gt;
    
    </summary>
    
    
      <category term="区块链" scheme="https://ShowPenZ.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="文章" scheme="https://ShowPenZ.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="区块链" scheme="https://ShowPenZ.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="心得" scheme="https://ShowPenZ.github.io/tags/%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title>npmpkg starter</title>
    <link href="https://showpenz.github.io/2020/01/14/react-npmpkg-starter/"/>
    <id>https://showpenz.github.io/2020/01/14/react-npmpkg-starter/</id>
    <published>2020-01-14T07:31:59.000Z</published>
    <updated>2020-01-14T16:09:44.587Z</updated>
    
    <content type="html"><![CDATA[<h1 id="npmpkg-starter-vue"><a href="#npmpkg-starter-vue" class="headerlink" title="npmpkg-starter-vue"></a>npmpkg-starter-vue</h1><p>A Vue NPM package starter</p><p><a href="https://github.com/ShowPenZ/npmpkg-starter-vue" target="_blank" rel="noopener">项目代码地址</a></p><p>为了简化老哥们的生产 npm 包的复杂程度<br>提供了一个小框架(Vue 版) 打包工具使用<a href="https://github.com/egoist/bili" target="_blank" rel="noopener">bili</a><br>还有相应的代码规范规则以及代码提交规范</p><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i</span><br><span class="line">$ yarn</span><br></pre></td></tr></table></figure><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><ol><li><p>修改<code>package.json</code><br><img src="https://i.loli.net/2020/01/14/9vf1JxTrGCZmtcW.png" alt="image.png"><br>name，author，main，description，keywords 改为你需要写入的信息<br>main 为打包出来的文件路口</p><br><a id="more"></a></li><li><p>修改<code>bill.config.js</code><br><img src="https://i.loli.net/2020/01/14/VuPOGQBKrTYiphe.png" alt="image.png"><br>修改 input 打包入口文件路径 <code>src/xxxx.vue</code> 为你的文件名字，假如你的组件叫 Websocket 则改为<code>src/Websocket.vue</code><br><br>修改 moduleName 模块名字 xxxx 为你的文件模块名字 例如：<code>moduleName: 'Websocket'</code><br><br><code>extractCSS</code> 为打包出来的 js 文件是否要包含 css 也就是不单独派生出 css 文件<br><br><code>babel</code> 这边<font color="red">默认已经给 vue 配置了 jsx 语法</font> 已打开了<code>babelrc: true</code>, <code>.babelrc</code>文件可编写自己的所需</p><br></li><li><p>README.md 文件写入自己的组件介绍以及 LICENSE 文件替换</p><br></li><li><p>书写规范的<code>.editorconfig</code> 代码规范的<code>.prettierrc</code>以及<code>.eslintrc</code>文件可以根据自己的项目需要自己修改 这些都需要 vs code 或者你使用的编辑器下载相关的插件才会生效</p><br></li><li><p><code>yarn build</code> 执行代码编译打包生成 dist 文件夹以及代码源文件</p><br></li><li><p>代码编写完 git 上传时 commit 填写规则<code>type(path): xxxx</code><br>type 必须为其中之一<code>[build, chore, ci, docs, feat, fix, improvement, perf, refactor, revert, style, test]</code><br><code>path</code>为修改文件的路径例如 src，package 之类<br><code>xxxx 为本次修改提交</code></p><br></li><li><p>默认你已经注册过 npm 账号 在发布前最好去 npm 里输入自己要发布的包名检查下是否已有相同的包 npm 的包名都是唯一的 在终端执行<code>npm publish</code>命令即可推送 npm 包(注意 package.json 的 version 版本号)<br><br>大部分的 publish 失败都是包名重复<br><br>小修改小补丁已经 bugfix 可以使用<code>npm version patch && npm publish</code>或相应脚本的代码<code>npm run release:patch</code><br><br>小升级使用<code>npm version minor && npm publish</code>或<code>npm run release:minor</code><br><br>大升级使用<code>npm version major && npm publish</code>或<code>npm run release:major</code></p></li></ol><h1 id="npmpkg-start-react"><a href="#npmpkg-start-react" class="headerlink" title="npmpkg-start-react"></a>npmpkg-start-react</h1><p>a React NPM package starter</p><p><a href="https://github.com/ShowPenZ/npmpkg-start-react" target="_blank" rel="noopener">项目代码地址</a></p><p>为了简化老哥们的生产 npm 包的复杂程度<br>提供了一个小框架(React 版本) 打包工具使用<a href="https://github.com/egoist/bili" target="_blank" rel="noopener">bili</a><br>还有相应的代码规范规则以及代码提交规范</p><h2 id="Installation-1"><a href="#Installation-1" class="headerlink" title="Installation"></a>Installation</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i</span><br><span class="line">$ yarn</span><br></pre></td></tr></table></figure><h2 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h2><ol><li><p>修改<code>package.json</code><br><img src="https://i.loli.net/2020/01/14/x8qdDzh6C1HfME4.png" alt="image.png"><br>name，author，main，description，keywords 改为你需要写入的信息<br>main 为打包出来的文件路口</p><br></li><li><p>修改<code>bill.config.js</code><br><img src="https://i.loli.net/2020/01/14/dUuiNszJeOf4PZr.png" alt="image.png"><br>修改 input 打包入口文件路径 <code>src/xxxx.jsx</code> 为你的文件名字，假如你的组件叫 Websocket 则改为<code>src/Websocket.jsx</code><br><br>修改 moduleName 模块名字 xxxx 为你的文件模块名字 例如：<code>moduleName: 'Websocket'</code><br><br><code>extractCSS</code> 为打包出来的 js 文件是否要包含 css 也就是不单独派生出 css 文件<br><br><code>babel</code> 这边默认已经配置了 jsx 语法 如果有自己的需求可以打开 <code>babelrc: true</code>, 自己添加<code>.babelrc</code>文件编写自己的所需</p><br></li></ol><h4 id="其他同-vue-版一样"><a href="#其他同-vue-版一样" class="headerlink" title="其他同 vue 版一样"></a>其他同 vue 版一样</h4>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;npmpkg-starter-vue&quot;&gt;&lt;a href=&quot;#npmpkg-starter-vue&quot; class=&quot;headerlink&quot; title=&quot;npmpkg-starter-vue&quot;&gt;&lt;/a&gt;npmpkg-starter-vue&lt;/h1&gt;&lt;p&gt;A Vue NPM package starter&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ShowPenZ/npmpkg-starter-vue&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;项目代码地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;为了简化老哥们的生产 npm 包的复杂程度&lt;br&gt;提供了一个小框架(Vue 版) 打包工具使用&lt;a href=&quot;https://github.com/egoist/bili&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;bili&lt;/a&gt;&lt;br&gt;还有相应的代码规范规则以及代码提交规范&lt;/p&gt;
&lt;h2 id=&quot;Installation&quot;&gt;&lt;a href=&quot;#Installation&quot; class=&quot;headerlink&quot; title=&quot;Installation&quot;&gt;&lt;/a&gt;Installation&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ yarn&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;用法&quot;&gt;&lt;a href=&quot;#用法&quot; class=&quot;headerlink&quot; title=&quot;用法&quot;&gt;&lt;/a&gt;用法&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;修改&lt;code&gt;package.json&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;https://i.loli.net/2020/01/14/9vf1JxTrGCZmtcW.png&quot; alt=&quot;image.png&quot;&gt;&lt;br&gt;name，author，main，description，keywords 改为你需要写入的信息&lt;br&gt;main 为打包出来的文件路口&lt;/p&gt;
&lt;br&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://ShowPenZ.github.io/categories/javascript/"/>
    
    
      <category term="react" scheme="https://ShowPenZ.github.io/tags/react/"/>
    
      <category term="vue" scheme="https://ShowPenZ.github.io/tags/vue/"/>
    
      <category term="npm" scheme="https://ShowPenZ.github.io/tags/npm/"/>
    
      <category term="starter" scheme="https://ShowPenZ.github.io/tags/starter/"/>
    
  </entry>
  
  <entry>
    <title>react组件转换成vue组件(2)</title>
    <link href="https://showpenz.github.io/2020/01/09/react%E7%BB%84%E4%BB%B6%E8%BD%AC%E6%8D%A2%E6%88%90vue%E7%BB%84%E4%BB%B6-2/"/>
    <id>https://showpenz.github.io/2020/01/09/react%E7%BB%84%E4%BB%B6%E8%BD%AC%E6%8D%A2%E6%88%90vue%E7%BB%84%E4%BB%B6-2/</id>
    <published>2020-01-09T05:58:01.000Z</published>
    <updated>2020-01-14T08:21:01.061Z</updated>
    
    <content type="html"><![CDATA[<p>承接上文这次使用我的另一个组件<a href="https://github.com/ShowPenZ/vue-simpleWS" target="_blank" rel="noopener">vue-simpleWS</a>来对比下两个框架的使用上的不同</p><p>上源码 Vue</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Vue-simple-Ws&quot;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    url: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      required: true</span><br><span class="line">    &#125;,</span><br><span class="line">    debug: &#123;</span><br><span class="line">      type: Boolean,</span><br><span class="line">      default: false</span><br><span class="line">    &#125;,</span><br><span class="line">    reconnect: &#123;</span><br><span class="line">      type: Boolean,</span><br><span class="line">      default: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    const that = this;</span><br><span class="line">    return &#123;</span><br><span class="line">      instance: null,</span><br><span class="line">      reconnectFailureTimes: 0,</span><br><span class="line">      reconnectTimer: null,</span><br><span class="line">      needReconnet: true,</span><br><span class="line">      WS: window.WebSocket</span><br><span class="line">        ? new window.WebSocket(that.url)</span><br><span class="line">        : new window.MozWebSocket(that.url)</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;&#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    const that = this;</span><br><span class="line">    that.structureWebSocket();</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeDestroy() &#123;</span><br><span class="line">    const that = this;</span><br><span class="line">    that.destroy();</span><br><span class="line">  &#125;,</span><br><span class="line">  destroy() &#123;</span><br><span class="line">    const that = this;</span><br><span class="line">    that.needReconnet = false;</span><br><span class="line">    clearTimeout(that.reconnectTimer);</span><br><span class="line">    that.printLog(`WS is close`);</span><br><span class="line">    that.WS.close();</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    structureWebSocket() &#123;</span><br><span class="line">      const that = this;</span><br><span class="line">      that.WS.onopen = () =&gt; &#123;</span><br><span class="line">        that.printLog(&quot;ws is connected&quot;);</span><br><span class="line">        that.$emit(&quot;onOpen&quot;, that.sendData);</span><br><span class="line">      &#125;;</span><br><span class="line">      that.WS.onmessage = data =&gt; &#123;</span><br><span class="line">        that.printLog(`wsData:$&#123;data.data&#125;`);</span><br><span class="line">        that.$emit(&quot;onMessage&quot;, data.data);</span><br><span class="line">      &#125;;</span><br><span class="line">      that.WS.onclose = e =&gt; &#123;</span><br><span class="line">        const &#123; code, reason, wasClean &#125; = e;</span><br><span class="line">        that.printLog(`WS is disconneted,reason:$&#123;reason&#125;`);</span><br><span class="line">        that.$emit(&quot;onClose&quot;, code, reason, wasClean);</span><br><span class="line">        if (that.reconnect &amp;&amp; that.needReconnet) &#123;</span><br><span class="line">          that.reconnectFailureTimes++;</span><br><span class="line">          if (that.reconnectFailureTimes &lt; 3) &#123;</span><br><span class="line">            that.reconnectTimer = window.setTimeout(() =&gt; &#123;</span><br><span class="line">              that.setState(&#123;</span><br><span class="line">                WS: window.WebSocket</span><br><span class="line">                  ? new window.WebSocket(that.url)</span><br><span class="line">                  : new window.MozWebSocket(that.url)</span><br><span class="line">              &#125;);</span><br><span class="line">              that.structureWebSocket();</span><br><span class="line">            &#125;, 15 * 1000);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      that.WS.onerror = e =&gt; &#123;</span><br><span class="line">        that.$emit(&quot;onError&quot;, e);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    sender(msg) &#123;</span><br><span class="line">      const that = this;</span><br><span class="line">      if (that.WS &amp;&amp; that.WS.readyState === 1) &#123;</span><br><span class="line">        that.WS.send(msg);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    sendData(msg) &#123;</span><br><span class="line">      const that = this;</span><br><span class="line">      return that.sender(msg);</span><br><span class="line">    &#125;,</span><br><span class="line">    printLog(val) &#123;</span><br><span class="line">      const that = this;</span><br><span class="line">      if (that.debug) &#123;</span><br><span class="line">        console.log(val);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>react</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import PropTypes from &apos;prop-types&apos;;</span><br><span class="line"></span><br><span class="line">function isFunction(arg) &#123;</span><br><span class="line">  if (typeof arg === &apos;function&apos;) &#123;</span><br><span class="line">    return true;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Websocket extends React.Component &#123;</span><br><span class="line">  static propTypes = &#123;</span><br><span class="line">    url: PropTypes.string.isRequired,</span><br><span class="line">    onOpen: PropTypes.func,</span><br><span class="line">    onMessage: PropTypes.func.isRequired,</span><br><span class="line">    onError: PropTypes.func,</span><br><span class="line">    onClose: PropTypes.func,</span><br><span class="line">    debug: PropTypes.bool,</span><br><span class="line">    reconnect: PropTypes.bool,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  static defaultProps = &#123;</span><br><span class="line">    debug: false,</span><br><span class="line">    reconnect: true,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    const that = this;</span><br><span class="line">    const &#123; url &#125; = that.props;</span><br><span class="line"></span><br><span class="line">    that.state = &#123;</span><br><span class="line">      WS: window.WebSocket ? new window.WebSocket(url) : new window.MozWebSocket(url),</span><br><span class="line">      reconnectTime: 0,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    that.reconnectFailureTimes = 0;</span><br><span class="line">    that.reconnectTimer = null;</span><br><span class="line">    that.needReconnet = true;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    const that = this;</span><br><span class="line"></span><br><span class="line">    that.structureWebSocket();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    const that = this;</span><br><span class="line">    const &#123; WS &#125; = that.state;</span><br><span class="line"></span><br><span class="line">    that.needReconnet = false;</span><br><span class="line"></span><br><span class="line">    clearTimeout(that.reconnectTimer);</span><br><span class="line"></span><br><span class="line">    that.printLog(`WS is close`);</span><br><span class="line"></span><br><span class="line">    WS.close();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  structureWebSocket = () =&gt; &#123;</span><br><span class="line">    const that = this;</span><br><span class="line">    const &#123; WS &#125; = that.state;</span><br><span class="line">    const &#123; onOpen, onMessage, onError, onClose, reconnect, url &#125; = that.props;</span><br><span class="line"></span><br><span class="line">    WS.onopen = () =&gt; &#123;</span><br><span class="line">      that.printLog(&apos;ws is connected&apos;);</span><br><span class="line"></span><br><span class="line">      if (isFunction(onOpen)) &#123;</span><br><span class="line">        onOpen(that.sendData);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    WS.onmessage = data =&gt; &#123;</span><br><span class="line">      that.printLog(`wsData:$&#123;data.data&#125;`);</span><br><span class="line"></span><br><span class="line">      if (isFunction(onMessage)) &#123;</span><br><span class="line">        onMessage(data.data);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    WS.onclose = e =&gt; &#123;</span><br><span class="line">      const &#123; code, reason, wasClean &#125; = e;</span><br><span class="line"></span><br><span class="line">      that.printLog(`WS is disconneted,reason:$&#123;reason&#125;`);</span><br><span class="line"></span><br><span class="line">      if (isFunction(onClose)) &#123;</span><br><span class="line">        onClose(code, reason, wasClean);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      if (reconnect &amp;&amp; that.needReconnet) &#123;</span><br><span class="line">        that.reconnectFailureTimes++;</span><br><span class="line"></span><br><span class="line">        if (that.reconnectFailureTimes &lt; 3) &#123;</span><br><span class="line">          that.reconnectTimer = window.setTimeout(() =&gt; &#123;</span><br><span class="line">            that.setState(&#123;</span><br><span class="line">              WS: window.WebSocket ? new window.WebSocket(url) : new window.MozWebSocket(url),</span><br><span class="line">            &#125;);</span><br><span class="line">            that.structureWebSocket();</span><br><span class="line">          &#125;, 15 * 1000);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    WS.onerror = e =&gt; &#123;</span><br><span class="line">      if (isFunction(onError)) &#123;</span><br><span class="line">        onError();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  sender = msg =&gt; &#123;</span><br><span class="line">    const that = this;</span><br><span class="line">    const &#123; WS &#125; = that.state;</span><br><span class="line"></span><br><span class="line">    if (WS &amp;&amp; WS.readyState === 1) &#123;</span><br><span class="line">      WS.send(msg);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  sendData = msg =&gt; &#123;</span><br><span class="line">    const that = this;</span><br><span class="line"></span><br><span class="line">    return that.sender(msg);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  printLog = val =&gt; &#123;</span><br><span class="line">    const that = this;</span><br><span class="line">    const &#123; debug &#125; = that.props;</span><br><span class="line"></span><br><span class="line">    if (debug) &#123;</span><br><span class="line">      console.log(val);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    const that = this;</span><br><span class="line">    const &#123; children &#125; = that.props;</span><br><span class="line"></span><br><span class="line">    return &lt;div&gt;&#123;children&#125;&lt;/div&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Websocket;</span><br></pre></td></tr></table></figure><p>代码比较</p><ol><li>生命周期<br>react <img src="https://i.loli.net/2020/01/09/ZoYxEcAzmGSVe5q.png" alt="image.png"><br>vue <img src="https://i.loli.net/2020/01/09/BTyPGesz9VYQCwr.png" alt="image.png"></li><li>变量声明<br>react <img src="https://i.loli.net/2020/01/09/iHFvJaZrA3XyzET.png" alt="image.png"><br>vue <img src="https://i.loli.net/2020/01/09/gh9wtCkJuGRyxm1.png" alt="image.png"></li><li>函数<br>react 组件内的函数直接放在 class 类内部走箭头函数即可<br>vue   组件的内定义的函数要放在 methods 对象内</li></ol><p>个人还是喜欢react api较少 比较天马行空 vue支持jsx之后无需使用模版语法也挺不错的<br>反正react 真香 一giao我里giao</p><p>源代码以及项目地址<br>react  <a href="https://github.com/ShowPenZ/react-websocket" target="_blank" rel="noopener">react-websocket</a><br>vue  <a href="https://github.com/ShowPenZ/vue-simpleWS" target="_blank" rel="noopener">vue-simpleWS</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;承接上文这次使用我的另一个组件&lt;a href=&quot;https://github.com/ShowPenZ/vue-simpleWS&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vue-simpleWS&lt;/a&gt;来对比下两个框架的使用上的不同&lt;/p&gt;
&lt;p&gt;上源码 Vue&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://ShowPenZ.github.io/categories/javascript/"/>
    
      <category term="npm package" scheme="https://ShowPenZ.github.io/categories/javascript/npm-package/"/>
    
    
      <category term="react" scheme="https://ShowPenZ.github.io/tags/react/"/>
    
      <category term="vue" scheme="https://ShowPenZ.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>react组件转换成vue组件(1)</title>
    <link href="https://showpenz.github.io/2020/01/09/react%E7%BB%84%E4%BB%B6%E8%BD%AC%E6%8D%A2%E6%88%90vue%E7%BB%84%E4%BB%B6/"/>
    <id>https://showpenz.github.io/2020/01/09/react%E7%BB%84%E4%BB%B6%E8%BD%AC%E6%8D%A2%E6%88%90vue%E7%BB%84%E4%BB%B6/</id>
    <published>2020-01-09T04:01:43.000Z</published>
    <updated>2020-01-14T08:21:10.704Z</updated>
    
    <content type="html"><![CDATA[<p>今天完成了一个 react 组件的 vue 化–<a href="https://github.com/ShowPenZ/vue-lazyload-pic" target="_blank" rel="noopener">vue-lazyload-pic</a></p><p>顺手重新撸了一把 vue</p><p>vue 的模版语法写的我实在蛋疼所以直接上了 jsx 语法，也方便双向绑定<br>   方法:<br>   (1): 增加两个插件<br>    <code>yarn add @vue/babel-helper-vue-jsx-merge-props<br>    yarn add @vue/babel-preset-jsx</code></p><p>   (2): 在<code>.babelrc</code>文件内做如下修改:</p>   <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [<span class="string">"@vue/babel-preset-jsx"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   就可以快乐的使用 jsx 语法了<br></p><p>   例子: <a href="https://github.com/ShowPenZ/vue-lazyload-pic" target="_blank" rel="noopener">vue-lazyload-pic</a></p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">    const that = this;</span><br><span class="line">    const &#123; imgLoaded, imgClassName, img, alt, skeleton &#125; = that;</span><br><span class="line">    const onLoad = () =&gt; &#123;</span><br><span class="line">        that.$emit(&apos;onloads&apos;, true);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    return (</span><br><span class="line">        &lt;div class=&quot;P-container&quot;&gt;</span><br><span class="line">            &#123;imgLoaded ? (</span><br><span class="line">            &lt;img class=&#123;ClassNames(&apos;defaultImg&apos;, imgClassName)&#125; src=&#123;img&#125; alt=&#123;alt&#125; /&gt;</span><br><span class="line">            ) : (</span><br><span class="line">            &lt;div class=&#123;ClassNames(&apos;skeleton1&apos;, skeleton)&#125;&gt;&lt;/div&gt;</span><br><span class="line">            )&#125;</span><br><span class="line">            &lt;img class=&quot;noShow&quot; src=&#123;img&#125; alt=&#123;alt&#125; onLoad=&#123;onLoad&#125; /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>   上面代码 有个注意点就是<br>   <a id="more"></a><br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img class=&quot;noShow&quot; src=&#123;img&#125; alt=&#123;alt&#125; onLoad=&#123;onLoad&#125; /&gt;</span><br></pre></td></tr></table></figure></p><p>   jsx 内的 img 标签有 onLoad 属性方法 意思就是当图片资源加载完成后会有回调通知所以在这个方法内我们可以使用 Vue 的 this.$emit 来派发一个 onloads 事件通知,在父组件内进行监听</p><p>   代码例子为如下</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;LazyLoad.PicLazyLoad </span><br><span class="line">     img=&#123;Sevn&#125; // 图片 </span><br><span class="line">     skeleton=&quot;newSkeleton&quot;//占位图css样式(className) </span><br><span class="line">     imgClassName=&quot;sevn&quot; // 图片的样式(className)</span><br><span class="line">     alt=&quot;sevn&quot; </span><br><span class="line">     imgLoaded=&#123;imgLoaded&#125; </span><br><span class="line">     &#123;...&#123; on: &#123; onloads: onLoads &#125;&#125;&#125; //监听图片加载 </span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><p>   使用<code>{...{ on: { onloads: onLoads }}}</code>来监听$emit派发的onload事件<br>   详细代码以及使用方式请参阅<a href="https://github.com/ShowPenZ/vue-lazyload-pic/blob/master/README.md" target="_blank" rel="noopener">这里</a></p><p>   接下来是两个框架对于相同代码逻辑的不同实现对比<br>   react版本的<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">class PicLazyLoad extends React.Component &#123;</span><br><span class="line">    static propTypes = &#123;</span><br><span class="line">        onLoaded: PropTypes.func.isRequired,</span><br><span class="line">        loaded: PropTypes.bool.isRequired,</span><br><span class="line">        img: PropTypes.string.isRequired,</span><br><span class="line">        alt: PropTypes.string.isRequired,</span><br><span class="line">        imgClassName: PropTypes.string,</span><br><span class="line">        skeleton: PropTypes.string</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    static defaultProps = &#123;</span><br><span class="line">        alt: &quot;&quot;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    state = &#123;</span><br><span class="line">        loaded: false</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        const that = this;</span><br><span class="line">        const &#123; loaded &#125; = that.state;</span><br><span class="line">        const &#123; img, alt, imgClassName, skeleton &#125; = that.props;</span><br><span class="line"></span><br><span class="line">        const onLoad = () =&gt; &#123;</span><br><span class="line">            that.setState(&#123;</span><br><span class="line">                loaded: true</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        return (</span><br><span class="line">            &lt;div className=&quot;container&quot;&gt;</span><br><span class="line">                &#123;loaded ? (</span><br><span class="line">                &lt;img</span><br><span class="line">                    className=&#123;ClassNames(&quot;defaultImg&quot;, imgClassName)&#125;</span><br><span class="line">                    src=&#123;img&#125;</span><br><span class="line">                    alt=&#123;alt&#125;</span><br><span class="line">                /&gt;</span><br><span class="line">                ) : (</span><br><span class="line">                &lt;div className=&#123;ClassNames(&quot;skeleton1&quot;, skeleton)&#125;&gt;&lt;/div&gt;</span><br><span class="line">                )&#125;</span><br><span class="line">                &lt;img className=&quot;noShow&quot; src=&#123;img&#125; alt=&#123;alt&#125; onLoad=&#123;onLoad&#125; /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>   Vue版本的<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">const PicLazyLoad = &#123;</span><br><span class="line">     name: &apos;PicLazyLoad&apos;,</span><br><span class="line">     props: &#123;</span><br><span class="line">         imgLoaded: &#123;</span><br><span class="line">             type: Boolean,</span><br><span class="line">             required: true,</span><br><span class="line">         &#125;,</span><br><span class="line">         img: &#123;</span><br><span class="line">             type: String,</span><br><span class="line">             required: true,</span><br><span class="line">         &#125;,</span><br><span class="line">         alt: &#123;</span><br><span class="line">             type: String,</span><br><span class="line">             required: true,</span><br><span class="line">         &#125;,</span><br><span class="line">         imgClassName: &#123;</span><br><span class="line">             type: String,</span><br><span class="line">             required: false,</span><br><span class="line">         &#125;,</span><br><span class="line">         skeleton: &#123;</span><br><span class="line">             type: String,</span><br><span class="line">             required: false,</span><br><span class="line">         &#125;,</span><br><span class="line">     &#125;,</span><br><span class="line">     data() &#123;</span><br><span class="line">         return &#123;&#125;;</span><br><span class="line">     &#125;,</span><br><span class="line">     render() &#123;</span><br><span class="line">         const that = this;</span><br><span class="line">         const &#123; imgLoaded, imgClassName, img, alt, skeleton &#125; = that;</span><br><span class="line">         const onLoad = () =&gt; &#123;</span><br><span class="line">             that.$emit(&apos;onloads&apos;, true);</span><br><span class="line">         &#125;;</span><br><span class="line"></span><br><span class="line">         return (</span><br><span class="line">             &lt;div class=&quot;P-container&quot;&gt;</span><br><span class="line">                 &#123;imgLoaded ? (</span><br><span class="line">                 &lt;img class=&#123;ClassNames(&apos;defaultImg&apos;, imgClassName)&#125; src=&#123;img&#125; alt=&#123;alt&#125; /&gt;</span><br><span class="line">                 ) : (</span><br><span class="line">                 &lt;div class=&#123;ClassNames(&apos;skeleton1&apos;, skeleton)&#125;&gt;&lt;/div&gt;</span><br><span class="line">                 )&#125;</span><br><span class="line">                 &lt;img class=&quot;noShow&quot; src=&#123;img&#125; alt=&#123;alt&#125; onLoad=&#123;onLoad&#125; /&gt;</span><br><span class="line">             &lt;/div&gt;</span><br><span class="line">         );</span><br><span class="line">     &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>   当然简单的组件Vue有了jsx的加持后基本和react没什么太大的差别下一篇带来稍微复杂一点点的另一个组件再次一起感受下两个框架的一些使用上的差别</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天完成了一个 react 组件的 vue 化–&lt;a href=&quot;https://github.com/ShowPenZ/vue-lazyload-pic&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vue-lazyload-pic&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;顺手重新撸了一把 vue&lt;/p&gt;
&lt;p&gt;vue 的模版语法写的我实在蛋疼所以直接上了 jsx 语法，也方便双向绑定&lt;br&gt;   方法:&lt;br&gt;   (1): 增加两个插件&lt;br&gt;    &lt;code&gt;yarn add @vue/babel-helper-vue-jsx-merge-props&lt;br&gt;    yarn add @vue/babel-preset-jsx&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;   (2): 在&lt;code&gt;.babelrc&lt;/code&gt;文件内做如下修改:&lt;/p&gt;
   &lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;presets&quot;&lt;/span&gt;: [&lt;span class=&quot;string&quot;&gt;&quot;@vue/babel-preset-jsx&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;   就可以快乐的使用 jsx 语法了&lt;br&gt;&lt;/p&gt;
&lt;p&gt;   例子: &lt;a href=&quot;https://github.com/ShowPenZ/vue-lazyload-pic&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vue-lazyload-pic&lt;/a&gt;&lt;/p&gt;
   &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;render() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    const that = this;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    const &amp;#123; imgLoaded, imgClassName, img, alt, skeleton &amp;#125; = that;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    const onLoad = () =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        that.$emit(&amp;apos;onloads&amp;apos;, true);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;div class=&amp;quot;P-container&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;imgLoaded ? (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;img class=&amp;#123;ClassNames(&amp;apos;defaultImg&amp;apos;, imgClassName)&amp;#125; src=&amp;#123;img&amp;#125; alt=&amp;#123;alt&amp;#125; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ) : (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;div class=&amp;#123;ClassNames(&amp;apos;skeleton1&amp;apos;, skeleton)&amp;#125;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            )&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;img class=&amp;quot;noShow&amp;quot; src=&amp;#123;img&amp;#125; alt=&amp;#123;alt&amp;#125; onLoad=&amp;#123;onLoad&amp;#125; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;   上面代码 有个注意点就是&lt;br&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://ShowPenZ.github.io/categories/javascript/"/>
    
      <category term="npm package" scheme="https://ShowPenZ.github.io/categories/javascript/npm-package/"/>
    
    
      <category term="react" scheme="https://ShowPenZ.github.io/tags/react/"/>
    
      <category term="vue" scheme="https://ShowPenZ.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>telegram 机器人</title>
    <link href="https://showpenz.github.io/2019/12/28/telegram-%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    <id>https://showpenz.github.io/2019/12/28/telegram-%E6%9C%BA%E5%99%A8%E4%BA%BA/</id>
    <published>2019-12-28T06:56:29.000Z</published>
    <updated>2020-01-14T08:21:39.979Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关于如何创建机器人以及机器人部署至线上服务器请看这篇博文"><a href="#关于如何创建机器人以及机器人部署至线上服务器请看这篇博文" class="headerlink" title="关于如何创建机器人以及机器人部署至线上服务器请看这篇博文"></a>关于如何创建机器人以及机器人部署至线上服务器请看这篇博文</h3><p><a href="http://anata.me/2019/03/30/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%86%99%E4%B8%80%E4%B8%AATelegram-Bot/" target="_blank" rel="noopener">从零开始写一个 Telegram Bot</a></p><h3 id="以下的是我根据博文部署以及写机器人产生的一些问题"><a href="#以下的是我根据博文部署以及写机器人产生的一些问题" class="headerlink" title="以下的是我根据博文部署以及写机器人产生的一些问题"></a>以下的是我根据博文部署以及写机器人产生的一些问题</h3><ol><li>线上部署时，用的是 <font color="red">centos 6.8</font> 的系统所以安装 nginx 时产生了一些和教程博客不一样的地方<br>如图: 这是教程截图 <img src="https://i.loli.net/2019/12/28/z7ogQahDpLJ3BK2.png" alt="image.png"></li></ol><p>因为 centos 系统版本不一样 所以 yum 源设置也不一样 我的解决办法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/yum.repos.d/nginx.repo</span><br></pre></td></tr></table></figure><p>写入：</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[nginx-stable]</span><br><span class="line">name=nginx stable repo</span><br><span class="line">baseurl=http://nginx.org/packages/centos/$releasever/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br></pre></td></tr></table></figure><p>保存退出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx</span><br></pre></td></tr></table></figure><ol start="2"><li>网站支持 https<br>教程中 centos 7 可以直接这样 如图：<br><img src="https://i.loli.net/2019/12/28/fkw2rzUNmaTV5Ao.png" alt="image.png"><br>但由于我的系统为 centos 6 所以无法直接使用命令<br>解决办法： 打开<a href="https://certbot.eff.org/lets-encrypt/centos6-nginx.html" target="_blank" rel="noopener">certbot</a> 根据教程一步步即可完成 https 加持，教程的第三步会有两种可选方式我为了省事少折腾直接选择了第一种 auto 模式，都完成了之后，第五步去验证网站是否已支持 https。</li></ol><h3 id="github-已开源我的机器人"><a href="#github-已开源我的机器人" class="headerlink" title="github 已开源我的机器人"></a>github 已开源我的机器人</h3><p><a href="https://github.com/ShowPenZ/telegram-bot" target="_blank" rel="noopener">telegram-bot</a><br>欢迎根据教程制作一个 telegram bot 进行娱乐消遣(x 图爬取)顺便告诫下宅男程序猿<font color="red">少打点手冲</font></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;关于如何创建机器人以及机器人部署至线上服务器请看这篇博文&quot;&gt;&lt;a href=&quot;#关于如何创建机器人以及机器人部署至线上服务器请看这篇博文&quot; class=&quot;headerlink&quot; title=&quot;关于如何创建机器人以及机器人部署至线上服务器请看这篇博文&quot;&gt;&lt;/a&gt;关于如何创建机器人以及机器人部署至线上服务器请看这篇博文&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://anata.me/2019/03/30/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%86%99%E4%B8%80%E4%B8%AATelegram-Bot/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;从零开始写一个 Telegram Bot&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;以下的是我根据博文部署以及写机器人产生的一些问题&quot;&gt;&lt;a href=&quot;#以下的是我根据博文部署以及写机器人产生的一些问题&quot; class=&quot;headerlink&quot; title=&quot;以下的是我根据博文部署以及写机器人产生的一些问题&quot;&gt;&lt;/a&gt;以下的是我根据博文部署以及写机器人产生的一些问题&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;线上部署时，用的是 &lt;font color=&quot;red&quot;&gt;centos 6.8&lt;/font&gt; 的系统所以安装 nginx 时产生了一些和教程博客不一样的地方&lt;br&gt;如图: 这是教程截图 &lt;img src=&quot;https://i.loli.net/2019/12/28/z7ogQahDpLJ3BK2.png&quot; alt=&quot;image.png&quot;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因为 centos 系统版本不一样 所以 yum 源设置也不一样 我的解决办法&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vim /etc/yum.repos.d/nginx.repo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;写入：&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://ShowPenZ.github.io/categories/js/"/>
    
      <category term="node" scheme="https://ShowPenZ.github.io/categories/js/node/"/>
    
      <category term="nginx" scheme="https://ShowPenZ.github.io/categories/js/node/nginx/"/>
    
    
      <category term="telegram" scheme="https://ShowPenZ.github.io/tags/telegram/"/>
    
  </entry>
  
  <entry>
    <title>js Generator函数小记</title>
    <link href="https://showpenz.github.io/2019/12/24/js-Generator%E5%87%BD%E6%95%B0%E5%B0%8F%E8%AE%B0/"/>
    <id>https://showpenz.github.io/2019/12/24/js-Generator%E5%87%BD%E6%95%B0%E5%B0%8F%E8%AE%B0/</id>
    <published>2019-12-24T02:41:24.000Z</published>
    <updated>2020-01-14T08:18:08.715Z</updated>
    
    <content type="html"><![CDATA[<p>generator 函数运行结果释义</p><p>遇到<font color="red">yield 表达式，就暂停执行后面的操作</font>，<br>并将紧跟在<font color="red">yield 后面的那个表达式的值，作为返回的对象的 value 属性值</font>。<br>下一次调用 next 方法时，再继续往下执行，直到遇到下一个 yield 表达式。<br><font color="red">next 方法可以带一个参数，该参数就会被当作上一个 yield 表达式的返回值</font>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generator</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> y = <span class="number">1</span> * (<span class="keyword">yield</span> x + <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">let</span> z = <span class="keyword">yield</span> y / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> x + y + z;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fun1 = generator(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun1.next();</span><br></pre></td></tr></table></figure><p>{value:4, done:false}<br>第一步 第一次使用 next 方法时，运行 fun1.next()走到第一个 yield 里所以 value 为 4</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun1.next();</span><br></pre></td></tr></table></figure><p>{value:NaN, done:false}<br>第二步 运行 fun1.next() 没传参数 导致 yield (x + 2) 返回 undefined<br>则 y = 1 * undefined 即 yield(y/2)为 NaN</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun1.next();</span><br></pre></td></tr></table></figure><p>{value:NaN, done:true}<br>第三步 运行 fun1.next() 没传参数 导致 yield (y / 2) 返回 undefined<br>则 z = undefined 即 4 + NaN + undefinde 为 NaN</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fun2 = generator(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">fun2.next();</span><br></pre></td></tr></table></figure><p>{ value:4, done:false }<br>第一步 第一次使用 next 方法时，运行 fun1.next()走到第一个 yield 里所以 value 为 4</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun2.next(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>{ value:2.5, done:false }<br>第二步 运行 fun1.next() 传递参数 5 并将上一次 yield 表达式的值设为传递的参数 5 则 yield (x + 2) 返回 5<br>则 y=1 * 5 为 5 即 yiled(5 / 2) 为 2.5</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun2.next(<span class="number">6</span>);</span><br></pre></td></tr></table></figure><p>{ value:13, done:true }<br>第三步 运行 fun1.next() 传递参数 6 并将上一次 yield 表达式的值设为传递的参数 6 则 yield (y / 2) 返回 6<br>则 z = 6 往下走再无 yiled，直接执行 return = x + y + z = 2 + 5 + 6 = 13</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;generator 函数运行结果释义&lt;/p&gt;
&lt;p&gt;遇到&lt;font color=&quot;red&quot;&gt;yield 表达式，就暂停执行后面的操作&lt;/font&gt;，&lt;br&gt;并将紧跟在&lt;font color=&quot;red&quot;&gt;yield 后面的那个表达式的值，作为返回的对象的 value 属性值&lt;/font&gt;。&lt;br&gt;下一次调用 next 方法时，再继续往下执行，直到遇到下一个 yield 表达式。&lt;br&gt;&lt;font color=&quot;red&quot;&gt;next 方法可以带一个参数，该参数就会被当作上一个 yield 表达式的返回值&lt;/font&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;* &lt;span class=&quot;title&quot;&gt;generator&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; y = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; * (&lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; x + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; z = &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; y / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x + y + z;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; fun1 = generator(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://ShowPenZ.github.io/categories/js/"/>
    
    
      <category term="Generator" scheme="https://ShowPenZ.github.io/tags/Generator/"/>
    
  </entry>
  
  <entry>
    <title>react-lazyload-pic</title>
    <link href="https://showpenz.github.io/2019/12/09/react-lazyload-pic/"/>
    <id>https://showpenz.github.io/2019/12/09/react-lazyload-pic/</id>
    <published>2019-12-09T07:04:57.000Z</published>
    <updated>2020-01-14T08:17:31.353Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/ShowPenZ/react-lazyload-pic/blob/master/README_en-US.md" target="_blank" rel="noopener">English</a> | 中文</p><h1 id="react-lazyload-pic"><a href="#react-lazyload-pic" class="headerlink" title="react-lazyload-pic"></a>react-lazyload-pic</h1><blockquote><p>图片以及图片列表懒加载的react组件</p></blockquote><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install react-lazyload-pic --save</span><br><span class="line">or</span><br><span class="line">$ yarn add react-lazyload-pic</span><br></pre></td></tr></table></figure><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p>方法1 仅针对当前所要展示的大图做完全加载后展示，未完全加载时图片用占位图替代</p><p><img src="https://i.loli.net/2019/12/09/1SF9QoBCuiMOW63.gif" alt="lazyloadlist.gif"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; LazyLoadPic &#125; <span class="keyword">from</span> <span class="string">"react-lazyload-pic"</span>;</span><br><span class="line"><span class="keyword">import</span> Sevn <span class="keyword">from</span> <span class="string">'@/assets/sevn.jpg'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    loaded : <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">const</span> &#123; loaded &#125; = that.state;</span><br><span class="line">    <span class="keyword">const</span> onLoad = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      that.setState(&#123;</span><br><span class="line">        loaded:<span class="literal">true</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"container"</span>&gt;</span> </span></span><br><span class="line">              &lt;PicLazyLoad</span><br><span class="line">                img=&#123;Sevn&#125;             // 图片</span><br><span class="line">                skeleton="newSkeleton" // 占位图css样式(className)</span><br><span class="line">                imgClassName="sevn"    // 图片的样式(className)</span><br><span class="line">                alt="sevn"</span><br><span class="line">                loaded=&#123;loaded&#125;</span><br><span class="line">                onLoad=&#123;onLoad&#125;</span><br><span class="line"><span class="xml">              /&gt; </span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//css </span></span><br><span class="line">&#123;</span><br><span class="line">  .container &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    width: <span class="number">100</span>%;</span><br><span class="line">    height: <span class="number">100</span>vh;</span><br><span class="line">    font-size: <span class="number">30</span>px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .newSkeleton,</span><br><span class="line">  .sevn &#123;</span><br><span class="line">    width: <span class="number">200</span>px;</span><br><span class="line">    height: <span class="number">100</span>px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>方法2 懒加载图片列表，当图片加载才会被显示在列表内<br><img src="https://i.loli.net/2019/12/09/4dNFHoXhxE3jmcy.gif" alt="lazyloadlist.gif"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; LazyLoadPic &#125; <span class="keyword">from</span> <span class="string">"react-lazyload-pic"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      imgArr: []</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">const</span> that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">let</span> arr = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="number">17</span>; i++) &#123;</span><br><span class="line">      arr.push(&#123; <span class="attr">url</span>: <span class="built_in">require</span>(<span class="string">`./images/<span class="subst">$&#123;i&#125;</span>.png`</span>) &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    that.setState(&#123;</span><br><span class="line">      imgArr: _.concat(arr)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">const</span> &#123; imgArr &#125; = that.state;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"container"</span>&gt;</span><br><span class="line">        &lt;LazyLoadPic</span><br><span class="line">          boxClassName=<span class="string">"boxContainer"</span></span><br><span class="line">          imgBoxClassName=<span class="string">"imgBoxContainer"</span></span><br><span class="line">          imgClassName=<span class="string">"imgContainer"</span></span><br><span class="line">          imgArr=&#123;imgArr&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure><h2 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法1</span></span><br><span class="line"><span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">  onLoaded: PropTypes.func.isRequired,</span><br><span class="line">  loaded: PropTypes.bool.isRequired,</span><br><span class="line">  img: PropTypes.string.isRequired,</span><br><span class="line">  alt: PropTypes.string.isRequired,</span><br><span class="line">  imgClassName: PropTypes.string,</span><br><span class="line">  skeleton: PropTypes.string</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">  alt: <span class="string">""</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法2</span></span><br><span class="line"> <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">  imgClassName: PropTypes.string,</span><br><span class="line">  imgBoxClassName: PropTypes.string,</span><br><span class="line">  alt: PropTypes.string</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">  alt: <span class="string">""</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="License"><a href="#License" class="headerlink" title="License"></a>License</h1><p>MIT</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/ShowPenZ/react-lazyload-pic/blob/master/README_en-US.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;English&lt;/a&gt; | 中文&lt;/p&gt;
&lt;h1 id=&quot;react-lazyload-pic&quot;&gt;&lt;a href=&quot;#react-lazyload-pic&quot; class=&quot;headerlink&quot; title=&quot;react-lazyload-pic&quot;&gt;&lt;/a&gt;react-lazyload-pic&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;图片以及图片列表懒加载的react组件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Installation&quot;&gt;&lt;a href=&quot;#Installation&quot; class=&quot;headerlink&quot; title=&quot;Installation&quot;&gt;&lt;/a&gt;Installation&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install react-lazyload-pic --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;or&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ yarn add react-lazyload-pic&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;Usage&quot;&gt;&lt;a href=&quot;#Usage&quot; class=&quot;headerlink&quot; title=&quot;Usage&quot;&gt;&lt;/a&gt;Usage&lt;/h2&gt;&lt;p&gt;方法1 仅针对当前所要展示的大图做完全加载后展示，未完全加载时图片用占位图替代&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/12/09/1SF9QoBCuiMOW63.gif&quot; alt=&quot;lazyloadlist.gif&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; LazyLoadPic &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;react-lazyload-pic&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Sevn &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;@/assets/sevn.jpg&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  state = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    loaded : &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  render() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; that = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &amp;#123; loaded &amp;#125; = that.state;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; onLoad = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      that.setState(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        loaded:&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;container&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &amp;lt;PicLazyLoad&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                img=&amp;#123;Sevn&amp;#125;             // 图片&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                skeleton=&quot;newSkeleton&quot; // 占位图css样式(className)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                imgClassName=&quot;sevn&quot;    // 图片的样式(className)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                alt=&quot;sevn&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                loaded=&amp;#123;loaded&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                onLoad=&amp;#123;onLoad&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;              /&amp;gt; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; App;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//css &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .container &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    display: flex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    width: &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    height: &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;vh;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    font-size: &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .newSkeleton,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .sevn &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    width: &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    height: &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://ShowPenZ.github.io/categories/javascript/"/>
    
      <category term="npm package" scheme="https://ShowPenZ.github.io/categories/javascript/npm-package/"/>
    
    
      <category term="react" scheme="https://ShowPenZ.github.io/tags/react/"/>
    
      <category term="lazyload-pic" scheme="https://ShowPenZ.github.io/tags/lazyload-pic/"/>
    
  </entry>
  
  <entry>
    <title>react-slot-machines</title>
    <link href="https://showpenz.github.io/2019/10/26/react-slot-machines/"/>
    <id>https://showpenz.github.io/2019/10/26/react-slot-machines/</id>
    <published>2019-10-26T03:39:54.000Z</published>
    <updated>2020-01-14T08:22:38.946Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个简单的老虎机组件<br>效果截图<br><img src="https://i.loli.net/2019/10/28/hbVvUewMcDTXStk.gif" alt="slotMachines.gif"></p><h1 id="react-slot-machines"><a href="#react-slot-machines" class="headerlink" title="react-slot-machines"></a>react-slot-machines</h1><blockquote><p>A slot machine component for React</p></blockquote><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install react-slot-machines --save</span><br><span class="line">$ yarn add react-slot-machines</span><br></pre></td></tr></table></figure><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    startEngine: <span class="literal">false</span>,</span><br><span class="line">    giftAmount: <span class="number">16</span>,  <span class="comment">//礼物种类</span></span><br><span class="line">    giftPos1: <span class="number">0</span>,     <span class="comment">//老虎机第1槽位停下的礼物索引</span></span><br><span class="line">    giftPos2: <span class="number">1</span>,     <span class="comment">//老虎机第2槽位停下的礼物索引</span></span><br><span class="line">    giftPos3: <span class="number">3</span>,     <span class="comment">//老虎机第3槽位停下的礼物索引 </span></span><br><span class="line">    hasStart: <span class="literal">false</span>,</span><br><span class="line">    giftImgUrlArr: []</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">const</span> that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">const</span> &#123; giftAmount &#125; = that.state;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> array = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= giftAmount; i++) &#123;</span><br><span class="line">      array.push(&#123; <span class="attr">url</span>: <span class="built_in">require</span>(<span class="string">`../src/images/<span class="subst">$&#123;i&#125;</span>.png`</span>) &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    that.setState(&#123;</span><br><span class="line">      <span class="comment">//重复添加奖品数组以拓宽奖池数组长度</span></span><br><span class="line">      <span class="comment">//自定义n圈就得添加n+1个礼物数组</span></span><br><span class="line">      <span class="comment">//多出来得一个是用于真实旋转后落位的</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// giftImgUrlArr: _.concat(array, array, array, array)</span></span><br><span class="line">      giftImgUrlArr: _.concat(array)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">      startEngine,</span><br><span class="line">      hasStart,</span><br><span class="line">      giftPos1,</span><br><span class="line">      giftPos2,</span><br><span class="line">      giftPos3,</span><br><span class="line">      giftImgUrlArr,</span><br><span class="line">      giftAmount</span><br><span class="line">    &#125; = that.state;</span><br><span class="line">    <span class="keyword">const</span> onClickEngineStart = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (startEngine) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      that.setState(&#123;</span><br><span class="line">        startEngine: <span class="literal">true</span>,</span><br><span class="line">        hasStart: <span class="literal">true</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> onEngineCompelet = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (giftPos1 === giftPos2 &amp;&amp; giftPos1 !== giftPos3) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"实在太可惜，再来一次"</span>);</span><br><span class="line">        that.setState(&#123;</span><br><span class="line">          startEngine: <span class="literal">false</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (giftPos2 === giftPos3 &amp;&amp; giftPos2 !== giftPos1) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"实在太可惜，再来一次"</span>);</span><br><span class="line">        that.setState(&#123;</span><br><span class="line">          startEngine: <span class="literal">false</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        giftPos1 !== giftPos2 &amp;&amp;</span><br><span class="line">        giftPos1 !== giftPos3 &amp;&amp;</span><br><span class="line">        giftPos2 !== giftPos3</span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"哇！ 感谢参与"</span>);</span><br><span class="line">        that.setState(&#123;</span><br><span class="line">          startEngine: <span class="literal">false</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"container"</span>&gt;</span><br><span class="line">        &lt;Slot</span><br><span class="line">          giftAmount=&#123;giftAmount&#125;</span><br><span class="line">          giftPos1=&#123;giftPos1&#125;</span><br><span class="line">          giftPos2=&#123;giftPos2&#125;</span><br><span class="line">          giftPos3=&#123;giftPos3&#125;</span><br><span class="line">          hasStart=&#123;hasStart&#125;</span><br><span class="line">          startEngine=&#123;startEngine&#125;</span><br><span class="line">          onClickEngineStart=&#123;onClickEngineStart&#125;</span><br><span class="line">          onEngineCompelet=&#123;onEngineCompelet&#125;</span><br><span class="line">          <span class="comment">// backgroundImg=&#123;require("../src/images/sven.jpg")&#125;</span></span><br><span class="line">          giftImgUrlArr=&#123;giftImgUrlArr&#125;</span><br><span class="line">          <span class="comment">// customTurns=&#123;3&#125;</span></span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure><h2 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">  giftPos1: PropTypes.number.isRequired,            <span class="comment">//老虎机第1槽位停下的礼物索引</span></span><br><span class="line">  giftPos2: PropTypes.number.isRequired,            <span class="comment">//老虎机第2槽位停下的礼物索引</span></span><br><span class="line">  giftPos3: PropTypes.number.isRequired,            <span class="comment">//老虎机第3槽位停下的礼物索引</span></span><br><span class="line">  giftType: PropTypes.number.isRequired,            <span class="comment">//礼物种类</span></span><br><span class="line">  startEngine: PropTypes.bool.isRequired,           <span class="comment">//老虎机是否启动</span></span><br><span class="line">  hasStart: PropTypes.bool.isRequired,              <span class="comment">//老虎机是否启动过</span></span><br><span class="line">  onClickEngineStart: PropTypes.func.isRequired,    <span class="comment">//点击启动老虎机</span></span><br><span class="line">  onEngineCompelet: PropTypes.func.isRequired,      <span class="comment">//老虎机完全停下的回掉</span></span><br><span class="line">  giftImgUrlArr: PropTypes.array.isRequired,        <span class="comment">//传入的奖品url地址(数组)</span></span><br><span class="line">  slotDelay2: PropTypes.number,                     <span class="comment">//第2槽位的启动延迟(相对于第一槽位)</span></span><br><span class="line">  slotDelay3: PropTypes.number,                     <span class="comment">//第3槽位的启动延迟(相对于第一槽位)</span></span><br><span class="line">  backgroundImg: PropTypes.string,                  <span class="comment">//老虎机的图片(如果没传会有一张默认的圣诞老虎机图片)</span></span><br><span class="line">  engineDuration: PropTypes.number,                 <span class="comment">//老虎机的转动完成时间</span></span><br><span class="line">  reWindowsContainer: PropTypes.string,             <span class="comment">//老虎机的classname传入（包括图片样式）</span></span><br><span class="line">  reWindows: PropTypes.string,                      <span class="comment">//老虎机的槽位classname传入（包括图片样式）</span></span><br><span class="line">  reGiftContainer: PropTypes.string,                <span class="comment">//礼物的classname传入（包括图片样式）</span></span><br><span class="line">  reStartBtn: PropTypes.string,                     <span class="comment">//启动按钮的classname传入</span></span><br><span class="line">  customTurns: PropTypes.number                     <span class="comment">//老虎机旋转圈数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//提供的一些默认属性</span></span><br><span class="line"><span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">  slotDelay2: <span class="number">500</span>,  </span><br><span class="line">  slotDelay3: <span class="number">1000</span>,</span><br><span class="line">  engineDuration: <span class="number">8000</span>,</span><br><span class="line">  backgroundImg: <span class="built_in">require</span>(<span class="string">"./images/bg.png"</span>),</span><br><span class="line">  customTurns: <span class="number">2</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="License"><a href="#License" class="headerlink" title="License"></a>License</h1><p>MIT</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一个简单的老虎机组件&lt;br&gt;效果截图&lt;br&gt;&lt;img src=&quot;https://i.loli.net/2019/10/28/hbVvUewMcDTXStk.gif&quot; alt=&quot;slotMachines.gif&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;react-slot-machines&quot;&gt;&lt;a href=&quot;#react-slot-machines&quot; class=&quot;headerlink&quot; title=&quot;react-slot-machines&quot;&gt;&lt;/a&gt;react-slot-machines&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;A slot machine component for React&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Installation&quot;&gt;&lt;a href=&quot;#Installation&quot; class=&quot;headerlink&quot; title=&quot;Installation&quot;&gt;&lt;/a&gt;Installation&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install react-slot-machines --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ yarn add react-slot-machines&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;Usage&quot;&gt;&lt;a href=&quot;#Usage&quot; class=&quot;headerlink&quot; title=&quot;Usage&quot;&gt;&lt;/a&gt;Usage&lt;/h2&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://ShowPenZ.github.io/categories/javascript/"/>
    
      <category term="npm package" scheme="https://ShowPenZ.github.io/categories/javascript/npm-package/"/>
    
    
      <category term="react" scheme="https://ShowPenZ.github.io/tags/react/"/>
    
      <category term="slot machines" scheme="https://ShowPenZ.github.io/tags/slot-machines/"/>
    
  </entry>
  
  <entry>
    <title>react-ripple-button</title>
    <link href="https://showpenz.github.io/2019/10/16/react-ripple-button/"/>
    <id>https://showpenz.github.io/2019/10/16/react-ripple-button/</id>
    <published>2019-10-16T08:25:12.000Z</published>
    <updated>2020-01-14T08:17:57.215Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个水波按钮的react组件封装<br>基于<a href="https://codepen.io/jh3y/pen/EKGXEY" target="_blank" rel="noopener">https://codepen.io/jh3y/pen/EKGXEY</a></p><h1 id="react-ripple-button"><a href="#react-ripple-button" class="headerlink" title="react-ripple-button"></a>react-ripple-button</h1><blockquote><p>a ripple-button component for React that from Ripple buttons <a href="https://codepen.io/jh3y/pen/EKGXEY" target="_blank" rel="noopener">https://codepen.io/jh3y/pen/EKGXEY</a></p></blockquote><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install react-ripple-button --save</span><br><span class="line">$ yarn add react-ripple-button</span><br></pre></td></tr></table></figure><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> RippleBtn <span class="keyword">from</span> <span class="string">"react-ripple-button"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> onClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">565</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">RippleBtn</span> <span class="attr">btnClassName</span>=<span class="string">"test"</span> <span class="attr">text</span>=<span class="string">"test"</span> <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span> /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br><span class="line"></span><br><span class="line"><span class="comment">//css</span></span><br><span class="line">.test &#123;</span><br><span class="line">  background-color: red !important;</span><br><span class="line">  width: <span class="number">300</span>px;</span><br><span class="line">  height: <span class="number">150</span>px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">  btnClassName: PropTypes.string,      <span class="comment">//Custom component name</span></span><br><span class="line">  btnStyle: PropTypes.object,          <span class="comment">//Custom component style</span></span><br><span class="line">  onClick: PropTypes.func.isRequired,</span><br><span class="line">  text: PropTypes.string.isRequired    <span class="comment">//Custom component content</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">  btnClassName: <span class="string">""</span>,</span><br><span class="line">  btnStyle: &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="License"><a href="#License" class="headerlink" title="License"></a>License</h1><p>MIT</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一个水波按钮的react组件封装&lt;br&gt;基于&lt;a href=&quot;https://codepen.io/jh3y/pen/EKGXEY&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://codepen.io/jh3y/pen/EKGXEY&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;react-ripple-button&quot;&gt;&lt;a href=&quot;#react-ripple-button&quot; class=&quot;headerlink&quot; title=&quot;react-ripple-button&quot;&gt;&lt;/a&gt;react-ripple-button&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;a ripple-button component for React that from Ripple buttons &lt;a href=&quot;https://codepen.io/jh3y/pen/EKGXEY&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://codepen.io/jh3y/pen/EKGXEY&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Installation&quot;&gt;&lt;a href=&quot;#Installation&quot; class=&quot;headerlink&quot; title=&quot;Installation&quot;&gt;&lt;/a&gt;Installation&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install react-ripple-button --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ yarn add react-ripple-button&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;Usage&quot;&gt;&lt;a href=&quot;#Usage&quot; class=&quot;headerlink&quot; title=&quot;Usage&quot;&gt;&lt;/a&gt;Usage&lt;/h2&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://ShowPenZ.github.io/categories/javascript/"/>
    
      <category term="npm package" scheme="https://ShowPenZ.github.io/categories/javascript/npm-package/"/>
    
    
      <category term="react" scheme="https://ShowPenZ.github.io/tags/react/"/>
    
      <category term="ripple-button" scheme="https://ShowPenZ.github.io/tags/ripple-button/"/>
    
  </entry>
  
</feed>
